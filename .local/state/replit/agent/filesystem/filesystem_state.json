{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Solo Leveling Productivity App\n\n## Overview\n\nThis is a Solo Leveling-themed personal productivity application that gamifies goal management and daily task completion. The application features a React frontend with TypeScript, a Node.js/Express backend, and Firebase integration for authentication and data storage. The app allows users to create and manage goals across different categories, track their progress, and level up their virtual character based on completion rates. The design emphasizes the Solo Leveling anime/manga aesthetic with dark themes, gradients, and gaming elements.\n\n## Recent Updates (January 2025)\n\n- **Authentication System Stabilized**: Fixed critical Firebase authentication and Firestore connection issues that were causing 400 errors during login. Implemented robust error handling and automatic connection recovery for all database operations.\n\n- **Notification System Fixed**: Completely rebuilt notification functionality with proper error handling, input validation, and working test notifications. Users can now successfully add custom reminder times without crashes.\n\n- **Firebase Connection Recovery**: Added automatic Firestore connection monitoring and recovery system that handles network issues gracefully without data loss.\n\n- **URL Routing System**: Implemented proper browser navigation with Wouter router, allowing natural back/forward button usage on mobile devices. Each section now has dedicated URLs (/dashboard, /settings, /calendar, /analytics, /notes, /streaks).\n\n- **Service Worker Implementation**: Added comprehensive PWA functionality with offline support, background sync, and push notifications. Service Worker is properly configured for production deployment while being disabled in development environments to avoid security errors.\n\n- **Enhanced Mobile Experience**: Complete category customization system allowing users to rename quest categories and Shadow Archive labels. Mobile-optimized layouts with responsive design patterns.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development tooling\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React hooks with custom hooks for Firebase integration and TanStack Query for server state\n- **UI Components**: Radix UI primitives with custom styled components using Tailwind CSS\n- **Styling**: Tailwind CSS with custom Solo Leveling theme colors and Orbitron font for headers\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **API Design**: RESTful API structure with routes organized in `/api` prefix\n- **Storage Interface**: Abstracted storage layer with both in-memory and database implementations\n- **Development Setup**: Vite integration for full-stack development with HMR\n\n### Authentication & Authorization\n- **Provider**: Firebase Authentication with Google sign-in\n- **Session Management**: Firebase Auth state management with React context\n- **User Profiles**: Firestore documents for extended user data including level, XP, and rank\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for schema management\n- **Authentication**: Firebase Authentication with Google sign-in\n- **User Data**: Firestore for user profiles, goals, categories, and statistics\n- **Schema Design**: Normalized structure with users, categories, goals, and user_stats tables\n- **Cross-Device Sync**: Firebase ensures data consistency across mobile and desktop devices\n- **Development Database**: Local PostgreSQL for development, Firestore for user authentication and profile data\n\n### Component Architecture\n- **Layout Components**: Sidebar navigation, top bar, and responsive mobile design\n- **Goal Management**: Category-based organization with collapsible sections and priority/status tracking\n- **Calendar Integration**: Date-based goal planning and completion tracking\n- **Analytics Dashboard**: Progress tracking with XP systems and streak counters\n- **Morning Routine**: Automated prompts and goal entry modals\n\n### Gaming System\n- **Leveling Mechanism**: XP-based progression with configurable thresholds\n- **Rank System**: E-Rank through S-Rank progression based on level milestones\n- **Category Organization**: Main Mission, Training, and Side Quests with color-coded themes\n- **Streak Tracking**: Daily completion streaks with visual indicators\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Router (Wouter), React Hook Form, React Query\n- **Development Tools**: Vite, TypeScript, ESBuild for production builds\n- **Node.js Backend**: Express.js, TSX for development server\n\n### UI and Styling\n- **Component Library**: Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts (Inter, Orbitron) for Solo Leveling aesthetic\n\n### Database and Authentication\n- **Database**: PostgreSQL with Neon Database serverless hosting\n- **ORM**: Drizzle ORM with Drizzle Kit for migrations\n- **Authentication**: Firebase Auth with Firestore for user data\n- **Session Storage**: Connect-pg-simple for PostgreSQL session storage\n\n### Data Management\n- **Validation**: Zod for schema validation and type safety\n- **Date Handling**: date-fns for date manipulation and formatting\n- **State Management**: TanStack React Query for server state caching\n\n### Development and Deployment\n- **Build Tool**: Vite with React plugin and runtime error overlay\n- **Code Quality**: TypeScript with strict configuration\n- **Environment**: Replit-specific plugins for development environment\n- **Database Migrations**: Drizzle Kit for schema management and migrations","size_bytes":5982},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        orbitron: ['Orbitron', 'monospace'],\n        inter: ['Inter', 'sans-serif'],\n        rajdhani: ['Rajdhani', 'sans-serif'],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        // Solo Leveling colors\n        'solo-black': '#0a0a0a',\n        'solo-dark': '#131323',\n        'solo-darker': '#1a1a2e',\n        'solo-accent': '#16213e',\n        'solo-blue': '#00d4ff',\n        'solo-electric': '#0f3460',\n        'solo-purple': '#533483',\n        'solo-violet': '#7209b7',\n        'solo-gold': '#ffd700',\n        'solo-red': '#ff3333',\n        'solo-shadow': '#0f0f23',\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3185},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Serve Service Worker with correct MIME type\n  app.get('/sw.js', (req, res) => {\n    res.setHeader('Content-Type', 'application/javascript');\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.setHeader('Pragma', 'no-cache');\n    res.setHeader('Expires', '0');\n    res.sendFile(path.resolve('public/sw.js'));\n  });\n\n  // Serve manifest with correct MIME type\n  app.get('/manifest.json', (req, res) => {\n    res.setHeader('Content-Type', 'application/json');\n    res.sendFile(path.resolve('public/manifest.json'));\n  });\n\n  // Serve PWA icons with correct MIME types\n  app.get('/icon-*.png', (req, res) => {\n    res.setHeader('Content-Type', 'image/png');\n    res.setHeader('Cache-Control', 'public, max-age=86400'); // 24 hours\n    res.sendFile(path.resolve(`public${req.path}`));\n  });\n\n  // Serve static assets from public folder\n  app.use(express.static(path.resolve('public'), {\n    setHeaders: (res, path) => {\n      if (path.endsWith('.js')) {\n        res.setHeader('Content-Type', 'application/javascript');\n      } else if (path.endsWith('.png')) {\n        res.setHeader('Content-Type', 'image/png');\n      } else if (path.endsWith('.ico')) {  \n        res.setHeader('Content-Type', 'image/x-icon');\n      } else if (path.endsWith('.json')) {\n        res.setHeader('Content-Type', 'application/json');\n      }\n    }\n  }));\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3459},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { users, calendarEvents, notes, insertCalendarEventSchema, insertNoteSchema } from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Helper function to get user ID\n  const getUserId = async () => {\n    const [user] = await db.select().from(users).where(eq(users.firebaseUid, 'temp-user-id'));\n    return user?.id;\n  };\n\n  // Calendar Events API\n  app.get(\"/api/calendar-events\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const events = await db.select().from(calendarEvents).where(eq(calendarEvents.userId, userId));\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching calendar events:\", error);\n      res.status(500).json({ error: \"Failed to fetch calendar events\" });\n    }\n  });\n\n  app.post(\"/api/calendar-events\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const eventData = insertCalendarEventSchema.parse({ ...req.body, userId });\n      const [event] = await db.insert(calendarEvents).values(eventData).returning();\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error creating calendar event:\", error);\n      res.status(500).json({ error: \"Failed to create calendar event\" });\n    }\n  });\n\n  app.put(\"/api/calendar-events/:id\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const { id } = req.params;\n      const updateData = { ...req.body, updatedAt: new Date() };\n      const [event] = await db.update(calendarEvents)\n        .set(updateData)\n        .where(and(eq(calendarEvents.id, id), eq(calendarEvents.userId, userId)))\n        .returning();\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error updating calendar event:\", error);\n      res.status(500).json({ error: \"Failed to update calendar event\" });\n    }\n  });\n\n  app.delete(\"/api/calendar-events/:id\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const { id } = req.params;\n      await db.delete(calendarEvents)\n        .where(and(eq(calendarEvents.id, id), eq(calendarEvents.userId, userId)));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting calendar event:\", error);\n      res.status(500).json({ error: \"Failed to delete calendar event\" });\n    }\n  });\n\n  // Notes API\n  app.get(\"/api/notes\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const userNotes = await db.select().from(notes).where(eq(notes.userId, userId));\n      res.json(userNotes);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      res.status(500).json({ error: \"Failed to fetch notes\" });\n    }\n  });\n\n  app.post(\"/api/notes\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const noteData = insertNoteSchema.parse({ ...req.body, userId });\n      const [note] = await db.insert(notes).values(noteData).returning();\n      res.json(note);\n    } catch (error) {\n      console.error(\"Error creating note:\", error);\n      res.status(500).json({ error: \"Failed to create note\" });\n    }\n  });\n\n  app.put(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const { id } = req.params;\n      const updateData = { ...req.body, updatedAt: new Date() };\n      const [note] = await db.update(notes)\n        .set(updateData)\n        .where(and(eq(notes.id, id), eq(notes.userId, userId)))\n        .returning();\n      res.json(note);\n    } catch (error) {\n      console.error(\"Error updating note:\", error);\n      res.status(500).json({ error: \"Failed to update note\" });\n    }\n  });\n\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const userId = await getUserId();\n      if (!userId) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const { id } = req.params;\n      await db.delete(notes)\n        .where(and(eq(notes.id, id), eq(notes.userId, userId)));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n      res.status(500).json({ error: \"Failed to delete note\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5077},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  displayName: text(\"display_name\"),\n  level: integer(\"level\").default(1),\n  currentXP: integer(\"current_xp\").default(0),\n  totalXP: integer(\"total_xp\").default(0),\n  streak: integer(\"streak\").default(0),\n  rank: text(\"rank\").default(\"E-Rank\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  icon: text(\"icon\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").default(\"pending\"), // pending, in-progress, completed, failed\n  priority: text(\"priority\").default(\"medium\"), // low, medium, high\n  xpValue: integer(\"xp_value\").default(10),\n  dueDate: timestamp(\"due_date\"),\n  completedAt: timestamp(\"completed_at\"),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurringPattern: jsonb(\"recurring_pattern\"), // { type: 'daily' | 'weekly', days: ['mon', 'tue'] }\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  date: timestamp(\"date\").notNull(),\n  goalsCompleted: integer(\"goals_completed\").default(0),\n  totalGoals: integer(\"total_goals\").default(0),\n  xpGained: integer(\"xp_gained\").default(0),\n  isDungeonCleared: boolean(\"is_dungeon_cleared\").default(false),\n});\n\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  date: text(\"date\").notNull(),\n  type: text(\"type\").notNull(),\n  completed: boolean(\"completed\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const notes = pgTable(\"notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: text(\"category\").notNull(),\n  tags: jsonb(\"tags\").default(sql`'[]'::jsonb`).notNull(),\n  starred: boolean(\"starred\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({\n  id: true,  \n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\nexport type Note = typeof notes.$inferSelect;\n","size_bytes":4831},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Router, Route, Switch } from \"wouter\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { AuthProvider, useAuth } from \"@/hooks/useAuth\";\nimport { TooltipProvider } from \"@radix-ui/react-tooltip\";\nimport { ToastContainer } from \"@/components/ui/toast\";\nimport { PWAInstallPrompt } from \"@/components/features/PWAInstallPrompt\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Login from \"@/pages/Login\";\nimport \"@/index.css\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\n// Protected Routes Component - only renders if user is authenticated\nfunction ProtectedRoutes() {\n  const { user, loading } = useAuth();\n\n  // CRITICAL: Show loading state while checking authentication\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <div className=\"text-cyan-400 font-['Orbitron'] text-xl\">Authenticating...</div>\n          <div className=\"text-gray-400 text-sm mt-2\">\n            Connecting to Firebase...\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // CRITICAL: Enforce authentication - ABSOLUTELY NO bypassing allowed\n  if (!user) {\n    console.log('ProtectedRoutes: No user, redirecting to login');\n    return <Login />;\n  }\n\n  // CRITICAL: Triple-check authentication before allowing access\n  if (!user.uid || !user.email) {\n    console.log('ProtectedRoutes: Invalid user data, redirecting to login');\n    return <Login />;\n  }\n\n  // PRODUCTION SAFETY: Additional validation\n  if (typeof user.uid !== 'string' || user.uid.length < 10) {\n    console.log('ProtectedRoutes: Invalid user ID format, redirecting to login');\n    return <Login />;\n  }\n\n  // If authenticated, show protected routes\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/settings\" component={Dashboard} />\n        <Route path=\"/analytics\" component={Dashboard} />\n        <Route path=\"/calendar\" component={Dashboard} />\n        <Route path=\"/notes\" component={Dashboard} />\n        <Route path=\"/streaks\" component={Dashboard} />\n        {/* Fallback to dashboard for any unmatched routes */}\n        <Route component={Dashboard} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction App() {\n  // Force Solo Leveling theme for production consistency  \n  useEffect(() => {\n    document.documentElement.classList.add('dark');\n    document.body.style.cssText = `\n      background: #0a0a0f !important;\n      background-image: \n        radial-gradient(circle at 25% 25%, rgba(0, 150, 255, 0.1) 0%, transparent 40%),\n        radial-gradient(circle at 75% 75%, rgba(139, 69, 19, 0.08) 0%, transparent 40%),\n        linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(13, 13, 25, 0.95) 100%) !important;\n      background-attachment: fixed !important;\n      color: #f8fafc !important;\n      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif !important;\n      margin: 0 !important;\n      padding: 0 !important;\n      min-height: 100vh !important;\n    `;\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <AuthProvider>\n            <div \n              className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900\" \n              style={{\n                background: '#0a0a0f',\n                backgroundImage: `\n                  radial-gradient(circle at 25% 25%, rgba(0, 150, 255, 0.1) 0%, transparent 40%),\n                  radial-gradient(circle at 75% 75%, rgba(139, 69, 19, 0.08) 0%, transparent 40%),\n                  linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(13, 13, 25, 0.95) 100%)\n                `,\n                backgroundAttachment: 'fixed',\n                minHeight: '100vh'\n              }}\n            >\n              <ProtectedRoutes />\n            </div>\n            <ToastContainer />\n            <PWAInstallPrompt />\n          </AuthProvider>\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;","size_bytes":4511},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Orbitron:wght@400;700;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Professional Dark Theme */\n  --background: 215 28% 9%;\n  --foreground: 210 40% 98%;\n  --card: 215 28% 11%;\n  --card-foreground: 210 40% 98%;\n  --popover: 215 28% 11%;\n  --popover-foreground: 210 40% 98%;\n  --primary: 200 98% 50%;\n  --primary-foreground: 215 28% 9%;\n  --secondary: 215 28% 16%;\n  --secondary-foreground: 210 40% 98%;\n  --muted: 215 28% 16%;\n  --muted-foreground: 215 20% 70%;\n  --accent: 215 28% 16%;\n  --accent-foreground: 210 40% 98%;\n  --destructive: 0 62% 50%;\n  --destructive-foreground: 210 40% 98%;\n  --border: 215 28% 18%;\n  --input: 215 28% 16%;\n  --ring: 200 98% 50%;\n  --radius: 0.5rem;\n  \n  /* Solo Leveling Theme Colors - Customizable */\n  --primary-color: #0ea5e9;\n  --secondary-color: #06b6d4;\n  --accent-color: #8b5cf6;\n  \n  /* Legacy Support */\n  --neon-blue: var(--primary-color);\n  --neon-cyan: var(--secondary-color);\n  --neon-purple: var(--accent-color);\n  \n  /* Refined Colors */\n  --accent-blue: #3b82f6;\n  --accent-cyan: #06b6d4;\n  --accent-purple: #8b5cf6;\n  --success-green: #10b981;\n  --warning-orange: #f59e0b;\n}\n\n* {\n  border-color: hsl(var(--border));\n  box-sizing: border-box;\n}\n\nbody {\n  background: #0a0a0f;\n  background-image: \n    radial-gradient(circle at 25% 25%, rgba(0, 150, 255, 0.1) 0%, transparent 40%),\n    radial-gradient(circle at 75% 75%, rgba(139, 69, 19, 0.08) 0%, transparent 40%),\n    linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(13, 13, 25, 0.95) 100%);\n  background-attachment: fixed;\n  color: #f8fafc;\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  font-weight: 400;\n  line-height: 1.6;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n}\n\n/* Critical: Ensure styles load in production */\nhtml {\n  background: #0a0a0f !important;\n  background-image: \n    radial-gradient(circle at 25% 25%, rgba(0, 150, 255, 0.1) 0%, transparent 40%),\n    radial-gradient(circle at 75% 75%, rgba(139, 69, 19, 0.08) 0%, transparent 40%),\n    linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(13, 13, 25, 0.95) 100%) !important;\n  background-attachment: fixed !important;\n}\n\n/* Solo Leveling Inspired Background Patterns */\nbody::before {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: \n    url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.02'%3E%3Cpath d='M30 30l15-15v30l-15-15zm-15-15v30l15-15-15-15z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  opacity: 0.3;\n  pointer-events: none;\n  z-index: -1;\n}\n\n@layer components {\n  /* Hunter Status Window */\n  .hunter-status-window {\n    background: linear-gradient(145deg, \n      rgba(15, 15, 25, 0.95),\n      rgba(25, 25, 40, 0.9)\n    );\n    border: 2px solid transparent;\n    background-clip: padding-box;\n    border-radius: 16px;\n    position: relative;\n    overflow: hidden;\n    box-shadow: \n      0 25px 50px rgba(0, 0, 0, 0.5),\n      inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n  }\n  \n  .hunter-status-window::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    border-radius: 16px;\n    padding: 2px;\n    background: linear-gradient(45deg, \n      rgba(0, 150, 255, 0.6),\n      rgba(139, 69, 19, 0.4),\n      rgba(255, 215, 0, 0.3)\n    );\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: xor;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n    animation: borderGlow 3s ease-in-out infinite alternate;\n  }\n  \n  /* Mystical Card */\n  .mystical-card {\n    background: linear-gradient(145deg, \n      rgba(20, 20, 35, 0.9),\n      rgba(30, 30, 50, 0.8)\n    );\n    border: 1px solid rgba(0, 150, 255, 0.3);\n    border-radius: 12px;\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.4),\n      0 0 0 1px rgba(0, 150, 255, 0.1),\n      inset 0 1px 0 rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(15px);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .mystical-card::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, \n      transparent, \n      rgba(0, 150, 255, 0.1), \n      transparent\n    );\n    transition: left 0.5s;\n  }\n  \n  .mystical-card:hover {\n    border-color: rgba(0, 150, 255, 0.5);\n    box-shadow: \n      0 16px 40px rgba(0, 0, 0, 0.5),\n      0 0 0 1px rgba(0, 150, 255, 0.2),\n      0 0 30px rgba(0, 150, 255, 0.15);\n    transform: none;\n  }\n  \n  .mystical-card:hover::after {\n    left: 100%;\n  }\n  \n  /* Power Button */\n  .power-button {\n    background: linear-gradient(135deg, \n      rgba(0, 150, 255, 0.8),\n      rgba(0, 100, 200, 0.9)\n    );\n    border: 2px solid rgba(0, 150, 255, 0.4);\n    border-radius: 8px;\n    color: #ffffff;\n    font-weight: 700;\n    font-family: 'Orbitron', monospace;\n    padding: 8px 16px;\n    position: relative;\n    overflow: hidden;\n    transition: all 0.3s ease;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    box-shadow: \n      0 0 30px rgba(0, 150, 255, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.2);\n  }\n  \n  .power-button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, \n      transparent, \n      rgba(255, 255, 255, 0.2), \n      transparent\n    );\n    transition: left 0.5s;\n  }\n  \n  .power-button:hover {\n    background: linear-gradient(135deg, \n      rgba(0, 150, 255, 1),\n      rgba(0, 120, 220, 1)\n    );\n    box-shadow: \n      0 0 40px rgba(0, 150, 255, 0.6),\n      0 8px 20px rgba(0, 150, 255, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.3);\n    transform: none;\n    border-color: rgba(0, 150, 255, 0.8);\n  }\n  \n  .power-button:hover::before {\n    left: 100%;\n  }\n  \n  /* Quest Category Card */\n  .quest-category {\n    background: linear-gradient(145deg, \n      rgba(25, 25, 40, 0.9),\n      rgba(35, 35, 55, 0.8)\n    );\n    border: 1px solid rgba(0, 150, 255, 0.2);\n    border-radius: 12px;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .quest-category::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: linear-gradient(90deg, \n      transparent,\n      rgba(0, 150, 255, 0.8),\n      transparent\n    );\n    transform: translateX(-100%);\n    transition: transform 0.5s ease;\n  }\n  \n  .quest-category:hover::before {\n    transform: translateX(100%);\n  }\n  \n  .quest-category:hover {\n    border-color: rgba(0, 150, 255, 0.4);\n    box-shadow: \n      0 8px 25px rgba(0, 0, 0, 0.3),\n      0 0 20px rgba(0, 150, 255, 0.1);\n    transform: none;\n  }\n  \n  /* Goal Quest Item */\n  .goal-quest {\n    background: linear-gradient(145deg, \n      rgba(30, 30, 50, 0.8),\n      rgba(40, 40, 65, 0.6)\n    );\n    border: 1px solid rgba(0, 150, 255, 0.15);\n    border-radius: 8px;\n    padding: 16px;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .goal-quest::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 4px;\n    background: linear-gradient(180deg, \n      rgba(0, 150, 255, 0.8),\n      rgba(139, 69, 19, 0.6)\n    );\n    transform: scaleY(0);\n    transition: transform 0.3s ease;\n    transform-origin: bottom;\n  }\n  \n  .goal-quest:hover {\n    background: linear-gradient(145deg, \n      rgba(40, 40, 65, 0.9),\n      rgba(50, 50, 80, 0.7)\n    );\n    border-color: rgba(0, 150, 255, 0.3);\n    transform: none;\n    box-shadow: \n      0 8px 25px rgba(0, 0, 0, 0.2),\n      0 0 15px rgba(0, 150, 255, 0.1);\n  }\n  \n  .goal-quest:hover::after {\n    transform: scaleY(1);\n  }\n}\n\n/* Solo Leveling Animations */\n.fade-in {\n  animation: mysticalFadeIn 600ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.slide-up {\n  animation: shadowRise 800ms cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.hunter-glow {\n  animation: hunterAura 3s ease-in-out infinite alternate;\n}\n\n.power-surge {\n  animation: powerSurge 2s ease-in-out infinite;\n}\n\n.level-up {\n  animation: levelUpPulse 1s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n@keyframes mysticalFadeIn {\n  0% { \n    opacity: 0; \n    filter: blur(4px);\n  }\n  100% { \n    opacity: 1; \n    filter: blur(0);\n  }\n}\n\n@keyframes shadowRise {\n  0% {\n    opacity: 0;\n    transform: translateY(30px) scale(0.95);\n    filter: blur(2px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n    filter: blur(0);\n  }\n}\n\n@keyframes hunterAura {\n  0% {\n    box-shadow: \n      0 0 20px rgba(0, 150, 255, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  }\n  100% {\n    box-shadow: \n      0 0 40px rgba(0, 150, 255, 0.6),\n      0 0 80px rgba(139, 69, 19, 0.2),\n      inset 0 1px 0 rgba(255, 255, 255, 0.2);\n  }\n}\n\n@keyframes powerSurge {\n  0%, 100% {\n    filter: brightness(1);\n  }\n  50% {\n    filter: brightness(1.2);\n  }\n}\n\n@keyframes levelUpPulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes borderGlow {\n  0% {\n    opacity: 0.3;\n  }\n  100% {\n    opacity: 0.8;\n  }\n}\n\n/* Particle Effects */\n.particle-effect {\n  position: relative;\n  overflow: hidden;\n}\n\n.particle-effect::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: \n    radial-gradient(2px 2px at 20px 30px, rgba(0, 150, 255, 0.3), transparent),\n    radial-gradient(2px 2px at 40px 70px, rgba(139, 69, 19, 0.2), transparent),\n    radial-gradient(1px 1px at 90px 40px, rgba(255, 215, 0, 0.4), transparent),\n    radial-gradient(1px 1px at 130px 80px, rgba(0, 150, 255, 0.2), transparent);\n  background-repeat: repeat;\n  background-size: 200px 100px;\n  animation: particleFloat 20s linear infinite;\n  pointer-events: none;\n}\n\n@keyframes particleFloat {\n  0% {\n    transform: translateY(100vh) rotate(0deg);\n  }\n  100% {\n    transform: translateY(-100px) rotate(360deg);\n  }\n}\n\n/* Remove loading state once app loads */\n.loading-screen {\n  display: none;\n}\n\n/* Smooth scrolling for better UX */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(180deg, var(--neon-blue), var(--neon-purple));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(180deg, var(--neon-cyan), var(--neon-blue));\n}\n\n/* Professional hover effects - reduced animations */\n.hover\\:scale-110:hover {\n  transform: scale(1.01);\n  transition: transform 0.15s ease, opacity 0.2s ease;\n}\n\n.hover\\:scale-105:hover {\n  transform: scale(1.005);\n  transition: transform 0.1s ease;\n}\n\n/* Mobile-First Responsive Design */\n@media (max-width: 768px) {\n  /* Container optimizations */\n  .hunter-status-window {\n    margin: 8px;\n    padding: 12px;\n    max-width: calc(100vw - 16px);\n    max-height: calc(100vh - 32px);\n    overflow-y: auto;\n  }\n  \n  .mystical-card {\n    padding: 12px;\n    margin: 4px 0;\n  }\n  \n  .quest-category {\n    margin: 6px 0;\n    padding: 12px;\n  }\n  \n  /* Touch-optimized buttons */\n  .power-button {\n    padding: 14px 24px;\n    font-size: 16px;\n    min-height: 48px;\n  }\n  \n  button, .cursor-pointer {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Typography scaling */\n  h1 {\n    font-size: 1.5rem;\n    line-height: 1.3;\n  }\n  \n  h2 {\n    font-size: 1.25rem;\n    line-height: 1.4;\n  }\n  \n  h3 {\n    font-size: 1.125rem;\n  }\n  \n  /* Grid system mobile optimization */\n  .grid-cols-1.md\\:grid-cols-4,\n  .grid-cols-1.md\\:grid-cols-3,\n  .grid-cols-1.md\\:grid-cols-2 {\n    grid-template-columns: 1fr;\n    gap: 8px;\n  }\n  \n  /* Calendar mobile adjustments */\n  .calendar-grid {\n    gap: 2px;\n  }\n  \n  .calendar-day {\n    min-height: 60px;\n    padding: 4px;\n  }\n  \n  /* Analytics mobile optimization */\n  .analytics-chart {\n    height: auto;\n    min-height: 200px;\n  }\n  \n  /* Navigation improvements */\n  .sidebar-nav {\n    padding: 8px;\n  }\n  \n  .nav-item {\n    padding: 12px 16px;\n    margin: 2px 0;\n  }\n  \n  /* Form elements mobile optimization */\n  input, textarea, select {\n    font-size: 16px; /* Prevents zoom on iOS */\n    padding: 12px;\n    min-height: 44px;\n  }\n  \n  /* Modal improvements */\n  .modal-content {\n    max-height: 80vh;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n  \n  /* Performance optimizations */\n  .particle-effect::before {\n    animation-duration: 45s;\n    opacity: 0.2;\n  }\n  \n  /* Reduce motion for better performance */\n  .reduce-motion {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n  \n  /* Bottom navigation safe area */\n  .mobile-safe-bottom {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n}\n\n/* Tablet optimizations */\n@media (min-width: 769px) and (max-width: 1024px) {\n  .grid-cols-1.md\\:grid-cols-4 {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .grid-cols-1.md\\:grid-cols-3 {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* Ultra-wide desktop enhancements */\n@media (min-width: 1920px) {\n  .hunter-status-window {\n    max-width: 1200px;\n  }\n  \n  .mystical-card {\n    padding: 32px;\n  }\n  \n  .particle-effect::before {\n    animation-duration: 15s;\n    opacity: 0.6;\n  }\n}\n\n/* Reduce motion for accessibility */\n@media (prefers-reduced-motion: reduce) {\n  .hunter-glow,\n  .power-surge,\n  .level-up,\n  .particle-effect::before {\n    animation: none;\n  }\n  \n  .mystical-card,\n  .goal-quest,\n  .power-button {\n    transition: none;\n  }\n}\n/* Enhanced Mobile Optimization for Solo Hunter App */\n@media (max-width: 768px) {\n  /* Prevent horizontal overflow */\n  body, html {\n    overflow-x: hidden !important;\n    max-width: 100vw !important;\n  }\n  \n  /* Card spacing improvements */\n  .mystical-card {\n    padding: 0.75rem !important;\n    margin-bottom: 0.75rem !important;\n    max-width: calc(100vw - 1rem) !important;\n    word-wrap: break-word !important;\n  }\n  \n  /* Button improvements */\n  .power-button {\n    padding: 0.5rem 0.75rem !important;\n    font-size: 0.875rem !important;\n    white-space: nowrap !important;\n  }\n  \n  /* Touch target improvements */\n  button, a, [role=\"button\"] {\n    min-height: 44px;\n    min-width: 44px;\n    touch-action: manipulation;\n  }\n  \n  /* Mobile typography */\n  h1 { font-size: 1.5rem !important; }\n  h2 { font-size: 1.25rem !important; }\n  h3 { font-size: 1.125rem !important; }\n  \n  /* Form optimizations */\n  input, textarea, select {\n    font-size: 16px !important;\n    padding: 0.75rem !important;\n    max-width: 100% !important;\n    box-sizing: border-box !important;\n  }\n  \n  /* Grid layouts */\n  .grid {\n    max-width: 100% !important;\n    overflow: hidden !important;\n  }\n  \n  /* Ensure grid items don't overflow */\n  .grid > * {\n    min-width: 0 !important;\n    word-wrap: break-word !important;\n  }\n  \n  /* Calendar grid spacing */\n  .grid-cols-7 {\n    gap: 0.125rem !important;\n  }\n  \n  .grid-cols-7 > div {\n    min-height: 70px !important;\n    padding: 0.25rem !important;\n    min-width: 0 !important;\n  }\n  \n  /* Stats grid mobile optimization */\n  .grid-cols-2 > div {\n    min-width: 0 !important;\n    overflow: hidden !important;\n  }\n  \n  /* Text truncation for mobile */\n  .truncate-mobile {\n    white-space: nowrap !important;\n    overflow: hidden !important;\n    text-overflow: ellipsis !important;\n  }\n}\n\n/* PWA enhancements */\n@media (display-mode: standalone) {\n  body {\n    -webkit-user-select: none;\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n}\n\n/* Animation for PWA install banner */\n@keyframes slide-up {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.animate-slide-up {\n  animation: slide-up 0.3s ease-out;\n}\n","size_bytes":16204},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import React, { useState, useEffect, createContext, useContext, ReactNode } from 'react';\nimport type { User } from 'firebase/auth';\nimport { onAuthStateChange, signInWithGoogle, logOut, getRedirectResult, auth } from '@/lib/firebase';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: () => Promise<User | null>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    console.log('AuthProvider: Setting up auth state listener');\n    \n    // Handle redirect result for storage-partitioned environments\n    const handleRedirectResult = async () => {\n      try {\n        const result = await getRedirectResult(auth);\n        if (result) {\n          console.log('AuthProvider: Redirect sign-in successful:', result.user?.email);\n          setUser(result.user);\n        }\n      } catch (error) {\n        console.error('AuthProvider: Redirect result error:', error);\n      }\n    };\n    \n    // Check for redirect result on page load\n    handleRedirectResult();\n    \n    // Add timeout to prevent infinite loading in production\n    const loadingTimeout = setTimeout(() => {\n      console.log('AuthProvider: Timeout reached, stopping loading state');\n      setLoading(false);\n    }, 8000); // 8 second timeout\n    \n    let isUnmounted = false;\n    \n    const unsubscribe = onAuthStateChange(async (user: User | null) => {\n      if (isUnmounted) return;\n      \n      console.log('AuthProvider: Auth state changed', { user: user ? user.email : 'null' });\n      clearTimeout(loadingTimeout); // Clear timeout when auth state resolves\n      setUser(user);\n      \n      if (user && !isUnmounted) {\n        try {\n          // Set user in data manager for proper data isolation\n          const { userDataManager } = await import('@/lib/userDataManager');\n          userDataManager.setUser(user);\n          \n          // Check if user profile exists, create if not\n          const profile = await userDataManager.getUserProfile();\n          if (!profile && !isUnmounted) {\n            console.log('Creating new user profile for:', user.email);\n            await userDataManager.createUserProfile(user);\n          } else if (!isUnmounted) {\n            // Update last login date\n            await userDataManager.updateUserProfile({\n              lastLoginDate: new Date().toISOString()\n            });\n          }\n        } catch (error) {\n          console.error('Error managing user profile:', error);\n          // Don't let profile errors block the app\n        }\n      }\n      \n      if (!isUnmounted) {\n        setLoading(false);\n      }\n    });\n\n    return () => {\n      isUnmounted = true;\n      clearTimeout(loadingTimeout);\n      unsubscribe();\n    };\n  }, []);\n\n  const signIn = async () => {\n    try {\n      console.log('AuthProvider: Attempting Google sign in');\n      const user = await signInWithGoogle();\n      console.log('AuthProvider: Sign in successful', { user: user ? user.email : 'null' });\n      return user;\n    } catch (error) {\n      console.error('AuthProvider: Sign in error:', error);\n      throw error;\n    }\n  };\n\n  const signOutUser = async () => {\n    try {\n      await logOut();\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    signIn,\n    signOut: signOutUser,\n  };\n\n  return React.createElement(AuthContext.Provider, { value }, children);\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":3869},"client/src/hooks/useGoals.ts":{"content":"import { useState, useEffect } from 'react';\nimport { collection, query, where, onSnapshot, addDoc, updateDoc, doc, orderBy, setDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { Goal, Category, CategoryWithGoals } from '@/types';\nimport { useAuth } from './useAuth';\nimport { useUserProfile } from './useUserProfile';\nimport { DEFAULT_CATEGORIES } from '@/lib/defaultData';\n\nexport function useGoals() {\n  const { user } = useAuth();\n  const { addXP } = useUserProfile();\n  const [categories, setCategories] = useState<CategoryWithGoals[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setCategories([]);\n      setLoading(false);\n      return;\n    }\n\n    // Subscribe to categories\n    const categoriesQuery = query(\n      collection(db, 'categories'),\n      where('userId', '==', user.uid),\n      orderBy('order', 'asc')\n    );\n\n    const unsubscribeCategories = onSnapshot(categoriesQuery, async (snapshot) => {\n      const categoriesData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate() || new Date(),\n      })) as Category[];\n\n      // If no categories exist, create default ones\n      if (categoriesData.length === 0) {\n        const categoryPromises = DEFAULT_CATEGORIES.map(async (categoryData, index) => {\n          const categoryRef = doc(collection(db, 'categories'));\n          const category = {\n            ...categoryData,\n            userId: user.uid,\n            createdAt: new Date(),\n          };\n          await setDoc(categoryRef, category);\n          return {\n            id: categoryRef.id,\n            ...category,\n          };\n        });\n\n        const newCategories = await Promise.all(categoryPromises);\n        \n        // Subscribe to goals for new categories\n        const goalsQuery = query(\n          collection(db, 'goals'),\n          where('userId', '==', user.uid),\n          orderBy('createdAt', 'desc')\n        );\n\n        const unsubscribeGoals = onSnapshot(goalsQuery, (goalsSnapshot) => {\n          const goalsData = goalsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data(),\n            dueDate: doc.data().dueDate?.toDate(),\n            completedAt: doc.data().completedAt?.toDate(),\n            createdAt: doc.data().createdAt?.toDate() || new Date(),\n          })) as Goal[];\n\n          const categoriesWithGoals = newCategories.map(category => ({\n            ...category,\n            goals: goalsData.filter(goal => goal.categoryId === category.id)\n          }));\n\n          setCategories(categoriesWithGoals);\n          setLoading(false);\n        });\n\n        return () => unsubscribeGoals();\n      } else {\n        // Subscribe to goals for existing categories\n        const goalsQuery = query(\n          collection(db, 'goals'),\n          where('userId', '==', user.uid),\n          orderBy('createdAt', 'desc')\n        );\n\n        const unsubscribeGoals = onSnapshot(goalsQuery, (goalsSnapshot) => {\n          const goalsData = goalsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data(),\n            dueDate: doc.data().dueDate?.toDate(),\n            completedAt: doc.data().completedAt?.toDate(),\n            createdAt: doc.data().createdAt?.toDate() || new Date(),\n          })) as Goal[];\n\n          // Group goals by category\n          const categoriesWithGoals = categoriesData.map(category => ({\n            ...category,\n            goals: goalsData.filter(goal => goal.categoryId === category.id)\n          }));\n\n          setCategories(categoriesWithGoals);\n          setLoading(false);\n        });\n\n        return () => unsubscribeGoals();\n      }\n    });\n\n    return () => unsubscribeCategories();\n  }, [user]);\n\n  const addGoal = async (goalData: Omit<Goal, 'id' | 'userId' | 'createdAt'>) => {\n    if (!user) throw new Error('User not authenticated');\n\n    try {\n      await addDoc(collection(db, 'goals'), {\n        ...goalData,\n        userId: user.uid,\n        createdAt: new Date(),\n        dueDate: goalData.dueDate ? new Date(goalData.dueDate) : null,\n      });\n    } catch (error) {\n      console.error('Error adding goal:', error);\n      throw error;\n    }\n  };\n\n  const updateGoal = async (goalId: string, updates: Partial<Goal>) => {\n    try {\n      const goalRef = doc(db, 'goals', goalId);\n      const updateData = {\n        ...updates,\n        ...(updates.status === 'completed' && { completedAt: new Date() }),\n        ...(updates.dueDate && { dueDate: new Date(updates.dueDate) }),\n      };\n      await updateDoc(goalRef, updateData);\n    } catch (error) {\n      console.error('Error updating goal:', error);\n      throw error;\n    }\n  };\n\n  const toggleGoalStatus = async (goalId: string, currentStatus: string) => {\n    const goal = categories\n      .flatMap(cat => cat.goals)\n      .find(goal => goal.id === goalId);\n    \n    if (!goal) return;\n\n    const newStatus = currentStatus === 'completed' ? 'pending' : 'completed';\n    \n    try {\n      await updateGoal(goalId, { status: newStatus });\n      \n      // Add XP when completing a goal\n      if (newStatus === 'completed') {\n        await addXP(goal.xpValue);\n      }\n    } catch (error) {\n      console.error('Error toggling goal status:', error);\n      throw error;\n    }\n  };\n\n  return {\n    categories,\n    loading,\n    addGoal,\n    updateGoal,\n    toggleGoalStatus,\n  };\n}\n","size_bytes":5414},"client/src/hooks/useUserProfile.ts":{"content":"import { useState, useEffect } from 'react';\nimport { doc, onSnapshot, setDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { UserProfile } from '@/types';\nimport { useAuth } from './useAuth';\n\nexport function useUserProfile() {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setProfile(null);\n      setLoading(false);\n      return;\n    }\n\n    const userRef = doc(db, 'users', user.uid);\n    \n    const unsubscribe = onSnapshot(userRef, async (doc) => {\n      if (doc.exists()) {\n        const data = doc.data();\n        setProfile({\n          id: doc.id,\n          firebaseUid: user.uid,\n          email: user.email || '',\n          displayName: user.displayName || '',\n          level: data.level || 1,\n          currentXP: data.currentXP || 0,\n          totalXP: data.totalXP || 0,\n          streak: data.streak || 0,\n          rank: data.rank || 'E-Rank',\n          createdAt: data.createdAt?.toDate() || new Date(),\n        });\n      } else {\n        // Create new user profile\n        const newProfile: Omit<UserProfile, 'id'> = {\n          firebaseUid: user.uid,\n          email: user.email || '',\n          displayName: user.displayName || '',\n          level: 1,\n          currentXP: 0,\n          totalXP: 0,\n          streak: 0,\n          rank: 'E-Rank',\n          createdAt: new Date(),\n        };\n        \n        await setDoc(userRef, newProfile);\n        setProfile({\n          id: user.uid,\n          ...newProfile,\n        });\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [user]);\n\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    if (!user) return;\n    \n    const userRef = doc(db, 'users', user.uid);\n    await updateDoc(userRef, updates);\n  };\n\n  const addXP = async (xp: number) => {\n    if (!profile) return;\n    \n    const newCurrentXP = profile.currentXP + xp;\n    const newTotalXP = profile.totalXP + xp;\n    \n    // Level up logic\n    const xpPerLevel = 1000; // Base XP needed per level\n    const newLevel = Math.floor(newTotalXP / xpPerLevel) + 1;\n    \n    // Rank progression\n    const getRank = (level: number) => {\n      if (level >= 50) return 'Shadow Monarch';\n      if (level >= 40) return 'S-Rank';\n      if (level >= 30) return 'A-Rank';\n      if (level >= 20) return 'B-Rank';\n      if (level >= 10) return 'C-Rank';\n      if (level >= 5) return 'D-Rank';\n      return 'E-Rank';\n    };\n\n    await updateProfile({\n      currentXP: newCurrentXP % xpPerLevel,\n      totalXP: newTotalXP,\n      level: newLevel,\n      rank: getRank(newLevel),\n    });\n  };\n\n  return {\n    profile,\n    loading,\n    updateProfile,\n    addXP,\n  };\n}\n","size_bytes":2799},"client/src/lib/defaultData.ts":{"content":"import { Category } from '@/types';\n\nexport const DEFAULT_CATEGORIES = [\n  {\n    name: 'Main Mission',\n    color: '#EF4444', // red-500\n    icon: 'crown',\n    isActive: true,\n    order: 0,\n  },\n  {\n    name: 'Training',\n    color: '#3B82F6', // blue-500\n    icon: 'dumbbell',\n    isActive: true,\n    order: 1,\n  },\n  {\n    name: 'Side Quests',\n    color: '#10B981', // green-500\n    icon: 'map',\n    isActive: true,\n    order: 2,\n  },\n];\n\nexport const MOTIVATIONAL_QUOTES = [\n  \"The stronger the monster, the stronger I become. - Sung Jin-Woo\",\n  \"I alone level up. - Sung Jin-Woo\", \n  \"No matter how hard you train, there's always room for improvement. - Sung Jin-Woo\",\n  \"The shadow soldiers will always have my back. - Sung Jin-Woo\",\n  \"Every ending is a new beginning. - Sung Jin-Woo\",\n  \"Power without purpose is meaningless. - Sung Jin-Woo\",\n  \"The weak fear the shadows, but I command them. - Sung Jin-Woo\",\n  \"In this world, only the strong survive. - Sung Jin-Woo\",\n];\n\nexport const XP_VALUES = {\n  LOW_PRIORITY: 25,\n  MEDIUM_PRIORITY: 50,\n  HIGH_PRIORITY: 100,\n};\n\nexport const LEVEL_THRESHOLDS = {\n  XP_PER_LEVEL: 1000,\n  RANKS: {\n    'E-Rank': 0,\n    'D-Rank': 5,\n    'C-Rank': 10,\n    'B-Rank': 20,\n    'A-Rank': 30,\n    'S-Rank': 40,\n    'Shadow Monarch': 50,\n  }\n};\n","size_bytes":1281},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithRedirect, getRedirectResult, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport type { User } from \"firebase/auth\";\nimport { getFirestore, enableNetwork, disableNetwork, terminate, clearIndexedDbPersistence, type Firestore } from \"firebase/firestore\";\n\n// Validate required Firebase configuration\nif (!import.meta.env.VITE_FIREBASE_API_KEY || !import.meta.env.VITE_FIREBASE_PROJECT_ID || !import.meta.env.VITE_FIREBASE_APP_ID) {\n  console.error('Firebase configuration incomplete. Missing required environment variables.');\n  console.error('Available env vars:', {\n    hasApiKey: !!import.meta.env.VITE_FIREBASE_API_KEY,\n    hasProjectId: !!import.meta.env.VITE_FIREBASE_PROJECT_ID,\n    hasAppId: !!import.meta.env.VITE_FIREBASE_APP_ID\n  });\n  throw new Error('Firebase configuration incomplete. Missing required environment variables.');\n}\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n\n// Enhanced Firestore initialization with robust error recovery\nlet firestoreInstance: Firestore | null = null;\nlet isFirestoreInitialized = false;\nlet connectionRetryCount = 0;\nconst MAX_RETRY_ATTEMPTS = 3;\n\nconst initializeFirestore = async () => {\n  try {\n    if (!isFirestoreInitialized) {\n      console.log('Initializing Firestore with enhanced error handling...');\n      firestoreInstance = getFirestore(app);\n      isFirestoreInitialized = true;\n      connectionRetryCount = 0;\n      console.log('Firestore initialized successfully');\n    }\n    return firestoreInstance;\n  } catch (error) {\n    console.error('Firestore initialization failed:', error);\n    throw error;\n  }\n};\n\n// Get Firestore instance with lazy initialization\nexport const getFirestoreInstance = async () => {\n  if (!firestoreInstance) {\n    await initializeFirestore();\n  }\n  return firestoreInstance;\n};\n\n// Legacy export for compatibility\nexport let db: Firestore | null = null;\n\n// Initialize immediately but handle errors gracefully\n(async () => {\n  try {\n    db = await getFirestoreInstance();\n  } catch (error) {\n    console.error('Failed to initialize Firestore on startup:', error);\n  }\n})();\n\n// Enhanced connection recovery with exponential backoff\nexport const ensureFirestoreConnection = async () => {\n  try {\n    if (!firestoreInstance) {\n      await initializeFirestore();\n    }\n    \n    if (connectionRetryCount < MAX_RETRY_ATTEMPTS && firestoreInstance) {\n      await enableNetwork(firestoreInstance);\n      console.log('Firestore connection restored');\n      connectionRetryCount = 0;\n      return true;\n    } else {\n      console.error('Max retry attempts reached, connection failed');\n      return false;\n    }\n  } catch (error) {\n    connectionRetryCount++;\n    console.warn(`Firestore connection attempt ${connectionRetryCount} failed:`, error);\n    \n    if (connectionRetryCount >= MAX_RETRY_ATTEMPTS) {\n      console.error('Giving up on Firestore connection after max retries');\n      return false;\n    }\n    \n    // Exponential backoff\n    const delay = Math.pow(2, connectionRetryCount) * 1000;\n    setTimeout(() => ensureFirestoreConnection(), delay);\n    return false;\n  }\n};\n\n// Robust error handling for 400 errors\nexport const handleFirestoreError = async (error: any) => {\n  console.error('Firestore error detected:', error);\n  \n  // Handle specific error codes\n  if (error?.code === 'unavailable' || \n      error?.message?.includes('400') || \n      error?.message?.includes('Bad Request') ||\n      error?.code === 'resource-exhausted') {\n    \n    console.log('Attempting aggressive Firestore recovery...');\n    \n    try {\n      // Terminate existing connection\n      if (firestoreInstance) {\n        await terminate(firestoreInstance);\n      }\n      \n      // Clear any cached data\n      try {\n        if (firestoreInstance) {\n          await clearIndexedDbPersistence(firestoreInstance);\n        }\n      } catch (clearError) {\n        console.warn('Could not clear persistence:', clearError);\n      }\n      \n      // Reset state\n      isFirestoreInitialized = false;\n      firestoreInstance = null;\n      connectionRetryCount = 0;\n      \n      // Wait and reinitialize\n      setTimeout(async () => {\n        try {\n          await initializeFirestore();\n          db = firestoreInstance;\n        } catch (reinitError) {\n          console.error('Failed to reinitialize Firestore:', reinitError);\n        }\n      }, 3000);\n      \n    } catch (recoveryError) {\n      console.error('Failed to recover from Firestore error:', recoveryError);\n    }\n  }\n  \n  return false;\n};\n\nconsole.log('Firebase initialized with project:', import.meta.env.VITE_FIREBASE_PROJECT_ID);\n\n// Export missing functions that are referenced in hooks\n// Note: Full implementations of logOut and onAuthStateChange are defined below\n\n// Export getRedirectResult for use in auth hooks\nexport { getRedirectResult };\n\nconst provider = new GoogleAuthProvider();\n// Configure provider for better compatibility\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\n\n// Enhanced authentication with fallback methods\nexport const signInWithGoogle = async () => {\n  try {\n    console.log('Firebase: Attempting Google sign-in...');\n    \n    // First try popup method\n    try {\n      const result = await signInWithPopup(auth, provider);\n      console.log('Firebase: Popup sign-in successful:', result.user?.email);\n      return result.user;\n    } catch (popupError: any) {\n      console.warn('Popup sign-in failed, trying redirect method:', popupError);\n      \n      // If popup fails due to storage or browser restrictions, use redirect\n      if (popupError.code === 'auth/popup-blocked' || \n          popupError.code === 'auth/popup-closed-by-user' ||\n          popupError.message?.includes('storage') ||\n          popupError.message?.includes('sessionStorage')) {\n        \n        console.log('Using redirect sign-in method');\n        await signInWithRedirect(auth, provider);\n        return null; // Redirect will handle the return\n      }\n      throw popupError;\n    }\n  } catch (error: any) {\n    console.error(\"Firebase: Sign-in error:\", error);\n    \n    // Provide better error messages for production\n    if (error.code === 'auth/popup-blocked') {\n      throw new Error('Popup was blocked. Please allow popups for this site and try again.');\n    } else if (error.code === 'auth/popup-closed-by-user') {\n      throw new Error('Sign-in was cancelled. Please try again.');\n    } else if (error.code === 'auth/network-request-failed') {\n      throw new Error('Network error. Please check your connection and try again.');\n    }\n    \n    throw error;\n  }\n};\n\nexport const logOut = async () => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n    throw error;\n  }\n};\n\nexport const onAuthStateChange = (callback: (user: User | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n","size_bytes":7306},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useUserProfile } from \"@/hooks/useUserData\";\nimport { useUserGoals } from \"@/hooks/useUserData\";\nimport { AppSidebar } from \"../components/layout/AppSidebar\";\nimport { TopBar } from \"../components/layout/TopBar\";\nimport { Crown, Star, CheckCircle, Calendar, BarChart3, Target, Plus, X, Bell, Trash2, Check, Menu, Flame } from \"lucide-react\";\nimport { AnalyticsDashboard } from \"../components/analytics/AnalyticsDashboard\";\nimport { CalendarView } from \"../components/calendar/CalendarView\";\nimport { Settings } from \"./Settings\";\nimport { MorningModal } from \"@/components/modals/MorningModal\";\nimport { ShadowArchives } from \"../components/features/ShadowArchives\";\nimport { OnboardingModal } from \"@/components/modals/OnboardingModal\";\nimport { MotivationalGreeting } from \"@/components/ui/MotivationalGreeting\";\nimport { StreakTracker } from \"../components/features/StreakTracker\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { PWAInstall } from \"@/components/features/PWAInstall\";\nimport { serviceWorkerManager, HunterNotifications } from \"@/lib/serviceWorker\";\n\nfunction Dashboard() {\n  const { user } = useAuth();\n  const { profile, loading: profileLoading } = useUserProfile();\n  const { goals, loading: goalsLoading, createGoal, updateGoal, deleteGoal } = useUserGoals();\n  \n  // CRITICAL: Ensure user is authenticated before rendering anything\n  if (!user || !user.uid) {\n    return null; // This will cause ProtectedRoutes to redirect to login\n  }\n\n  const [location, setLocation] = useLocation();\n  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n  const [isDesktopSidebarCollapsed, setIsDesktopSidebarCollapsed] = useState(false);\n  \n  // Extract current view from URL path\n  const getCurrentView = () => {\n    if (location === '/' || location === '/dashboard') return 'dashboard';\n    const view = location.replace('/', '');\n    return view || 'dashboard';\n  };\n  \n  const currentView = getCurrentView();\n  const [isMorningModalOpen, setIsMorningModalOpen] = useState(false);\n  const [isOnboardingOpen, setIsOnboardingOpen] = useState(false);\n  const [showGreeting, setShowGreeting] = useState(false);\n\n  // Initialize service worker and show greeting on first visit of the day\n  useEffect(() => {\n    const lastGreeting = localStorage.getItem(`last-greeting-${user.uid}`);\n    const today = new Date().toDateString();\n    \n    if (lastGreeting !== today) {\n      setShowGreeting(true);\n      localStorage.setItem(`last-greeting-${user.uid}`, today);\n    }\n    \n    // Initialize service worker\n    serviceWorkerManager.init().then((success) => {\n      if (success) {\n        console.log('Service Worker initialized successfully');\n        \n        // Request notification permission\n        serviceWorkerManager.requestNotificationPermission().then((permission) => {\n          if (permission === 'granted') {\n            console.log('Notifications enabled');\n            \n            // Send daily motivation if it's morning\n            const hour = new Date().getHours();\n            if (hour >= 8 && hour <= 10 && lastGreeting !== today) {\n              setTimeout(() => {\n                HunterNotifications.dailyMotivation();\n              }, 3000); // 3 second delay\n            }\n          }\n        });\n        \n        // Enable background sync\n        serviceWorkerManager.enableBackgroundSync();\n        \n        // Subscribe to push notifications\n        serviceWorkerManager.subscribeToPushNotifications();\n      } else {\n        console.log('Service Worker not available, using fallback notifications');\n      }\n    });\n  }, [user.uid]);\n\n  const [newGoal, setNewGoal] = useState({ \n    title: '', \n    categoryId: '', \n    priority: 'medium' as 'low' | 'medium' | 'high', \n    dueDate: new Date().toISOString().split('T')[0] // Default to today\n  });\n  const [isAddingGoal, setIsAddingGoal] = useState<string | null>(null);\n\n  // Calculate dynamic user stats from actual goals\n  const totalGoals = goals.length;\n  const completedGoals = goals.filter(g => g.status === 'completed').length;\n  const currentXP = profile?.xp || 0;\n  const level = profile?.level || 1;\n  const currentLevelXP = currentXP % 100;\n  const streak = profile?.streak || 0;\n  const rank = profile?.rank || \"E-Rank\";\n\n  // Firebase-based goal management functions\n  const handleAddGoal = async (categoryId: string) => {\n    if (!newGoal.title.trim()) return;\n    \n    try {\n      await createGoal({\n        title: newGoal.title,\n        category: categoryId,\n        priority: newGoal.priority,\n        dueDate: newGoal.dueDate || undefined,\n        status: 'pending',\n        xpReward: 25\n      });\n      \n      setNewGoal({ \n        title: '', \n        categoryId: '', \n        priority: 'medium', \n        dueDate: new Date().toISOString().split('T')[0] \n      });\n      setIsAddingGoal(null);\n      \n      showToast({\n        type: 'success',\n        title: 'Quest Added!',\n        message: `\"${newGoal.title}\" has been added to your quest list`\n      });\n    } catch (error) {\n      console.error('Error adding goal:', error);\n      showToast({\n        type: 'error',\n        title: 'Failed to Add Quest',\n        message: 'Please try again'\n      });\n    }\n  };\n\n  const handleToggleGoal = async (goalId: string) => {\n    try {\n      const goal = goals.find(g => g.id === goalId);\n      if (!goal) return;\n      \n      await updateGoal(goalId, {\n        status: goal.status === 'completed' ? 'pending' : 'completed',\n        completedAt: goal.status === 'completed' ? undefined : new Date().toISOString()\n      });\n      \n      if (goal.status !== 'completed') {\n        showToast({\n          type: 'success',\n          title: 'Quest Completed!',\n          message: `\"${goal.title}\" marked as complete. XP gained!`\n        });\n      }\n    } catch (error) {\n      console.error('Error toggling goal:', error);\n      showToast({\n        type: 'error',\n        title: 'Update Failed',\n        message: 'Please try again'\n      });\n    }\n  };\n\n  const handleDeleteGoal = async (goalId: string) => {\n    try {\n      await deleteGoal(goalId);\n      showToast({\n        type: 'success',\n        title: 'Quest Deleted',\n        message: 'Quest has been removed from your list'\n      });\n    } catch (error) {\n      console.error('Error deleting goal:', error);\n      showToast({\n        type: 'error',\n        title: 'Delete Failed',\n        message: 'Please try again'\n      });\n    }\n  };\n\n  // Show loading state\n  if (profileLoading || goalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <div className=\"text-cyan-400 font-['Orbitron'] text-xl\">Loading Hunter Data...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderDashboard = () => (\n    <div className=\"space-y-5\">\n      {/* Hunter Status Window */}\n      <div className=\"bg-gradient-to-br from-gray-900/90 to-gray-800/80 border border-cyan-500/20 rounded-xl p-5 shadow-2xl backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <Crown className=\"w-7 h-7 text-white\" />\n              </div>\n              <div className=\"absolute -bottom-1 -right-1 bg-amber-500 text-black text-xs font-bold px-1.5 py-0.5 rounded-full\">\n                {rank}\n              </div>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-white font-['Orbitron']\">\n                <span className=\"bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent\">\n                  HUNTER LEVEL {level}\n                </span>\n              </h1>\n              <p className=\"text-gray-300\">Welcome back, {user?.displayName || 'Hunter'}</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-5 text-center\">\n            <div>\n              <div className=\"text-xl font-bold text-green-400\">{completedGoals}</div>\n              <div className=\"text-xs text-gray-400\">Completed</div>\n            </div>\n            <div>\n              <div className=\"text-xl font-bold text-amber-400\">{streak}</div>\n              <div className=\"text-xs text-gray-400\">Streak</div>\n            </div>\n            <div>\n              <div className=\"text-xl font-bold text-blue-400\">{totalGoals - completedGoals}</div>\n              <div className=\"text-xs text-gray-400\">Active</div>\n            </div>\n          </div>\n        </div>\n\n        {/* XP Progress */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-300 font-semibold\">EXPERIENCE POINTS</span>\n            <span className=\"text-cyan-400 font-bold\">{currentLevelXP} / 100</span>\n          </div>\n          <div className=\"relative h-3 bg-gray-800 rounded-full overflow-hidden border border-gray-700\">\n            <div \n              className=\"h-full bg-gradient-to-r from-blue-500 via-cyan-400 to-amber-400 rounded-full transition-all duration-1000\"\n              style={{ width: `${(currentLevelXP / 100) * 100}%` }}\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-pulse\" />\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500\">\n            <span>Level {level}</span>\n            <span>Next: Level {level + 1}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Goals Display */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">Active Quests</h2>\n        {totalGoals === 0 ? (\n          <div className=\"text-center py-8 text-gray-400\">\n            <Target className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <p>No active quests. Create your first quest to begin your hunter journey!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {goals.map((goal) => (\n              <div key={goal.id} className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-4 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <button\n                    onClick={() => handleToggleGoal(goal.id)}\n                    className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all ${\n                      goal.status === 'completed'\n                        ? 'bg-green-500 border-green-500 text-white'\n                        : 'border-gray-400 hover:border-green-500'\n                    }`}\n                  >\n                    {goal.status === 'completed' && <Check className=\"w-4 h-4\" />}\n                  </button>\n                  <div>\n                    <h3 className={`font-medium ${goal.status === 'completed' ? 'text-gray-400 line-through' : 'text-white'}`}>\n                      {goal.title}\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">\n                      {goal.category} • {goal.priority} priority\n                      {goal.dueDate && ` • Due: ${new Date(goal.dueDate).toLocaleDateString()}`}\n                    </p>\n                  </div>\n                </div>\n                <button\n                  onClick={() => handleDeleteGoal(goal.id)}\n                  className=\"text-red-400 hover:text-red-300 transition-colors\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Add Goal Section */}\n      <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <input\n            type=\"text\"\n            value={newGoal.title}\n            onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}\n            placeholder=\"Enter new quest...\"\n            className=\"flex-1 bg-gray-900 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-cyan-400\"\n          />\n          <select\n            value={newGoal.priority}\n            onChange={(e) => setNewGoal({ ...newGoal, priority: e.target.value as 'low' | 'medium' | 'high' })}\n            className=\"bg-gray-900 border border-gray-600 rounded px-3 py-2 text-white focus:outline-none focus:border-cyan-400\"\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n          </select>\n          <input\n            type=\"date\"\n            value={newGoal.dueDate}\n            onChange={(e) => setNewGoal({ ...newGoal, dueDate: e.target.value })}\n            className=\"bg-gray-900 border border-gray-600 rounded px-3 py-2 text-white focus:outline-none focus:border-cyan-400\"\n          />\n          <button\n            onClick={() => handleAddGoal('main-mission')}\n            className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded transition-colors\"\n          >\n            <Plus className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex\">\n      {/* Desktop Sidebar */}\n      <div className={`hidden lg:block transition-all duration-300 ${isDesktopSidebarCollapsed ? 'w-16' : 'w-64'}`}>\n        <AppSidebar\n          currentView={currentView}\n          onViewChange={(view) => setLocation(view === 'dashboard' ? '/' : `/${view}`)}\n          collapsed={isDesktopSidebarCollapsed}\n          onToggleCollapse={() => setIsDesktopSidebarCollapsed(!isDesktopSidebarCollapsed)}\n          userLevel={profile?.level || 1}\n          currentXP={profile?.xp || 0}\n          maxXP={((profile?.level || 1) * 100)}\n          user={user}\n        />\n      </div>\n\n      {/* Mobile Sidebar Overlay */}\n      {isMobileSidebarOpen && (\n        <>\n          <div \n            className=\"lg:hidden fixed inset-0 bg-black/50 z-40\" \n            onClick={() => setIsMobileSidebarOpen(false)}\n          />\n          <div className=\"lg:hidden fixed left-0 top-0 h-full w-64 z-50\">\n            <AppSidebar\n              currentView={currentView}\n              onViewChange={(view) => {\n                setLocation(view === 'dashboard' ? '/' : `/${view}`);\n                setIsMobileSidebarOpen(false);\n              }}\n              userLevel={profile?.level || 1}\n              currentXP={profile?.xp || 0}\n              maxXP={((profile?.level || 1) * 100)}\n              user={user}\n            />\n          </div>\n        </>\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <TopBar \n          onMenuClick={() => setIsMobileSidebarOpen(true)}\n          user={user}\n        />\n        \n        <main className=\"flex-1 p-4 lg:p-6 overflow-y-auto\">\n          {currentView === 'dashboard' && renderDashboard()}\n          {currentView === 'analytics' && <AnalyticsDashboard />}\n          {currentView === 'calendar' && <CalendarView />}\n          {currentView === 'settings' && <Settings />}\n          {currentView === 'notes' && <ShadowArchives />}\n          {currentView === 'streaks' && <StreakTracker completedGoalsToday={completedGoals} totalGoalsToday={totalGoals} />}\n        </main>\n      </div>\n\n      {/* Modals */}\n      {showGreeting && (\n        <MotivationalGreeting\n          onClose={() => setShowGreeting(false)}\n          userName={user?.displayName || 'Hunter'}\n        />\n      )}\n      \n      {isMorningModalOpen && (\n        <MorningModal isOpen={isMorningModalOpen} onClose={() => setIsMorningModalOpen(false)} />\n      )}\n      \n      {isOnboardingOpen && (\n        <OnboardingModal isOpen={isOnboardingOpen} onClose={() => setIsOnboardingOpen(false)} />\n      )}\n\n      <PWAInstall />\n    </div>\n  );\n}\n\nexport default Dashboard;","size_bytes":16382},"client/src/pages/Dashboard_broken.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { AppSidebar } from \"@/components/layout/AppSidebar\";\nimport { TopBar } from \"@/components/layout/TopBar\";\nimport { GoalCategory } from \"@/components/goals/GoalCategory\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useGoals } from \"@/hooks/useGoals\";\nimport { Crown, Star, CheckCircle, Calendar, BarChart3, Target } from \"lucide-react\";\nimport { AnalyticsDashboard } from \"../components/analytics/AnalyticsDashboard\";\nimport { CalendarView } from \"../components/calendar/CalendarView\";\nimport { Settings } from \"./Settings\";\nimport { MorningModal } from \"@/components/modals/MorningModal\";\nimport { NotesPanel } from \"../components/features/NotesPanel\";\nimport { OnboardingModal } from \"@/components/modals/OnboardingModal\";\n\ninterface Goal {\n  id: string;\n  title: string;\n  description?: string;\n  completed: boolean;\n  priority: 'low' | 'medium' | 'high';\n  dueDate?: string;\n  xpReward?: number;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  goals: Goal[];\n}\n\nfunction Dashboard() {\n  const { user } = useAuth();\n  const { goals, addGoal, toggleGoal } = useGoals();\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n  const [isMorningModalOpen, setIsMorningModalOpen] = useState(false);\n  const [isOnboardingOpen, setIsOnboardingOpen] = useState(false);\n\n  // Calculate dynamic user stats from actual goals\n  const totalGoals = categories.flatMap(cat => cat.goals).length;\n  const completedGoals = categories.flatMap(cat => cat.goals).filter(g => g.completed).length;\n  const currentXP = completedGoals * 25; // 25 XP per completed goal\n  const level = Math.floor(currentXP / 100) + 1;\n  const maxXP = level * 100;\n  const currentLevelXP = currentXP % 100;\n  const streak = 0; // Could be calculated from completion dates\n  const rank = level <= 2 ? \"E-Rank\" : level <= 5 ? \"D-Rank\" : level <= 10 ? \"C-Rank\" : level <= 15 ? \"B-Rank\" : level <= 25 ? \"A-Rank\" : \"S-Rank\";\n\n  // Categories with goals state - start empty\n  const [categories, setCategories] = useState<Category[]>([\n    {\n      id: '1',\n      name: 'Main Mission',\n      goals: []\n    },\n    {\n      id: '2', \n      name: 'Training',\n      goals: []\n    },\n    {\n      id: '3',\n      name: 'Side Quest',\n      goals: []\n    }\n  ]);\n\n  const handleAddGoal = (categoryId: string, goalData: Omit<Goal, 'id'>) => {\n    const newGoal: Goal = {\n      ...goalData,\n      id: Date.now().toString()\n    };\n    \n    setCategories(prev => prev.map(category => \n      category.id === categoryId \n        ? { ...category, goals: [...category.goals, newGoal] }\n        : category\n    ));\n  };\n\n  const handleToggleGoal = (goalId: string) => {\n    setCategories(prev => prev.map(category => ({\n      ...category,\n      goals: category.goals.map(goal => \n        goal.id === goalId \n          ? { ...goal, completed: !goal.completed }\n          : goal\n      )\n    })));\n  };\n\n  const handleDeleteGoal = (goalId: string) => {\n    setCategories(prev => prev.map(category => ({\n      ...category,\n      goals: category.goals.filter(goal => goal.id !== goalId)\n    })));\n  };\n\n  const renderDashboard = () => (\n    <div className=\"space-y-8 slide-up\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-blue-400 via-cyan-300 to-amber-300 bg-clip-text text-transparent\">\n              HUNTER HEADQUARTERS\n            </span>\n          </h1>\n          <p className=\"text-gray-400 mt-2 font-medium\">Command Center • Shadow Monarch Division</p>\n        </div>\n        <button\n          onClick={() => setIsMorningModalOpen(true)}\n          className=\"power-button\"\n          title=\"Opens a motivational morning planning session to help you plan your day's goals\"\n        >\n          <span className=\"relative z-10\">Daily Planning</span>\n        </button>\n      </div>\n\n      {/* Hunter Status Window */}\n      <div className=\"mystical-card p-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"relative\">\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-blue-400 via-cyan-300 to-amber-300 p-1\">\n                <div className=\"w-full h-full rounded-full bg-gray-900 flex items-center justify-center\">\n                  <Crown className=\"w-10 h-10 text-amber-300\" />\n                </div>\n              </div>\n              <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-r from-amber-400 to-orange-500 rounded-full flex items-center justify-center text-black text-xs font-bold\">\n                {level}\n              </div>\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-white font-['Orbitron']\">{user?.displayName || 'SHADOW HUNTER'}</h2>\n              <p className=\"text-cyan-400 font-semibold text-lg\">{rank}</p>\n              <p className=\"text-gray-400 text-sm\">Guild: Solo Leveling</p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-6xl font-bold text-transparent bg-gradient-to-r from-blue-400 to-cyan-300 bg-clip-text font-['Orbitron']\">\n              {level}\n            </div>\n            <p className=\"text-gray-400 text-sm font-semibold\">CURRENT LEVEL</p>\n          </div>\n        </div>\n\n        {/* XP Progress System */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <span className=\"text-gray-300 font-semibold\">EXPERIENCE POINTS</span>\n            <span className=\"text-cyan-400 font-bold text-lg\">{currentLevelXP.toLocaleString()} / {100}</span>\n          </div>\n          <div className=\"relative h-4 bg-gray-800 rounded-full overflow-hidden border border-gray-700\">\n            <div \n              className=\"h-full bg-gradient-to-r from-blue-500 via-cyan-400 to-amber-400 rounded-full transition-all duration-1000 power-surge\"\n              style={{ width: `${(currentLevelXP / 100) * 100}%` }}\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\" />\n          </div>\n          <div className=\"flex justify-between mt-2 text-xs text-gray-500\">\n            <span>Next Rank: {level + 1}</span>\n            <span>{maxXP - currentXP} XP needed</span>\n          </div>\n        </div>\n\n        {/* Analytics Dashboard */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"mystical-card p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-400 text-sm font-bold uppercase tracking-wide\">Completed Today</p>\n                <p className=\"text-3xl font-bold text-white font-['Orbitron']\">12</p>\n                <p className=\"text-green-400 text-xs font-semibold\">Tasks Done</p>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"mystical-card p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-400 text-sm font-bold uppercase tracking-wide\">Current Streak</p>\n                <p className=\"text-3xl font-bold text-white font-['Orbitron']\">{streak}</p>\n                <p className=\"text-blue-400 text-xs font-semibold\">Days Active</p>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n                <Star className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"mystical-card p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-amber-400 text-sm font-bold uppercase tracking-wide\">This Week</p>\n                <p className=\"text-3xl font-bold text-white font-['Orbitron']\">47</p>\n                <p className=\"text-amber-400 text-xs font-semibold\">Tasks Done</p>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-500 rounded-lg flex items-center justify-center\">\n                <Crown className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"mystical-card p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-400 text-sm font-bold uppercase tracking-wide\">Efficiency</p>\n                <p className=\"text-3xl font-bold text-white font-['Orbitron']\">94%</p>\n                <p className=\"text-purple-400 text-xs font-semibold\">Completion Rate</p>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n                <Target className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quest Categories */}\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-blue-400 to-cyan-300 bg-clip-text text-transparent\">\n              ACTIVE QUESTS\n            </span>\n          </h2>\n          <div className=\"flex items-center space-x-2 text-gray-400\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm font-medium\">System Online</span>\n          </div>\n        </div>\n        {categories.map((category) => (\n          <GoalCategory\n            key={category.id}\n            category={category}\n            onToggleGoal={handleToggleGoal}\n            onAddGoal={handleAddGoal}\n            onDeleteGoal={handleDeleteGoal}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderCalendar = () => (\n    <div className=\"slide-up\">\n      <CalendarView goals={categories.flatMap(cat => \n        cat.goals.map(goal => ({\n          ...goal,\n          category: cat.name\n        }))\n      )} />\n    </div>\n  );\n\n  const renderAnalytics = () => (\n    <div className=\"slide-up\">\n      <AnalyticsDashboard categories={categories} />\n    </div>\n  );\n\n  const renderNotes = () => (\n    <div className=\"slide-up\">\n      <NotesPanel />\n    </div>\n  );\n\n  const renderSettings = () => (\n    <div className=\"slide-up\">\n      <Settings />\n    </div>\n  );\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'dashboard': return renderDashboard();\n      case 'calendar': return renderCalendar();\n      case 'analytics': return renderAnalytics();\n      case 'notes': return renderNotes();\n      case 'settings': return renderSettings();\n      default: return renderDashboard();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex relative\">\n      {/* Mobile Sidebar Overlay */}\n      {isMobileSidebarOpen && (\n        <div \n          className=\"md:hidden fixed inset-0 bg-background/80 backdrop-blur-sm z-40 fade-in\"\n          onClick={() => setIsMobileSidebarOpen(false)}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        md:relative md:translate-x-0 md:block\n        fixed left-0 top-0 z-50 h-full transition-transform duration-300 ease-out\n        ${isMobileSidebarOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'}\n      `}>\n        <AppSidebar\n          currentView={currentView}\n          onViewChange={(view) => {\n            setCurrentView(view);\n            setIsMobileSidebarOpen(false);\n          }}\n          userLevel={level}\n          currentXP={currentXP}\n          maxXP={maxXP}\n          rank={rank}\n        />\n      </div>\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <TopBar \n          user={user}\n          onOpenMorningModal={() => setIsMorningModalOpen(true)}\n          onToggleMobileSidebar={() => setIsMobileSidebarOpen(!isMobileSidebarOpen)}\n        />\n        \n        <div className=\"p-4 md:p-6 h-[calc(100vh-4rem)] overflow-y-auto\">\n          <div className=\"fade-in\">\n            {renderCurrentView()}\n          </div>\n        </div>\n      </main>\n\n      {/* Morning Planning Modal */}\n      <MorningModal \n        isOpen={isMorningModalOpen}\n        onClose={() => setIsMorningModalOpen(false)}\n      />\n      \n      {/* Onboarding Modal */}\n      <OnboardingModal \n        isOpen={isOnboardingOpen}\n        onClose={() => setIsOnboardingOpen(false)}\n      />\n        <div className=\"fixed inset-0 bg-black/90 backdrop-blur-lg z-50 flex items-center justify-center p-4 fade-in\">\n          <div className=\"hunter-status-window p-0 w-full max-w-4xl slide-up overflow-hidden\">\n            {/* Character Background */}\n            <div className=\"relative h-64 bg-gradient-to-br from-blue-900/40 via-gray-900/60 to-black/80 overflow-hidden\">\n              {/* Animated background particles */}\n              <div className=\"absolute inset-0 particle-effect opacity-60\" />\n              \n              {/* Character silhouette/artwork area */}\n              <div className=\"absolute right-8 top-4 w-48 h-56 bg-gradient-to-t from-black/80 via-gray-900/40 to-transparent rounded-lg flex items-end justify-center\">\n                <div className=\"text-6xl mb-4 filter drop-shadow-2xl\">👤</div>\n              </div>\n              \n              {/* System Alert Header */}\n              <div className=\"absolute top-6 left-8\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-red-400 font-bold text-sm uppercase tracking-wider\">SYSTEM ALERT</span>\n                </div>\n                <h2 className=\"text-4xl font-bold text-white font-['Orbitron'] mb-2\">\n                  <span className=\"bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent\">\n                    DAILY QUEST\n                  </span>\n                </h2>\n                <h3 className=\"text-2xl font-bold text-amber-400 font-['Orbitron'] mb-3\">\n                  BRIEFING INITIATED\n                </h3>\n                <p className=\"text-gray-300 text-lg font-semibold max-w-md\">\n                  [HUNTER, YOUR DAILY MISSIONS AWAIT]\n                </p>\n              </div>\n            </div>\n\n            {/* Content Section */}\n            <div className=\"p-8 bg-gradient-to-br from-gray-900/95 to-black/90\">\n              {/* Quest Briefing */}\n              <div className=\"mystical-card p-6 mb-8 bg-gradient-to-br from-blue-900/20 to-cyan-900/10 border-2 border-cyan-500/30\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-lg flex items-center justify-center\">\n                    <Target className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h4 className=\"text-cyan-400 font-bold font-['Orbitron'] text-xl uppercase tracking-wide\">\n                    Mission Parameters\n                  </h4>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"mystical-card p-4 bg-gradient-to-br from-red-900/30 to-red-800/20 border border-red-500/30\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-2xl\">⚔️</span>\n                      <div>\n                        <p className=\"text-red-400 font-bold text-sm uppercase\">Main Mission</p>\n                        <p className=\"text-gray-300 text-xs\">Priority: Critical</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mystical-card p-4 bg-gradient-to-br from-blue-900/30 to-blue-800/20 border border-blue-500/30\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-2xl\">🛡️</span>\n                      <div>\n                        <p className=\"text-blue-400 font-bold text-sm uppercase\">Training</p>\n                        <p className=\"text-gray-300 text-xs\">Priority: High</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mystical-card p-4 bg-gradient-to-br from-green-900/30 to-green-800/20 border border-green-500/30\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-2xl\">⭐</span>\n                      <div>\n                        <p className=\"text-green-400 font-bold text-sm uppercase\">Side Quests</p>\n                        <p className=\"text-gray-300 text-xs\">Priority: Optional</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* System Status */}\n              <div className=\"flex items-center justify-between mb-8\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-green-400 font-semibold text-sm\">HUNTER SYSTEM ONLINE</span>\n                </div>\n                <div className=\"text-gray-400 text-sm font-mono\">\n                  {new Date().toLocaleDateString()} • {new Date().toLocaleTimeString()}\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={() => setIsMorningModalOpen(false)}\n                  className=\"power-button flex-1 text-lg py-4\"\n                >\n                  <span className=\"relative z-10\">ACCEPT MISSIONS</span>\n                </button>\n                <button\n                  onClick={() => setIsMorningModalOpen(false)}\n                  className=\"mystical-card px-8 py-4 text-gray-300 hover:text-white border-2 border-gray-600 hover:border-gray-500 transition-all duration-300 font-bold font-['Orbitron'] uppercase\"\n                >\n                  Postpone\n                </button>\n              </div>\n            </div>\n\n    </div>\n  );\n}\n\nexport default Dashboard;","size_bytes":18725},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Crown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Login() {\n  const { signIn } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSignIn = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Login: Attempting sign-in...');\n      await signIn();\n      console.log('Login: Sign-in successful');\n    } catch (error: any) {\n      console.error('Login error:', error);\n      setError(error.message || 'Sign-in failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"bg-gray-800/60 backdrop-blur-sm border border-cyan-400/30 rounded-xl p-8 text-center shadow-2xl shadow-cyan-400/10\">\n          {/* Logo */}\n          <div className=\"w-20 h-20 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full mx-auto mb-6 flex items-center justify-center shadow-lg shadow-cyan-400/30\">\n            <Crown className=\"w-10 h-10 text-white\" />\n          </div>\n          \n          {/* Title */}\n          <h1 className=\"font-['Orbitron'] font-bold text-3xl text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-400 mb-2\">\n            Solo Hunter\n          </h1>\n          <p className=\"text-gray-300 mb-2 font-medium\">Productivity System</p>\n          <p className=\"text-sm text-gray-400 mb-8\">\n            Awaken your hunter abilities and level up your daily quests\n          </p>\n          \n          {/* Motivational Quote */}\n          <div className=\"bg-gray-900/70 border border-cyan-400/20 rounded-lg p-4 mb-8 shadow-inner\">\n            <p className=\"text-sm text-cyan-100 italic font-medium\">\n              \"Only I can level up.\" - Sung Jin-Woo\n            </p>\n          </div>\n          \n          {/* Error Message */}\n          {error && (\n            <div className=\"bg-red-900/30 border border-red-500/30 rounded-lg p-3 mb-4\">\n              <p className=\"text-red-400 text-sm text-center\">{error}</p>\n            </div>\n          )}\n\n          {/* Sign In Button */}\n          <Button\n            onClick={handleSignIn}\n            disabled={isLoading}\n            className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 text-white py-3 text-lg font-semibold shadow-lg shadow-cyan-500/25 hover:shadow-cyan-400/40 transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n            data-testid=\"button-sign-in\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                <span>Entering Hunter System...</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-center space-x-2\">\n                <Crown className=\"w-5 h-5\" />\n                <span>Awaken Hunter Abilities</span>\n              </div>\n            )}\n          </Button>\n          \n          <p className=\"text-xs text-gray-500 mt-4\">\n            Authenticate with Google to access the Hunter System\n          </p>\n          \n          {/* Decorative elements */}\n          <div className=\"mt-6 flex justify-center space-x-2 opacity-30\">\n            <div className=\"w-2 h-2 bg-cyan-400 rounded-full animate-pulse\"></div>\n            <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n            <div className=\"w-2 h-2 bg-cyan-400 rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3994},"client/src/pages/Settings.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useUserCategories } from \"@/hooks/useUserData\";\nimport { Bell, Palette, User, Shield, RefreshCw, Download, Upload, Trash2, Settings as SettingsIcon, Edit, Save, X, LogOut } from \"lucide-react\";\nimport { NotificationSystem } from \"../components/features/NotificationSystem\";\nimport { PhoneNotifications } from \"../components/features/PhoneNotifications\";\nimport { CategoryCustomization } from \"../components/features/CategoryCustomization\";\nimport { ServiceWorkerStatus } from \"../components/features/ServiceWorkerStatus\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { useConfirmDialog } from \"@/components/ui/ConfirmDialog\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface QuestCategory {\n  id: string;\n  name: string;\n  icon: string;\n  originalName: string;\n}\n\nexport function Settings() {\n  const { signOut, user } = useAuth();\n  const queryClient = useQueryClient();\n  const { showConfirm, confirmDialog } = useConfirmDialog();\n  const [isNotificationOpen, setIsNotificationOpen] = useState(false);\n  const [currentTheme, setCurrentTheme] = useState(() => {\n    return localStorage.getItem('hunter-theme') || 'default';\n  });\n  const [editingCategory, setEditingCategory] = useState<string | null>(null);\n  const { categories: userCategories, updateCategory } = useUserCategories();\n  const [categories, setCategories] = useState<QuestCategory[]>([]);\n  const [editForm, setEditForm] = useState({ name: '', icon: '' });\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedTheme, setSelectedTheme] = useState(() => {\n    return localStorage.getItem('hunter-theme') || 'default';\n  });\n\n  const themes = [\n    { id: 'default', name: 'Hunter Blue', icon: '🔵' },\n    { id: 'shadow', name: 'Shadow Monarch', icon: '🟣' },\n    { id: 'flame', name: 'Flame Emperor', icon: '🔴' },\n    { id: 'ice', name: 'Ice Bearer', icon: '🔵' },\n    { id: 'forest', name: 'Forest Guardian', icon: '🟢' },\n    { id: 'thunder', name: 'Thunder Beast', icon: '🟡' }\n  ];\n\n  const applyTheme = (themeId: string) => {\n    const theme = colorThemes.find(t => t.id === themeId);\n    if (!theme) return;\n    \n    setSelectedTheme(themeId);\n    localStorage.setItem('hunter-theme', themeId);\n    \n    // Remove existing theme style\n    const existingStyle = document.getElementById('hunter-theme-style');\n    if (existingStyle) {\n      existingStyle.remove();\n    }\n    \n    // Add new theme style\n    const style = document.createElement('style');\n    style.id = 'hunter-theme-style';\n    style.textContent = `\n      :root {\n        --primary-color: ${theme.colors[0]};\n        --secondary-color: ${theme.colors[1]};\n        --accent-color: ${theme.colors[2]};\n      }\n      \n      .power-button {\n        background: linear-gradient(135deg, ${theme.colors[0]}, ${theme.colors[1]}) !important;\n      }\n      \n      .mystical-card {\n        border-color: ${theme.colors[0]}33 !important;\n        background: linear-gradient(135deg, ${theme.colors[0]}0a, ${theme.colors[1]}05) !important;\n      }\n      \n      .bg-gradient-to-r.from-blue-600.to-cyan-600 {\n        background: linear-gradient(to right, ${theme.colors[0]}, ${theme.colors[1]}) !important;\n      }\n      \n      .bg-gradient-to-r.from-purple-400.to-pink-400 {\n        background: linear-gradient(to right, ${theme.colors[1]}, ${theme.colors[2]}) !important;\n        -webkit-background-clip: text !important;\n        background-clip: text !important;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    showToast({\n      type: 'success',\n      title: 'Theme Applied!',\n      message: `Switched to ${theme.name}`\n    });\n  };\n\n  const handleSignOut = async () => {\n    const confirmed = await showConfirm(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      () => signOut()\n    );\n  };\n\n  const handleResetData = async () => {\n    const confirmed = await showConfirm(\n      'Reset All Data',\n      'This will permanently delete all your progress, quests, and settings. This cannot be undone!',\n      () => {\n        localStorage.clear();\n        queryClient.clear();\n        window.location.reload();\n      }\n    );\n  };\n\n\n\n  const colorThemes = [\n    { \n      id: 'default', \n      name: 'Hunter Blue', \n      colors: ['#0ea5e9', '#06b6d4', '#3b82f6'],\n      description: 'Classic Solo Leveling theme'\n    },\n    { \n      id: 'shadow', \n      name: 'Shadow Monarch', \n      colors: ['#7c3aed', '#8b5cf6', '#a855f7'],\n      description: 'Purple shadow energy'\n    },\n    { \n      id: 'flame', \n      name: 'Flame Emperor', \n      colors: ['#ef4444', '#f97316', '#fbbf24'],\n      description: 'Fire and gold elements'\n    },\n    { \n      id: 'ice', \n      name: 'Ice Bearer', \n      colors: ['#06b6d4', '#0891b2', '#0284c7'],\n      description: 'Cool ice magic theme'\n    },\n    { \n      id: 'nature', \n      name: 'Beast Lord', \n      colors: ['#10b981', '#059669', '#047857'],\n      description: 'Nature and forest vibes'\n    }\n  ];\n\n  // Convert Firestore categories to local format when they change\n  useEffect(() => {\n    if (userCategories.length > 0) {\n      const convertedCategories = userCategories.map(cat => ({\n        id: cat.id,\n        name: cat.name,\n        icon: cat.icon,\n        originalName: cat.originalName\n      }));\n      setCategories(convertedCategories);\n    }\n  }, [userCategories]);\n\n  useEffect(() => {\n    // Apply saved theme on component mount (without showing toast)\n    const savedTheme = localStorage.getItem('hunter-theme');\n    if (savedTheme && savedTheme !== 'default') {\n      applySilentTheme(savedTheme);\n    }\n  }, []);\n\n  // Silent theme application (without toast) for initialization\n  const applySilentTheme = (themeId: string) => {\n    const theme = colorThemes.find(t => t.id === themeId);\n    if (theme) {\n      const root = document.documentElement;\n      \n      // Create dynamic CSS classes for the theme\n      const existingStyle = document.getElementById('dynamic-theme');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n\n      const style = document.createElement('style');\n      style.id = 'dynamic-theme';\n      style.textContent = `\n        :root {\n          --primary-color: ${theme.colors[0]};\n          --secondary-color: ${theme.colors[1]};\n          --accent-color: ${theme.colors[2]};\n          --solo-blue: ${theme.colors[0]};\n          --solo-cyan: ${theme.colors[1]};\n          --solo-violet: ${theme.colors[2]};\n        }\n        \n        .power-button {\n          background: linear-gradient(135deg, ${theme.colors[0]}, ${theme.colors[1]}) !important;\n        }\n        \n        .power-button:hover {\n          background: linear-gradient(135deg, ${theme.colors[1]}, ${theme.colors[2]}) !important;\n        }\n        \n        .mystical-card {\n          border-color: ${theme.colors[0]}33 !important;\n          background: linear-gradient(135deg, ${theme.colors[0]}0a, ${theme.colors[1]}05) !important;\n        }\n        \n        .hunter-status-window {\n          border-color: ${theme.colors[0]}33 !important;\n          background: linear-gradient(135deg, ${theme.colors[0]}0a, ${theme.colors[1]}05) !important;\n        }\n        \n        .bg-gradient-to-r.from-blue-500.to-cyan-500 {\n          background: linear-gradient(to right, ${theme.colors[0]}, ${theme.colors[1]}) !important;\n        }\n        \n        .bg-gradient-to-r.from-purple-400.to-pink-400 {\n          background: linear-gradient(to right, ${theme.colors[1]}, ${theme.colors[2]}) !important;\n          -webkit-background-clip: text !important;\n          background-clip: text !important;\n        }\n      `;\n      document.head.appendChild(style);\n      \n      setCurrentTheme(themeId);\n      localStorage.setItem('hunter-theme', themeId);\n    }\n  };\n\n\n\n  const handleExportData = () => {\n    // Export all user data including goals, notes, calendar events\n    const exportData = {\n      exportDate: new Date().toISOString(),\n      version: '1.0',\n      userProfile: {\n        displayName: user?.displayName,\n        email: user?.email\n      },\n      settings: {\n        theme: currentTheme,\n        categories: categories\n      },\n      // Add placeholders for data that would come from APIs\n      notes: [],\n      calendarEvents: [],\n      goals: []\n    };\n\n    const dataBlob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `solo-leveling-data-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n\n    showToast({\n      type: 'success',\n      title: 'Data Exported!',\n      message: 'Your hunter data has been downloaded successfully'\n    });\n  };\n\n  const handleImportData = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const importData = JSON.parse(e.target?.result as string);\n        \n        if (importData.settings?.theme) {\n          applyTheme(importData.settings.theme);\n        }\n        \n        if (importData.settings?.categories) {\n          setCategories(importData.settings.categories);\n        }\n\n        showToast({\n          type: 'success',\n          title: 'Data Imported!',\n          message: 'Your settings have been restored successfully'\n        });\n\n      } catch (error) {\n        showToast({\n          type: 'error',\n          title: 'Import Failed',\n          message: 'Invalid file format'\n        });\n      }\n    };\n    reader.readAsText(file);\n    event.target.value = '';\n  };\n\n\n\n  const handleEditCategory = (categoryId: string) => {\n    const category = categories.find(c => c.id === categoryId);\n    if (category) {\n      setEditingCategory(categoryId);\n      setEditForm({ name: category.name, icon: category.icon });\n    }\n  };\n\n  const handleSaveCategory = () => {\n    if (!editForm.name.trim()) {\n      showToast({\n        type: 'warning',\n        title: 'Name Required',\n        message: 'Please enter a category name'\n      });\n      return;\n    }\n\n    setCategories(prev => prev.map(cat => \n      cat.id === editingCategory \n        ? { ...cat, name: editForm.name, icon: editForm.icon || cat.icon }\n        : cat\n    ));\n\n    // Save to localStorage\n    const updatedCategories = categories.map(cat => \n      cat.id === editingCategory \n        ? { ...cat, name: editForm.name, icon: editForm.icon || cat.icon }\n        : cat\n    );\n    localStorage.setItem('hunter-categories', JSON.stringify(updatedCategories));\n\n    setEditingCategory(null);\n    setEditForm({ name: '', icon: '' });\n\n    showToast({\n      type: 'success',\n      title: 'Category Updated!',\n      message: 'Quest category has been customized'\n    });\n  };\n\n  const handleCancelEdit = () => {\n    setEditingCategory(null);\n    setEditForm({ name: '', icon: '' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-blue-900/20 via-purple-900/10 to-transparent animate-pulse\"></div>\n      <div className=\"absolute inset-0 bg-grid-pattern opacity-5\"></div>\n      \n      {/* Main Content */}\n      <div className=\"relative min-h-screen p-3 sm:p-6 lg:p-8\">\n        <div className=\"max-w-4xl mx-auto space-y-6 sm:space-y-8\">\n          {/* Header Section */}\n          <div className=\"text-center mb-6 sm:mb-8\">\n            <div className=\"flex items-center justify-center space-x-3 sm:space-x-4 mb-4 sm:mb-6\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-r from-purple-500 to-blue-500 rounded-xl flex items-center justify-center shadow-2xl\">\n                <SettingsIcon className=\"w-6 h-6 sm:w-8 sm:h-8 text-white\" />\n              </div>\n              <h1 className=\"text-2xl sm:text-4xl md:text-5xl font-bold text-white font-['Orbitron']\">\n                <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                  HUNTER PANEL\n                </span>\n              </h1>\n            </div>\n            <p className=\"text-gray-300 text-base sm:text-lg\">Configure your quest environment</p>\n          </div>\n\n          {/* Settings Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8\">\n            <div className=\"space-y-6 sm:space-y-8\">\n              {/* Category Customization */}\n              <CategoryCustomization />\n              \n              {/* Hunter Profile Card */}\n              <div className=\"mystical-card p-4 sm:p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n                    <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                      HUNTER PROFILE\n                    </span>\n                  </h2>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"bg-gray-800/50 p-3 rounded-lg border border-gray-700/50\">\n                    <div className=\"text-gray-400 text-xs sm:text-sm mb-1\">Hunter Name</div>\n                    <div className=\"text-white font-bold text-sm sm:text-base\">{user?.displayName || 'Anonymous Hunter'}</div>\n                  </div>\n                  <div className=\"bg-gray-800/50 p-3 rounded-lg border border-gray-700/50\">\n                    <div className=\"text-gray-400 text-xs sm:text-sm mb-1\">Email</div>\n                    <div className=\"text-white font-medium text-sm sm:text-base break-all\">{user?.email}</div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Theme Selection */}\n              <div className=\"mystical-card p-4 sm:p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-green-500 to-teal-500 rounded-lg flex items-center justify-center\">\n                    <Palette className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n                    <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                      THEME SELECTION\n                    </span>\n                  </h2>\n                </div>\n                \n                <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n                  {colorThemes.map((theme) => (\n                    <button\n                      key={theme.id}\n                      onClick={() => applyTheme(theme.id)}\n                      className={`p-3 rounded-lg transition-all duration-200 border-2 ${\n                        selectedTheme === theme.id\n                          ? 'border-cyan-500 bg-cyan-500/20'\n                          : 'border-gray-700 hover:border-gray-600 bg-gray-800/50'\n                      }`}\n                    >\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center space-x-1 mb-2\">\n                          {theme.colors.map((color, index) => (\n                            <div\n                              key={index}\n                              className=\"w-3 h-3 rounded-full border border-white/20\"\n                              style={{ backgroundColor: color }}\n                            />\n                          ))}\n                        </div>\n                        <div className=\"text-white text-xs sm:text-sm font-medium\">{theme.name}</div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Right Column - Settings */}\n            <div className=\"space-y-6 sm:space-y-8\">\n              \n              {/* Service Worker Status */}\n              <ServiceWorkerStatus />\n\n              {/* Notification Settings */}\n              <div className=\"mystical-card p-4 sm:p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center\">\n                    <Bell className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n                    <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                      ALERT SYSTEM\n                    </span>\n                  </h2>\n                </div>\n                \n                <PhoneNotifications />\n              </div>\n\n              {/* Account Management */}\n              <div className=\"mystical-card p-4 sm:p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-red-500 to-pink-500 rounded-lg flex items-center justify-center\">\n                    <Shield className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n                    <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                      ACCOUNT CONTROL\n                    </span>\n                  </h2>\n                </div>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  <button\n                    onClick={handleSignOut}\n                    className=\"bg-red-600/20 hover:bg-red-600/30 border-2 border-red-500/30 hover:border-red-500/50 p-4 rounded-lg text-left transition-all duration-300 hover:scale-105 group\"\n                  >\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <LogOut className=\"w-5 h-5 text-red-400 group-hover:text-red-300\" />\n                      <h3 className=\"text-red-400 group-hover:text-red-300 font-bold text-sm sm:text-base\">Sign Out</h3>\n                    </div>\n                    <p className=\"text-gray-300 text-xs sm:text-sm\">Log out safely</p>\n                  </button>\n                  \n                  <button\n                    onClick={handleResetData}\n                    className=\"bg-orange-600/20 hover:bg-orange-600/30 border-2 border-orange-500/30 hover:border-orange-500/50 p-4 rounded-lg text-left transition-all duration-300 hover:scale-105 group\"\n                  >\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Trash2 className=\"w-5 h-5 text-orange-400 group-hover:text-orange-300\" />\n                      <h3 className=\"text-orange-400 group-hover:text-orange-300 font-bold text-sm sm:text-base\">Reset Data</h3>\n                    </div>\n                    <p className=\"text-gray-300 text-xs sm:text-sm\">Clear all progress</p>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hidden file input for import */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".json\"\n        onChange={handleFileImport}\n        className=\"hidden\"\n      />\n\n      {/* Notification System Modal */}\n      <NotificationSystem \n        isOpen={isNotificationOpen}\n        onClose={() => setIsNotificationOpen(false)}\n      />\n\n      {confirmDialog}\n    </div>\n  );\n}","size_bytes":20157},"client/src/pages/Settings_old.tsx":{"content":"import { useState } from \"react\";\nimport { Save, User, Palette, Bell, Shield, Trash2 } from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { useConfirmDialog } from \"@/components/ui/ConfirmDialog\";\n\nexport function Settings() {\n  const [categoryNames, setCategoryNames] = useState({\n    mainMission: \"Main Mission\",\n    training: \"Training\", \n    sideQuest: \"Side Quest\"\n  });\n  \n  const [userSettings, setUserSettings] = useState({\n    displayName: \"Hunter\",\n    avatar: \"👤\",\n    theme: \"dark\",\n    notifications: true,\n    autoSave: true\n  });\n\n  const { showConfirm, confirmDialog } = useConfirmDialog();\n\n  const handleCategoryNameChange = (category: string, newName: string) => {\n    setCategoryNames(prev => ({\n      ...prev,\n      [category]: newName\n    }));\n  };\n\n  const handleUserSettingChange = (setting: string, value: any) => {\n    setUserSettings(prev => ({\n      ...prev,\n      [setting]: value\n    }));\n  };\n\n  const saveSettings = () => {\n    showToast({\n      type: 'success',\n      title: 'Settings Saved',\n      message: 'Your Hunter configuration has been updated'\n    });\n    console.log(\"Settings saved:\", { categoryNames, userSettings });\n  };\n\n  const resetProgress = () => {\n    showConfirm(\n      'Reset All Progress',\n      'Are you sure you want to reset all progress? This action cannot be undone and will delete all your quests, achievements, and statistics.',\n      () => {\n        // Reset progress logic here\n        console.log(\"Progress reset\");\n        showToast({\n          type: 'success',\n          title: 'Progress Reset',\n          message: 'All Hunter data has been cleared. You can start fresh!'\n        });\n      },\n      'danger'\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Settings Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              HUNTER SETTINGS\n            </span>\n          </h2>\n          <p className=\"text-gray-400 mt-1\">Customize your productivity system</p>\n        </div>\n        <button onClick={saveSettings} className=\"power-button\">\n          <Save className=\"w-5 h-5 mr-2\" />\n          Save Changes\n        </button>\n      </div>\n\n      {/* Profile Settings */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n            <User className=\"w-6 h-6 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Profile Settings</h3>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Display Name\n            </label>\n            <input\n              type=\"text\"\n              value={userSettings.displayName}\n              onChange={(e) => handleUserSettingChange('displayName', e.target.value)}\n              className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-cyan-500 focus:outline-none\"\n              placeholder=\"Enter your hunter name\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Avatar\n            </label>\n            <div className=\"flex space-x-2\">\n              {['👤', '🦸', '🥷', '⚔️', '🛡️'].map(emoji => (\n                <button\n                  key={emoji}\n                  onClick={() => handleUserSettingChange('avatar', emoji)}\n                  className={`w-12 h-12 text-2xl rounded-lg border-2 transition-all duration-200 ${\n                    userSettings.avatar === emoji \n                      ? 'border-cyan-500 bg-cyan-500/20' \n                      : 'border-gray-600 hover:border-gray-500'\n                  }`}\n                >\n                  {emoji}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Category Customization */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n            <Palette className=\"w-6 h-6 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Category Names</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-red-400 mb-2\">\n              Main Mission Category\n            </label>\n            <input\n              type=\"text\"\n              value={categoryNames.mainMission}\n              onChange={(e) => handleCategoryNameChange('mainMission', e.target.value)}\n              className=\"w-full px-4 py-3 bg-gray-800 border border-red-500/30 rounded-lg text-white focus:border-red-500 focus:outline-none\"\n              placeholder=\"e.g., Work Tasks, Career Goals\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-blue-400 mb-2\">\n              Training Category\n            </label>\n            <input\n              type=\"text\"\n              value={categoryNames.training}\n              onChange={(e) => handleCategoryNameChange('training', e.target.value)}\n              className=\"w-full px-4 py-3 bg-gray-800 border border-blue-500/30 rounded-lg text-white focus:border-blue-500 focus:outline-none\"\n              placeholder=\"e.g., Learning, Skill Development\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-green-400 mb-2\">\n              Side Quest Category\n            </label>\n            <input\n              type=\"text\"\n              value={categoryNames.sideQuest}\n              onChange={(e) => handleCategoryNameChange('sideQuest', e.target.value)}\n              className=\"w-full px-4 py-3 bg-gray-800 border border-green-500/30 rounded-lg text-white focus:border-green-500 focus:outline-none\"\n              placeholder=\"e.g., Personal Tasks, Hobbies\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* System Settings */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-amber-500 to-orange-500 rounded-lg flex items-center justify-center\">\n            <Bell className=\"w-6 h-6 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">System Preferences</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-white font-semibold\">Daily Briefing</h4>\n              <p className=\"text-gray-400 text-sm\">Show morning quest briefing modal</p>\n            </div>\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                checked={userSettings.notifications}\n                onChange={(e) => handleUserSettingChange('notifications', e.target.checked)}\n                className=\"sr-only peer\"\n              />\n              <div className=\"w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-500\"></div>\n            </label>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-white font-semibold\">Auto-save Progress</h4>\n              <p className=\"text-gray-400 text-sm\">Automatically save quest completion</p>\n            </div>\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                checked={userSettings.autoSave}\n                onChange={(e) => handleUserSettingChange('autoSave', e.target.checked)}\n                className=\"sr-only peer\"\n              />\n              <div className=\"w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-500\"></div>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {/* Data Management */}\n      <div className=\"mystical-card p-6 border-2 border-red-500/30\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-red-500 to-pink-500 rounded-lg flex items-center justify-center\">\n            <Shield className=\"w-6 h-6 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Data Management</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-red-900/20 border border-red-500/30 rounded-lg p-4\">\n            <h4 className=\"text-red-400 font-semibold mb-2\">Reset All Progress</h4>\n            <p className=\"text-gray-400 text-sm mb-4\">\n              This will permanently delete all your quests, progress, and statistics. This action cannot be undone.\n            </p>\n            <button \n              onClick={resetProgress}\n              className=\"px-6 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-semibold transition-colors duration-200\"\n            >\n              <Trash2 className=\"w-4 h-4 mr-2 inline\" />\n              Reset Progress\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Export/Import */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n            <Save className=\"w-6 h-6 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Data Export</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          <button className=\"mystical-card p-4 w-full text-left hover:bg-white/5 transition-colors\">\n            <h4 className=\"text-white font-semibold\">Export Progress</h4>\n            <p className=\"text-gray-400 text-sm\">Download your data as JSON file</p>\n          </button>\n          \n          <button className=\"mystical-card p-4 w-full text-left hover:bg-white/5 transition-colors\">\n            <h4 className=\"text-white font-semibold\">Share Statistics</h4>\n            <p className=\"text-gray-400 text-sm\">Generate shareable progress report</p>\n          </button>\n        </div>\n      </div>\n      {confirmDialog}\n    </div>\n  );\n}","size_bytes":11235},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface Goal {\n  id: string;\n  userId: string;\n  categoryId: string;\n  title: string;\n  description?: string;\n  status: 'pending' | 'in-progress' | 'completed' | 'failed';\n  priority: 'low' | 'medium' | 'high';\n  xpValue: number;\n  dueDate?: Date;\n  completedAt?: Date;\n  isRecurring: boolean;\n  recurringPattern?: {\n    type: 'daily' | 'weekly';\n    days?: string[];\n  };\n  createdAt: Date;\n}\n\nexport interface Category {\n  id: string;\n  userId: string;\n  name: string;\n  color: string;\n  icon: string;\n  isActive: boolean;\n  order: number;\n  createdAt: Date;\n}\n\nexport interface UserProfile {\n  id: string;\n  firebaseUid: string;\n  email: string;\n  displayName?: string;\n  level: number;\n  currentXP: number;\n  totalXP: number;\n  streak: number;\n  rank: string;\n  createdAt: Date;\n}\n\nexport interface DailyStats {\n  id: string;\n  userId: string;\n  date: Date;\n  goalsCompleted: number;\n  totalGoals: number;\n  xpGained: number;\n  isDungeonCleared: boolean;\n}\n\nexport interface CategoryWithGoals extends Category {\n  goals: Goal[];\n}\n","size_bytes":1044},"client/src/components/analytics/AnalyticsDashboard.tsx":{"content":"import { Calendar, BarChart3, TrendingUp, Clock } from \"lucide-react\";\n\ninterface AnalyticsDashboardProps {\n  categories?: Array<{\n    id: string;\n    name: string;\n    goals: Array<{\n      id: string;\n      title: string;\n      completed: boolean;\n      dueDate?: string;\n    }>;\n  }>;\n}\n\nexport function AnalyticsDashboard({ categories = [] }: AnalyticsDashboardProps) {\n  // Calculate real analytics from actual data\n  const today = new Date();\n  const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n  \n  // Generate weekly data from actual goals\n  const weeklyData = Array.from({ length: 7 }, (_, i) => {\n    const date = new Date(weekAgo.getTime() + i * 24 * 60 * 60 * 1000);\n    const dateStr = date.toISOString().split('T')[0];\n    \n    const dayGoals = categories.flatMap(cat => cat.goals).filter(goal => \n      goal.dueDate === dateStr\n    );\n    \n    return {\n      day: date.toLocaleDateString('en', { weekday: 'short' }),\n      completed: dayGoals.filter(g => g.completed).length,\n      total: dayGoals.length\n    };\n  });\n\n  // Calculate category stats from real data\n  const categoryStats = categories.map(category => {\n    const completed = category.goals.filter(g => g.completed).length;\n    const total = category.goals.length;\n    \n    return {\n      name: category.name,\n      completed,\n      total,\n      color: category.name.toLowerCase().includes('main') ? 'from-red-500 to-red-400' :\n             category.name.toLowerCase().includes('training') ? 'from-blue-500 to-blue-400' :\n             'from-green-500 to-green-400'\n    };\n  });\n\n  return (\n    <div className=\"w-full max-w-none space-y-8\">\n      {/* Analytics Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-blue-400 to-cyan-300 bg-clip-text text-transparent\">\n              ANALYTICS DASHBOARD\n            </span>\n          </h2>\n          <p className=\"text-gray-400 mt-1\">Track your productivity and progress over time</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-2 h-2 bg-cyan-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-cyan-400 text-sm font-medium\">Live Data</span>\n        </div>\n      </div>\n\n      {/* Weekly Progress Chart */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n            <BarChart3 className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Weekly Progress</h3>\n            <p className=\"text-gray-400 text-sm\">Task completion over the last 7 days</p>\n          </div>\n        </div>\n\n        {/* Chart */}\n        <div className=\"space-y-4\">\n          {weeklyData.map((day) => {\n            const percentage = day.total > 0 ? (day.completed / day.total) * 100 : 0;\n            return (\n              <div key={day.day} className=\"flex items-center space-x-4\">\n                <div className=\"w-12 text-gray-400 text-sm font-medium\">{day.day}</div>\n                <div className=\"flex-1\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-300\">{day.completed}/{day.total} tasks</span>\n                    <span className=\"text-cyan-400 font-semibold\">{percentage.toFixed(0)}%</span>\n                  </div>\n                  <div className=\"h-3 bg-gray-800 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-blue-500 to-cyan-400 rounded-full transition-all duration-500\"\n                      style={{ width: `${percentage}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Category Performance */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n            <TrendingUp className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Category Performance</h3>\n            <p className=\"text-gray-400 text-sm\">Progress across different goal categories</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {categoryStats.map((category) => {\n            const percentage = category.total > 0 ? (category.completed / category.total) * 100 : 0;\n            return (\n              <div key={category.name} className=\"mystical-card p-4\">\n                <h4 className=\"text-white font-semibold mb-2\">{category.name}</h4>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"text-gray-400\">{category.completed}/{category.total}</span>\n                  <span className=\"text-white font-semibold\">{percentage.toFixed(0)}%</span>\n                </div>\n                <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                  <div \n                    className={`h-full bg-gradient-to-r ${category.color} rounded-full transition-all duration-500`}\n                    style={{ width: `${percentage}%` }}\n                  />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Time Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"mystical-card p-6\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-amber-500 to-orange-500 rounded-lg flex items-center justify-center\">\n              <Clock className=\"w-5 h-5 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-bold text-white font-['Orbitron']\">Peak Hours</h3>\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Most Productive</span>\n              <span className=\"text-amber-400 font-semibold\">2:00 PM - 4:00 PM</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Average Session</span>\n              <span className=\"text-amber-400 font-semibold\">45 minutes</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Best Day</span>\n              <span className=\"text-amber-400 font-semibold\">Thursday</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mystical-card p-6\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-5 h-5 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-bold text-white font-['Orbitron']\">This Month</h3>\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Goals Completed</span>\n              <span className=\"text-green-400 font-semibold\">\n                {categories.flatMap(c => c.goals).filter(g => g.completed).length}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Success Rate</span>\n              <span className=\"text-green-400 font-semibold\">\n                {categories.flatMap(c => c.goals).length > 0 \n                  ? Math.round((categories.flatMap(c => c.goals).filter(g => g.completed).length / categories.flatMap(c => c.goals).length) * 100)\n                  : 0}%\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Active Goals</span>\n              <span className=\"text-green-400 font-semibold\">\n                {categories.flatMap(c => c.goals).filter(g => !g.completed).length}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8579},"client/src/components/analytics/AnalyticsView.tsx":{"content":"import { Progress } from \"@/components/ui/progress\";\nimport { Trophy, Star } from \"lucide-react\";\n\ninterface AnalyticsViewProps {\n  // TODO: Add props for analytics data\n}\n\nexport function AnalyticsView({}: AnalyticsViewProps) {\n  // Mock data - in real app this would come from props/API\n  const weeklyData = [\n    { day: 'Mon', percentage: 80 },\n    { day: 'Tue', percentage: 90 },\n    { day: 'Wed', percentage: 75 },\n    { day: 'Thu', percentage: 85 },\n    { day: 'Fri', percentage: 95 },\n    { day: 'Sat', percentage: 70 },\n    { day: 'Sun', percentage: 88 },\n  ];\n\n  const categoryBreakdown = [\n    { name: 'Main Missions', completed: 24, total: 30, color: 'red' },\n    { name: 'Training', completed: 18, total: 20, color: 'blue' },\n    { name: 'Side Quests', completed: 45, total: 50, color: 'green' },\n  ];\n\n  const achievements = [\n    {\n      title: '15-Day Streak',\n      subtitle: 'Legendary Hunter',\n      icon: Trophy,\n      color: 'yellow',\n    },\n    {\n      title: 'Level 23 Reached',\n      subtitle: 'Shadow Monarch',\n      icon: Star,\n      color: 'blue',\n    },\n  ];\n\n  const getColorClasses = (color: string) => {\n    const colorMap = {\n      red: 'bg-red-400',\n      blue: 'bg-blue-400',\n      green: 'bg-green-400',\n      yellow: 'bg-yellow-400',\n    };\n    return colorMap[color as keyof typeof colorMap] || 'bg-gray-400';\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      <h2 className=\"font-orbitron font-bold text-2xl text-solo-blue\">Progress Analytics</h2>\n      \n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Weekly Performance */}\n        <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n          <h3 className=\"font-semibold text-lg mb-4\">Weekly Performance</h3>\n          <div className=\"space-y-3\">\n            {weeklyData.map((item) => (\n              <div key={item.day} className=\"flex justify-between items-center\">\n                <span className=\"text-gray-400\">{item.day}</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-20 bg-gray-700 rounded-full h-2\">\n                    <div \n                      className=\"bg-green-400 h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${item.percentage}%` }}\n                    />\n                  </div>\n                  <span className=\"text-sm w-8\">{item.percentage}%</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Achievement Breakdown */}\n        <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n          <h3 className=\"font-semibold text-lg mb-4\">Achievement Breakdown</h3>\n          <div className=\"space-y-4\">\n            {categoryBreakdown.map((category) => {\n              const percentage = (category.completed / category.total) * 100;\n              return (\n                <div key={category.name}>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm text-gray-400\">{category.name}</span>\n                    <span className=\"text-sm\">{category.completed}/{category.total}</span>\n                  </div>\n                  <Progress \n                    value={percentage} \n                    className=\"h-2\"\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        \n        {/* Recent Achievements */}\n        <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n          <h3 className=\"font-semibold text-lg mb-4\">Recent Achievements</h3>\n          <div className=\"space-y-3\">\n            {achievements.map((achievement, index) => {\n              const IconComponent = achievement.icon;\n              return (\n                <div key={index} className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 ${getColorClasses(achievement.color)}/20 rounded-full flex items-center justify-center`}>\n                    <IconComponent className={`w-4 h-4 text-${achievement.color}-400`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{achievement.title}</p>\n                    <p className=\"text-xs text-gray-400\">{achievement.subtitle}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Analytics Sections */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* XP Progression */}\n        <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n          <h3 className=\"font-semibold text-lg mb-4\">XP Progression (Last 7 Days)</h3>\n          <div className=\"space-y-2\">\n            {[120, 80, 150, 95, 200, 110, 180].map((xp, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-400\">Day {index + 1}</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-32 bg-gray-700 rounded-full h-2\">\n                    <div \n                      className=\"bg-solo-blue h-2 rounded-full\" \n                      style={{ width: `${(xp / 200) * 100}%` }}\n                    />\n                  </div>\n                  <span className=\"text-sm w-10\">{xp} XP</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Streak Information */}\n        <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n          <h3 className=\"font-semibold text-lg mb-4\">Streak Information</h3>\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-400 mb-1\">15</div>\n              <div className=\"text-sm text-gray-400\">Current Streak</div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4 text-center\">\n              <div>\n                <div className=\"text-xl font-bold text-solo-blue\">23</div>\n                <div className=\"text-xs text-gray-400\">Longest Streak</div>\n              </div>\n              <div>\n                <div className=\"text-xl font-bold text-green-400\">87%</div>\n                <div className=\"text-xs text-gray-400\">Success Rate</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6519},"client/src/components/calendar/CalendarView.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport * as React from \"react\";\nimport { ChevronLeft, ChevronRight, Calendar as CalendarIcon, Plus, Grid3X3, CalendarDays } from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { useConfirmDialog } from \"@/components/ui/ConfirmDialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { WeeklyView } from \"./WeeklyView\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  date: string;\n  type: 'main-mission' | 'training' | 'side-quest';\n  completed: boolean;\n}\n\ninterface CalendarViewProps {\n  goals?: Array<{\n    id: string;\n    title: string;\n    dueDate?: string;\n    completed: boolean;\n    category: string;\n  }>;\n}\n\nexport function CalendarView({ goals = [] }: CalendarViewProps) {\n  const [viewMode, setViewMode] = useState<'month' | 'week'>('week');\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [isAddingEvent, setIsAddingEvent] = useState(false);\n  const [newEventTitle, setNewEventTitle] = useState('');\n  const [newEventType, setNewEventType] = useState<'main-mission' | 'training' | 'side-quest'>('main-mission');\n  const [newEventDate, setNewEventDate] = useState(() => {\n    const today = new Date();\n    return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;\n  });\n\n  // Set initial view mode based on screen size\n  useEffect(() => {\n    const checkScreenSize = () => {\n      if (window.innerWidth < 768) {\n        setViewMode('week');\n      } else {\n        setViewMode('month');\n      }\n    };\n\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    return () => window.removeEventListener('resize', checkScreenSize);\n  }, []);\n  \n  const { showConfirm, confirmDialog } = useConfirmDialog();\n  \n  const queryClient = useQueryClient();\n\n  // Fetch events from database\n  const { data: calendarEvents = [], isLoading } = useQuery({\n    queryKey: ['/api/calendar-events'],\n    queryFn: async () => {\n      const response = await fetch('/api/calendar-events');\n      if (!response.ok) throw new Error('Failed to fetch events');\n      return response.json();\n    }\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      const response = await fetch('/api/calendar-events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(eventData)\n      });\n      if (!response.ok) throw new Error('Failed to create event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/calendar-events/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  // Delete event mutation\n  const deleteEventMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/calendar-events/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  // Convert goals to calendar events and combine with stored events\n  const goalEvents: CalendarEvent[] = goals\n    .filter(goal => goal.dueDate)\n    .map(goal => ({\n      id: `goal-${goal.id}`,\n      title: goal.title,\n      date: goal.dueDate!,\n      type: goal.category.toLowerCase().replace(' ', '-') as 'main-mission' | 'training' | 'side-quest',\n      completed: goal.completed\n    }));\n\n  const events: CalendarEvent[] = [...calendarEvents, ...goalEvents];\n\n  const getDaysInMonth = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add all days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(day);\n    }\n    \n    return days;\n  };\n\n  const getEventsForDate = (day: number) => {\n    const dateStr = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n    return events.filter(event => event.date === dateStr);\n  };\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'main-mission': return 'bg-red-500/20 border-red-500/50 text-red-400';\n      case 'training': return 'bg-blue-500/20 border-blue-500/50 text-blue-400';\n      case 'side-quest': return 'bg-green-500/20 border-green-500/50 text-green-400';\n      default: return 'bg-gray-500/20 border-gray-500/50 text-gray-400';\n    }\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (direction === 'prev') {\n        newDate.setMonth(prev.getMonth() - 1);\n      } else {\n        newDate.setMonth(prev.getMonth() + 1);\n      }\n      return newDate;\n    });\n  };\n\n  const monthNames = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  const handleAddEvent = () => {\n    if (!newEventTitle.trim()) {\n      showToast({\n        type: 'warning',\n        title: 'Title Required',\n        message: 'Please enter an event title before adding'\n      });\n      return;\n    }\n\n    createEventMutation.mutate({\n      title: newEventTitle,\n      date: newEventDate,\n      type: newEventType,\n      completed: false\n    }, {\n      onSuccess: (newEvent) => {\n        // Schedule notification for the event\n        scheduleNotification(newEvent);\n        \n        setNewEventTitle('');\n        setIsAddingEvent(false);\n        setSelectedDate(null);\n        const today = new Date();\n        setNewEventDate(`${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`);\n        \n        showToast({\n          type: 'success',\n          title: 'Quest Event Added!',\n          message: `\"${newEvent.title}\" scheduled for ${new Date(newEvent.date).toLocaleDateString()}`\n        });\n      },\n      onError: () => {\n        showToast({\n          type: 'error',\n          title: 'Failed to Add Event',\n          message: 'Please try again'\n        });\n      }\n    });\n  };\n\n  const scheduleNotification = (event: CalendarEvent) => {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      const eventDate = new Date(event.date);\n      const now = new Date();\n      const timeUntilEvent = eventDate.getTime() - now.getTime();\n      \n      if (timeUntilEvent > 0) {\n        setTimeout(() => {\n          new Notification(`Solo Leveling Quest Reminder`, {\n            body: `Today's ${event.type.replace('-', ' ')}: ${event.title}`,\n            icon: '/favicon.ico',\n            tag: event.id\n          });\n        }, timeUntilEvent);\n      }\n    }\n  };\n\n  const handleDeleteEvent = (eventId: string) => {\n    const event = calendarEvents.find((e: CalendarEvent) => e.id === eventId);\n    if (!event) return;\n    \n    showConfirm(\n      'Delete Quest Event',\n      `Are you sure you want to delete \"${event.title}\"? This action cannot be undone.`,\n      () => {\n        deleteEventMutation.mutate(eventId, {\n          onSuccess: () => {\n            showToast({\n              type: 'success',\n              title: 'Event Deleted',\n              message: `\"${event.title}\" has been removed from your calendar`\n            });\n          },\n          onError: () => {\n            showToast({\n              type: 'error',\n              title: 'Failed to Delete Event',\n              message: 'Please try again'\n            });\n          }\n        });\n      },\n      'danger'\n    );\n  };\n\n  const handleToggleEventComplete = (eventId: string) => {\n    const event = calendarEvents.find((e: CalendarEvent) => e.id === eventId);\n    if (!event) return;\n    \n    updateEventMutation.mutate({\n      id: eventId,\n      data: { completed: !event.completed }\n    }, {\n      onSuccess: () => {\n        showToast({\n          type: 'success',\n          title: !event.completed ? 'Quest Completed!' : 'Quest Reopened',\n          message: `\"${event.title}\" marked as ${!event.completed ? 'completed' : 'pending'}`\n        });\n      },\n      onError: () => {\n        showToast({\n          type: 'error',\n          title: 'Failed to Update Event',\n          message: 'Please try again'\n        });\n      }\n    });\n  };\n\n  const handleDateClick = (day: number) => {\n    const dateStr = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n    setSelectedDate(dateStr);\n    setNewEventDate(dateStr);\n    setIsAddingEvent(true);\n  };\n\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const days = getDaysInMonth(currentDate);\n\n  // If weekly view is selected, use the WeeklyView component\n  if (viewMode === 'week') {\n    return <WeeklyView goals={goals} />;\n  }\n\n  return (\n    <div className=\"w-full max-w-none space-y-4 sm:space-y-6\">\n      {/* Calendar Header */}\n      <div className=\"flex items-center justify-between flex-wrap gap-3\">\n        <div>\n          <h2 className=\"text-xl sm:text-2xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              MISSION CALENDAR\n            </span>\n          </h2>\n          <p className=\"text-gray-400 mt-1 text-sm sm:text-base\">Plan and track your daily objectives</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {/* View Toggle - Hidden on mobile since it auto-switches */}\n          <div className=\"hidden sm:flex bg-gray-800 rounded-lg p-1\">\n            <button\n              onClick={() => setViewMode('week')}\n              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${\n                viewMode === 'week' \n                  ? 'bg-cyan-500 text-white' \n                  : 'text-gray-400 hover:text-white'\n              }`}\n            >\n              <CalendarDays className=\"w-4 h-4 mr-1 inline\" />\n              Week\n            </button>\n            <button\n              onClick={() => setViewMode('month')}\n              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${\n                viewMode === 'month' \n                  ? 'bg-cyan-500 text-white' \n                  : 'text-gray-400 hover:text-white'\n              }`}\n            >\n              <Grid3X3 className=\"w-4 h-4 mr-1 inline\" />\n              Month\n            </button>\n          </div>\n          \n          <button \n            className=\"power-button text-sm px-3 py-2\"\n            onClick={() => setIsAddingEvent(true)}\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            Add\n          </button>\n        </div>\n      </div>\n\n      {/* Calendar Navigation */}\n      <div className=\"mystical-card p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <button \n            onClick={() => navigateMonth('prev')}\n            className=\"mystical-card p-2 transition-colors duration-200\"\n          >\n            <ChevronLeft className=\"w-5 h-5 text-cyan-400\" />\n          </button>\n          \n          <div className=\"text-center\">\n            <h3 className=\"text-2xl font-bold text-white font-['Orbitron']\">\n              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n            </h3>\n          </div>\n          \n          <button \n            onClick={() => navigateMonth('next')}\n            className=\"mystical-card p-2 transition-colors duration-200\"\n          >\n            <ChevronRight className=\"w-5 h-5 text-cyan-400\" />\n          </button>\n        </div>\n\n        {/* Calendar Grid - Mobile Optimized */}\n        <div className=\"grid grid-cols-7 gap-1 sm:gap-2\">\n          {/* Day headers */}\n          {dayNames.map(day => (\n            <div key={day} className=\"text-center p-1 sm:p-2 text-gray-400 font-semibold text-xs sm:text-sm\">\n              {day.substring(0, 3)}\n            </div>\n          ))}\n          \n          {/* Calendar days */}\n          {days.map((day, index) => {\n            if (day === null) {\n              return <div key={`empty-${index}`} className=\"h-16 sm:h-20\" />;\n            }\n            \n            const dayEvents = getEventsForDate(day);\n            const isToday = new Date().getDate() === day && \n                           new Date().getMonth() === currentDate.getMonth() && \n                           new Date().getFullYear() === currentDate.getFullYear();\n            \n            return (\n              <div\n                key={`${currentDate.getFullYear()}-${currentDate.getMonth()}-${day}`}\n                className={`h-16 sm:h-20 p-1 sm:p-2 rounded-lg cursor-pointer transition-all duration-200 ${\n                  isToday \n                    ? 'bg-gradient-to-br from-cyan-500/20 to-blue-500/20 border-2 border-cyan-500/50' \n                    : 'hover:bg-white/5'\n                } ${dayEvents.length > 0 ? 'ring-1 ring-cyan-500/30' : ''}`}\n                onClick={() => handleDateClick(day)}\n              >\n                <div className={`font-semibold text-xs sm:text-sm mb-1 ${isToday ? 'text-cyan-400' : 'text-white'}`}>\n                  {day}\n                </div>\n                <div className=\"space-y-0.5\">\n                  {dayEvents.slice(0, 1).map(event => (\n                    <div\n                      key={event.id}\n                      className={`text-xs px-1 py-0.5 rounded ${getEventTypeColor(event.type)} ${\n                        event.completed ? 'opacity-60 line-through' : ''\n                      } truncate max-w-full`}\n                      title={event.title}\n                    >\n                      {event.title.length > 6 ? event.title.substring(0, 6) + '...' : event.title}\n                    </div>\n                  ))}\n                  {dayEvents.length > 1 && (\n                    <div className=\"text-xs text-gray-400 text-center font-semibold\">+{dayEvents.length - 1}</div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Selected Date Events */}\n      {selectedDate && (\n        <div className=\"mystical-card p-6\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n              <CalendarIcon className=\"w-5 h-5 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-bold text-white font-['Orbitron']\">\n              Events for {new Date(selectedDate).toLocaleDateString('en-GB')}\n            </h3>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {events.filter(event => event.date === selectedDate).map(event => (\n              <div key={event.id} className={`mystical-card p-4 ${event.completed ? 'opacity-60' : ''}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h4 className={`font-semibold ${event.completed ? 'line-through text-gray-500' : 'text-white'}`}>\n                      {event.title}\n                    </h4>\n                    <p className={`text-sm capitalize ${getEventTypeColor(event.type).split(' ')[2]}`}>\n                      {event.type.replace('-', ' ')}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                      event.completed \n                        ? 'bg-green-500/20 text-green-400' \n                        : 'bg-yellow-500/20 text-yellow-400'\n                    }`}>\n                      {event.completed ? 'Completed' : 'Pending'}\n                    </div>\n                    {!event.id.startsWith('goal-') && (\n                      <>\n                        <button\n                          onClick={() => handleToggleEventComplete(event.id)}\n                          className=\"p-1 text-green-400 hover:text-green-300 transition-colors\"\n                          title={event.completed ? 'Mark as pending' : 'Mark as completed'}\n                        >\n                          ✓\n                        </button>\n                        <button\n                          onClick={() => handleDeleteEvent(event.id)}\n                          className=\"p-1 text-red-400 hover:text-red-300 transition-colors\"\n                          title=\"Delete event\"\n                        >\n                          ✕\n                        </button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {events.filter(event => event.date === selectedDate).length === 0 && (\n              <div className=\"text-center py-8 text-gray-400\">\n                <CalendarIcon className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p>No events scheduled for this date</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Add Event Modal */}\n      {isAddingEvent && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <div className=\"mystical-card max-w-md w-full p-6\">\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron'] mb-4\">Add New Quest Event</h3>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Event title...\"\n                value={newEventTitle}\n                onChange={(e) => setNewEventTitle(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleAddEvent()}\n                className=\"w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none\"\n                autoFocus\n              />\n              <input\n                type=\"date\"\n                value={newEventDate}\n                onChange={(e) => setNewEventDate(e.target.value)}\n                className=\"w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-cyan-400 focus:outline-none\"\n                placeholder=\"DD/MM/YYYY\"\n              />\n              <select\n                value={newEventType}\n                onChange={(e) => setNewEventType(e.target.value as any)}\n                className=\"w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-cyan-400 focus:outline-none cursor-pointer\"\n              >\n                <option value=\"main-mission\" className=\"bg-gray-700\">Main Mission (High Priority)</option>\n                <option value=\"training\" className=\"bg-gray-700\">Training (Skill Building)</option>\n                <option value=\"side-quest\" className=\"bg-gray-700\">Side Quest (Extra Tasks)</option>\n              </select>\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={handleAddEvent}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors\"\n                >\n                  Add Event\n                </button>\n                <button\n                  onClick={() => setIsAddingEvent(false)}\n                  className=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {confirmDialog}\n    </div>\n  );\n}","size_bytes":20686},"client/src/components/features/NotesPanel.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { Search, Plus, Tag, Calendar, Edit3, Trash2, Filter, Star } from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { useConfirmDialog } from \"@/components/ui/ConfirmDialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface Note {\n  id: string;\n  title: string;\n  content: string;\n  tags: string[];\n  createdAt: Date;\n  updatedAt: Date;\n  category: 'strategy' | 'reflection' | 'plan' | 'idea';\n  starred: boolean;\n}\n\nexport function NotesPanel() {\n  const queryClient = useQueryClient();\n  const { showConfirm, confirmDialog } = useConfirmDialog();\n\n  // Fetch notes from database\n  const { data: notes = [], isLoading } = useQuery({\n    queryKey: ['/api/notes'],\n    queryFn: async () => {\n      const response = await fetch('/api/notes');\n      if (!response.ok) throw new Error('Failed to fetch notes');\n      return response.json();\n    }\n  });\n\n  // Create note mutation\n  const createNoteMutation = useMutation({\n    mutationFn: async (noteData: any) => {\n      const response = await fetch('/api/notes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(noteData)\n      });\n      if (!response.ok) throw new Error('Failed to create note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n    }\n  });\n\n  // Update note mutation\n  const updateNoteMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n    }\n  });\n\n  // Delete note mutation\n  const deleteNoteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n    }\n  });\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingNote, setEditingNote] = useState<string | null>(null);\n  const [newNote, setNewNote] = useState({\n    title: '',\n    content: '',\n    category: 'plan' as Note['category'],\n    tags: [] as string[]\n  });\n\n  const categories = [\n    { id: 'all', name: 'All Notes', icon: '📋', color: 'text-gray-400' },\n    { id: 'strategy', name: 'Strategies', icon: '🎯', color: 'text-blue-400' },\n    { id: 'reflection', name: 'Reflections', icon: '🔍', color: 'text-purple-400' },\n    { id: 'plan', name: 'Plans', icon: '📝', color: 'text-green-400' },\n    { id: 'idea', name: 'Ideas', icon: '💡', color: 'text-amber-400' }\n  ];\n\n  const filteredNotes = notes.filter(note => {\n    const matchesSearch = note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         note.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesCategory = selectedCategory === 'all' || note.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleCreateNote = () => {\n    if (!newNote.title.trim()) {\n      showToast({\n        type: 'warning',\n        title: 'Title Required',\n        message: 'Please enter a title for your archive entry'\n      });\n      return;\n    }\n\n    createNoteMutation.mutate({\n      title: newNote.title,\n      content: newNote.content,\n      category: newNote.category,\n      tags: newNote.tags,\n      starred: false\n    }, {\n      onSuccess: (note) => {\n        setNewNote({ title: '', content: '', category: 'plan', tags: [] });\n        setIsCreating(false);\n        \n        showToast({\n          type: 'success',\n          title: 'Archive Entry Created!',\n          message: `\"${note.title}\" has been added to your Hunter's Archive`\n        });\n      },\n      onError: () => {\n        showToast({\n          type: 'error',\n          title: 'Failed to Create Note',\n          message: 'Please try again'\n        });\n      }\n    });\n  };\n\n  const handleDeleteNote = (noteId: string) => {\n    const note = notes.find(n => n.id === noteId);\n    if (!note) return;\n    \n    showConfirm(\n      'Delete Archive Entry',\n      `Are you sure you want to delete \"${note.title}\"? This action cannot be undone.`,\n      () => {\n        deleteNoteMutation.mutate(noteId, {\n          onSuccess: () => {\n            showToast({\n              type: 'success',\n              title: 'Entry Deleted',\n              message: `\"${note.title}\" has been removed from your archive`\n            });\n          },\n          onError: () => {\n            showToast({\n              type: 'error',\n              title: 'Failed to Delete Note',\n              message: 'Please try again'\n            });\n          }\n        });\n      },\n      'danger'\n    );\n  };\n\n  const handleToggleStar = (noteId: string) => {\n    const note = notes.find(n => n.id === noteId);\n    if (!note) return;\n    \n    updateNoteMutation.mutate({\n      id: noteId,\n      data: { starred: !note.starred }\n    }, {\n      onSuccess: () => {\n        showToast({\n          type: 'success',\n          title: !note.starred ? 'Entry Starred!' : 'Star Removed',\n          message: `\"${note.title}\" ${!note.starred ? 'added to' : 'removed from'} starred entries`\n        });\n      },\n      onError: () => {\n        showToast({\n          type: 'error',\n          title: 'Failed to Update Note',\n          message: 'Please try again'\n        });\n      }\n    });\n  };\n\n  const handleAddTag = (tag: string) => {\n    if (tag.trim() && !newNote.tags.includes(tag.trim())) {\n      setNewNote(prev => ({\n        ...prev,\n        tags: [...prev.tags, tag.trim()]\n      }));\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setNewNote(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  return (\n    <div className=\"w-full max-w-none space-y-6\">\n      {/* Header */}\n      <div className=\"hunter-status-window p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center justify-between mb-6\">\n          <div className=\"mb-4 lg:mb-0\">\n            <h2 className=\"text-2xl font-bold text-white font-['Orbitron'] mb-2\">\n              <span className=\"bg-gradient-to-r from-green-400 to-emerald-400 bg-clip-text text-transparent\">\n                HUNTER'S ARCHIVE\n              </span>\n            </h2>\n            <p className=\"text-gray-400\">Document your productivity journey</p>\n          </div>\n          <button\n            onClick={() => setIsCreating(true)}\n            className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors shadow-lg flex items-center\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            New Entry\n          </button>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search notes, tags, or content...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none\"\n            />\n          </div>\n          <div className=\"flex space-x-2 overflow-x-auto\">\n            {categories.map(category => (\n              <button\n                key={category.id}\n                onClick={() => setSelectedCategory(category.id)}\n                className={`flex items-center space-x-2 px-4 py-3 rounded-lg whitespace-nowrap transition-all duration-200 ${\n                  selectedCategory === category.id\n                    ? 'bg-cyan-500/20 border border-cyan-400 text-cyan-400'\n                    : 'bg-gray-800 border border-gray-600 text-gray-300 hover:bg-gray-700'\n                }`}\n              >\n                <span>{category.icon}</span>\n                <span className=\"font-medium\">{category.name}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"mystical-card p-4 text-center\">\n            <div className=\"text-2xl font-bold text-cyan-400\">{notes.length}</div>\n            <div className=\"text-gray-400 text-sm\">Total Notes</div>\n          </div>\n          <div className=\"mystical-card p-4 text-center\">\n            <div className=\"text-2xl font-bold text-amber-400\">{notes.filter(n => n.starred).length}</div>\n            <div className=\"text-gray-400 text-sm\">Starred</div>\n          </div>\n          <div className=\"mystical-card p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-400\">\n              {Array.from(new Set(notes.flatMap(n => n.tags))).length}\n            </div>\n            <div className=\"text-gray-400 text-sm\">Tags</div>\n          </div>\n          <div className=\"mystical-card p-4 text-center\">\n            <div className=\"text-2xl font-bold text-purple-400\">\n              {notes.filter(n => n.createdAt > new Date(Date.now() - 7*24*60*60*1000)).length}\n            </div>\n            <div className=\"text-gray-400 text-sm\">This Week</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Create New Note Modal */}\n      {isCreating && (\n        <div className=\"hunter-status-window p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">New Archive Entry</h3>\n            <button\n              onClick={() => setIsCreating(false)}\n              className=\"text-gray-400 hover:text-white\"\n            >\n              ✕\n            </button>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">Title</label>\n              <input\n                type=\"text\"\n                value={newNote.title}\n                onChange={(e) => setNewNote(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"Enter note title...\"\n                className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-cyan-400 focus:outline-none\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">Category</label>\n              <select\n                value={newNote.category}\n                onChange={(e) => setNewNote(prev => ({ ...prev, category: e.target.value as Note['category'] }))}\n                className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-cyan-400 focus:outline-none\"\n              >\n                {categories.slice(1).map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.icon} {category.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">Content</label>\n              <textarea\n                value={newNote.content}\n                onChange={(e) => setNewNote(prev => ({ ...prev, content: e.target.value }))}\n                placeholder=\"Write your thoughts, strategies, or reflections...\"\n                rows={6}\n                className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-cyan-400 focus:outline-none resize-none\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">Tags</label>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {newNote.tags.map(tag => (\n                  <span\n                    key={tag}\n                    className=\"inline-flex items-center px-3 py-1 bg-blue-500/20 text-blue-400 rounded-full text-sm\"\n                  >\n                    {tag}\n                    <button\n                      onClick={() => handleRemoveTag(tag)}\n                      type=\"button\"\n                      className=\"ml-2 text-blue-300 hover:text-white\"\n                    >\n                      ✕\n                    </button>\n                  </span>\n                ))}\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"Add tags (press Enter)...\"\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    handleAddTag(e.currentTarget.value);\n                    e.currentTarget.value = '';\n                  }\n                }}\n                className=\"w-full px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-cyan-400 focus:outline-none text-sm\"\n              />\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <button\n                onClick={handleCreateNote}\n                className=\"flex-1 px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold transition-colors shadow-lg\"\n              >\n                Save Entry\n              </button>\n              <button\n                onClick={() => setIsCreating(false)}\n                className=\"px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Notes List */}\n      <div className=\"space-y-4\">\n        {filteredNotes.length === 0 ? (\n          <div className=\"hunter-status-window p-8 text-center\">\n            <div className=\"w-20 h-20 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Edit3 className=\"w-10 h-10 text-gray-500\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-white mb-2\">No Notes Found</h3>\n            <p className=\"text-gray-400 mb-6\">\n              {searchTerm || selectedCategory !== 'all' \n                ? 'Try adjusting your search or filter criteria'\n                : 'Start documenting your productivity journey by creating your first note'\n              }\n            </p>\n            {!searchTerm && selectedCategory === 'all' && (\n              <button\n                onClick={() => setIsCreating(true)}\n                className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors shadow-lg flex items-center\"\n              >\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Create First Note\n              </button>\n            )}\n          </div>\n        ) : (\n          filteredNotes.map(note => (\n            <div key={note.id} className=\"mystical-card p-6 group\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h3 className=\"text-lg font-bold text-white\">{note.title}</h3>\n                    <span className={`text-sm px-2 py-1 rounded-full ${\n                      categories.find(c => c.id === note.category)?.color || 'text-gray-400'\n                    } bg-gray-800`}>\n                      {categories.find(c => c.id === note.category)?.icon} {note.category}\n                    </span>\n                    {note.starred && <Star className=\"w-4 h-4 text-amber-400 fill-current\" />}\n                  </div>\n                  <p className=\"text-gray-300 mb-4 leading-relaxed\">{note.content}</p>\n                  \n                  {/* Tags */}\n                  {note.tags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {note.tags.map(tag => (\n                        <span\n                          key={tag}\n                          className=\"inline-flex items-center px-2 py-1 bg-blue-500/10 text-blue-400 rounded text-xs\"\n                        >\n                          <Tag className=\"w-3 h-3 mr-1\" />\n                          {tag}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  \n                  {/* Date */}\n                  <div className=\"flex items-center text-gray-500 text-sm\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    Created {note.createdAt.toLocaleDateString()}\n                    {note.updatedAt > note.createdAt && (\n                      <span className=\"ml-2\">• Updated {note.updatedAt.toLocaleDateString()}</span>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Actions */}\n                <div className=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <button\n                    onClick={() => handleToggleStar(note.id)}\n                    className={`p-2 rounded-lg transition-colors ${\n                      note.starred ? 'text-amber-400 hover:text-amber-300' : 'text-gray-400 hover:text-amber-400'\n                    }`}\n                  >\n                    <Star className={`w-4 h-4 ${note.starred ? 'fill-current' : ''}`} />\n                  </button>\n                  <button\n                    onClick={() => setEditingNote(note.id)}\n                    className=\"p-2 text-gray-400 hover:text-cyan-400 rounded-lg transition-colors\"\n                  >\n                    <Edit3 className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    onClick={() => handleDeleteNote(note.id)}\n                    className=\"p-2 text-gray-400 hover:text-red-400 rounded-lg transition-colors\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n      {confirmDialog}\n    </div>\n  );\n}","size_bytes":18791},"client/src/components/features/NotificationSystem.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Bell, Settings, X, Check } from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\n\ninterface NotificationSystemProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface Reminder {\n  id: string;\n  title: string;\n  time: string;\n  enabled: boolean;\n  weekly?: boolean;\n}\n\nexport function NotificationSystem({ isOpen, onClose }: NotificationSystemProps) {\n  const [permission, setPermission] = useState<NotificationPermission>('default');\n  const [reminders, setReminders] = useState<Reminder[]>(() => {\n    const saved = localStorage.getItem('notification-reminders');\n    return saved ? JSON.parse(saved) : [\n      { id: '1', title: 'Daily Quest Reminder', time: '09:00', enabled: false },\n      { id: '2', title: 'Evening Review', time: '18:00', enabled: false },\n      { id: '3', title: 'Weekly Goals Check', time: '10:00', enabled: false, weekly: true }\n    ];\n  });\n\n  useEffect(() => {\n    if ('Notification' in window) {\n      setPermission(Notification.permission);\n    }\n  }, []);\n\n  const registerServiceWorker = async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.register('/sw.js', {\n          scope: '/'\n        });\n        console.log('Service Worker registered successfully:', registration);\n        \n        // Wait for service worker to be ready\n        await navigator.serviceWorker.ready;\n        console.log('Service Worker is ready');\n        \n        return registration;\n      } catch (error) {\n        console.error('Service Worker registration failed:', error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const isMobileDevice = () => {\n    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\n           (navigator.maxTouchPoints && navigator.maxTouchPoints > 2);\n  };\n\n  const showNotificationSafely = async (title: string, options: NotificationOptions) => {\n    try {\n      const isMobile = isMobileDevice();\n      console.log('Device type:', isMobile ? 'Mobile' : 'Desktop');\n      console.log('Notification permission:', Notification.permission);\n      \n      // For mobile devices, always use ServiceWorker approach\n      if (isMobile && 'serviceWorker' in navigator) {\n        try {\n          console.log('Mobile detected - using ServiceWorker approach...');\n          let registration = await navigator.serviceWorker.getRegistration();\n          if (!registration) {\n            console.log('No existing registration, creating new one...');\n            registration = await registerServiceWorker();\n          }\n          \n          if (registration && registration.showNotification) {\n            console.log('Showing notification via ServiceWorker (mobile optimized)');\n            await registration.showNotification(title, {\n              ...options,\n              requireInteraction: true, // Keep notification visible longer on mobile\n              badge: '/icon-192.png'\n            });\n            return true;\n          } else {\n            console.error('ServiceWorker registration failed or showNotification not available');\n          }\n        } catch (swError) {\n          console.error('ServiceWorker approach failed:', swError);\n        }\n      }\n      \n      // Fallback to direct notification for desktop\n      if ('Notification' in window && Notification.permission === 'granted') {\n        try {\n          console.log('Using direct notification (desktop)...');\n          const notification = new Notification(title, options);\n          \n          notification.onclick = () => {\n            console.log('Notification clicked - focusing window');\n            window.focus();\n            notification.close();\n          };\n          \n          notification.onshow = () => {\n            console.log('Notification shown successfully');\n          };\n          \n          notification.onerror = (error) => {\n            console.error('Direct notification error:', error);\n          };\n          \n          return true;\n        } catch (directError) {\n          console.error('Direct notification failed:', directError);\n        }\n      }\n      \n      console.warn('All notification methods exhausted');\n      return false;\n    } catch (error) {\n      console.error('Notification system error:', error);\n      return false;\n    }\n  };\n\n  const requestPermission = async () => {\n    console.log('Requesting notification permission...');\n    \n    if ('Notification' in window) {\n      try {\n        // Check if permission is already granted to avoid multiple requests\n        if (Notification.permission === 'granted') {\n          setPermission('granted');\n          showToast({\n            type: 'success',\n            title: 'Already Enabled!',\n            message: 'Notifications are already working'\n          });\n          return;\n        }\n        \n        const result = await Notification.requestPermission();\n        console.log('Permission result:', result);\n        setPermission(result);\n        \n        if (result === 'granted') {\n          console.log('Permission granted, creating welcome notification...');\n          \n          // Use setTimeout and safe notification method\n          setTimeout(async () => {\n            const success = await showNotificationSafely('🎯 Hunter System Online!', {\n              body: 'Notifications enabled! You\\'ll receive quest reminders and updates.',\n              icon: '/favicon.ico',\n              tag: 'welcome-notification',\n              silent: false\n            });\n            \n            if (!success) {\n              showToast({\n                type: 'warning',\n                title: 'Notification Setup',\n                message: 'Notifications enabled but test failed. This is normal on some mobile browsers.'\n              });\n            }\n          }, 200);\n          \n          showToast({\n            type: 'success',\n            title: 'Notifications Enabled!',\n            message: 'You should see a welcome notification!'\n          });\n          \n        } else if (result === 'denied') {\n          showToast({\n            type: 'warning',\n            title: 'Notifications Denied',\n            message: 'Please enable notifications in your browser settings to receive quest reminders'\n          });\n        } else {\n          showToast({\n            type: 'info',\n            title: 'Permission Pending',\n            message: 'Please respond to the notification permission prompt'\n          });\n        }\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n        showToast({\n          type: 'error',\n          title: 'Permission Error',\n          message: 'Could not request notification permission. Please check your browser settings'\n        });\n      }\n    } else {\n      showToast({\n        type: 'warning',\n        title: 'Notifications Not Supported',\n        message: 'Your browser does not support notifications'\n      });\n    }\n  };\n\n  const toggleReminder = (id: string) => {\n    setReminders(prev => {\n      const updated = prev.map(reminder => \n        reminder.id === id ? { ...reminder, enabled: !reminder.enabled } : reminder\n      );\n      localStorage.setItem('notification-reminders', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Schedule notifications based on enabled reminders\n  useEffect(() => {\n    const scheduleNotifications = () => {\n      reminders.forEach(reminder => {\n        if (reminder.enabled && permission === 'granted') {\n          const [hours, minutes] = reminder.time.split(':').map(Number);\n          const now = new Date();\n          const scheduledTime = new Date();\n          scheduledTime.setHours(hours, minutes, 0, 0);\n          \n          // If time has passed today, schedule for tomorrow\n          if (scheduledTime <= now) {\n            scheduledTime.setDate(scheduledTime.getDate() + 1);\n          }\n          \n          const timeUntilNotification = scheduledTime.getTime() - now.getTime();\n          \n          setTimeout(async () => {\n            await showNotificationSafely(`Solo Leveling - ${reminder.title}`, {\n              body: 'Time to level up your productivity!',\n              icon: '/favicon.ico',\n              badge: '/favicon.ico',\n              tag: `reminder-${reminder.id}`\n            });\n          }, timeUntilNotification);\n        }\n      });\n    };\n\n    if (permission === 'granted') {\n      scheduleNotifications();\n    }\n  }, [reminders, permission]);\n\n  const testNotification = async () => {\n    console.log('Test notification clicked, permission:', permission);\n    \n    if (permission === 'granted') {\n      showToast({\n        type: 'info',\n        title: 'Sending Test...',\n        message: 'Creating test notification...'\n      });\n      \n      // Use setTimeout and safe notification method for mobile compatibility\n      setTimeout(async () => {\n        const success = await showNotificationSafely('🏹 Hunter System Test', {\n          body: 'Test successful! Your quest reminders are working perfectly.',\n          icon: '/favicon.ico',\n          tag: 'test-notification',\n          silent: false\n        });\n        \n        if (success) {\n          showToast({\n            type: 'success',\n            title: 'Test Notification Sent!',\n            message: isMobileDevice() ? 'Check your notification panel!' : 'Check your notification area!'\n          });\n        } else {\n          const isMobile = isMobileDevice();\n          showToast({\n            type: 'warning',\n            title: 'Notification Issue',\n            message: isMobile \n              ? 'Mobile notifications failed. Try: 1) Allow notifications in browser settings 2) Add this site to home screen 3) Try desktop mode'\n              : 'Notifications may be blocked. Please allow notifications in your browser settings.'\n          });\n          \n          // Additional debug info for mobile\n          if (isMobile) {\n            console.log('Mobile notification troubleshooting:');\n            console.log('- User Agent:', navigator.userAgent);\n            console.log('- Service Worker support:', 'serviceWorker' in navigator);\n            console.log('- Notification support:', 'Notification' in window);\n            console.log('- Permission:', Notification.permission);\n            console.log('- Touch points:', navigator.maxTouchPoints);\n          }\n        }\n      }, 100);\n      \n    } else if (permission === 'denied') {\n      showToast({\n        type: 'warning',\n        title: 'Notifications Blocked',\n        message: 'Please enable notifications in your browser settings first'\n      });\n    } else {\n      showToast({\n        type: 'info',\n        title: 'Permission Required',\n        message: 'Please grant notification permission first'\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[9999] flex items-center justify-center p-4\">\n      <div className=\"mystical-card max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n              <Bell className=\"w-5 h-5 text-white\" />\n            </div>\n            <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">\n              NOTIFICATION SYSTEM\n            </h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-700 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-400\" />\n          </button>\n        </div>\n\n        {/* Permission Status */}\n        <div className=\"p-6 border-b border-gray-700\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Permission Status</h3>\n          \n          <div className={`p-4 rounded-lg border ${\n            permission === 'granted' ? 'bg-green-900/20 border-green-500/30' :\n            permission === 'denied' ? 'bg-red-900/20 border-red-500/30' :\n            'bg-yellow-900/20 border-yellow-500/30'\n          }`}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className={`font-semibold ${\n                  permission === 'granted' ? 'text-green-400' :\n                  permission === 'denied' ? 'text-red-400' :\n                  'text-yellow-400'\n                }`}>\n                  {permission === 'granted' ? '✅ Notifications Enabled' :\n                   permission === 'denied' ? '❌ Notifications Blocked' :\n                   '⏳ Permission Required'}\n                </p>\n                <p className=\"text-gray-300 text-sm mt-1\">\n                  {permission === 'granted' ? 'You will receive quest reminders and alerts' :\n                   permission === 'denied' ? 'Go to browser settings > Site Settings > Notifications and allow for this site' :\n                   'Click to enable browser notifications for reminders'}\n                </p>\n              </div>\n              \n              {permission !== 'granted' && (\n                <button\n                  onClick={requestPermission}\n                  className=\"power-button ml-4\"\n                  disabled={permission === 'denied'}\n                >\n                  Enable\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Reminder Settings */}\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-white\">Quest Reminders</h3>\n            {permission === 'granted' && (\n              <button\n                onClick={testNotification}\n                className=\"text-cyan-400 text-sm hover:text-cyan-300 transition-colors\"\n              >\n                Test Notification\n              </button>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            {reminders.map(reminder => (\n              <div \n                key={reminder.id}\n                className=\"mystical-card p-4 flex items-center justify-between\"\n              >\n                <div>\n                  <h4 className=\"text-white font-semibold\">{reminder.title}</h4>\n                  <p className=\"text-gray-400 text-sm\">\n                    {reminder.weekly ? 'Weekly • ' : 'Daily • '}{reminder.time}\n                  </p>\n                </div>\n                \n                <button\n                  onClick={() => toggleReminder(reminder.id)}\n                  disabled={permission !== 'granted'}\n                  className={`w-12 h-6 rounded-full transition-colors relative ${\n                    reminder.enabled && permission === 'granted' \n                      ? 'bg-blue-500' \n                      : 'bg-gray-600'\n                  } ${permission !== 'granted' ? 'opacity-50 cursor-not-allowed' : ''}`}\n                >\n                  <div className={`w-5 h-5 rounded-full bg-white transition-transform absolute top-0.5 ${\n                    reminder.enabled && permission === 'granted' \n                      ? 'translate-x-6' \n                      : 'translate-x-0.5'\n                  }`} />\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"p-6 border-t border-gray-700\">\n          <h3 className=\"text-lg font-semibold text-white mb-3\">How It Works</h3>\n          <div className=\"space-y-2 text-gray-300 text-sm\">\n            <p>• Notifications help you stay on track with your productivity goals</p>\n            <p>• Daily reminders for quest briefings and evening reviews</p>\n            <p>• Weekly check-ins to assess progress and adjust goals</p>\n            <p>• All reminders respect your device's Do Not Disturb settings</p>\n          </div>\n\n          {permission === 'denied' && (\n            <div className=\"mt-4 p-4 bg-red-900/20 border border-red-500/30 rounded-lg\">\n              <h4 className=\"text-red-400 font-semibold mb-2\">How to Enable Notifications:</h4>\n              <div className=\"text-gray-300 text-sm space-y-2\">\n                <p><strong>Chrome:</strong> Click the 🔒 lock icon next to the URL → Notifications → Allow</p>\n                <p><strong>Firefox:</strong> Click the shield icon → Turn off blocking for Notifications</p>\n                <p><strong>Safari:</strong> Safari menu → Preferences → Websites → Notifications → Allow</p>\n                <p><strong>Edge:</strong> Click the 🔒 icon → Notifications → Allow</p>\n                <div className=\"mt-3 p-2 bg-blue-900/30 rounded border border-blue-500/30\">\n                  <p className=\"text-blue-300\"><strong>Mobile:</strong> Notifications work best on desktop browsers. Mobile support varies by browser.</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17138},"client/src/components/goals/GoalCategory.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, ChevronDown, ChevronRight, Target, CheckCircle2, Circle, Star, Trash2, X } from \"lucide-react\";\n\ninterface Goal {\n  id: string;\n  title: string;\n  description?: string;\n  completed: boolean;\n  priority: 'low' | 'medium' | 'high';\n  dueDate?: string;\n  xpReward?: number;\n}\n\ninterface GoalCategoryProps {\n  category: {\n    id: string;\n    name: string;\n    goals: Goal[];\n  };\n  onAddGoal: (categoryId: string, goalData: Omit<Goal, 'id'>) => void;\n  onToggleGoal: (goalId: string) => void;\n  onDeleteGoal: (goalId: string) => void;\n}\n\nexport function GoalCategory({ category, onAddGoal, onToggleGoal, onDeleteGoal }: GoalCategoryProps) {\n  const [isExpanded, setIsExpanded] = useState(true);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [newGoalText, setNewGoalText] = useState(\"\");\n\n  const completedGoals = category.goals.filter(goal => goal.completed).length;\n  const totalGoals = category.goals.length;\n  const completionRate = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0;\n\n  const handleAddGoal = () => {\n    if (newGoalText.trim()) {\n      onAddGoal(category.id, {\n        title: newGoalText.trim(),\n        completed: false,\n        priority: 'medium',\n        xpReward: 25\n      });\n      setNewGoalText(\"\");\n      setShowAddForm(false);\n    }\n  };\n\n  const getCategoryStyles = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'main mission': \n        return {\n          card: 'quest-category border-red-500/30',\n          accent: 'text-red-400',\n          icon: '⚔️',\n          bgGradient: 'from-red-900/20 to-red-800/10',\n          headerIcon: <Target className=\"w-6 h-6\" />\n        };\n      case 'training': \n        return {\n          card: 'quest-category border-blue-500/30',\n          accent: 'text-blue-400',\n          icon: '🛡️',\n          bgGradient: 'from-blue-900/20 to-blue-800/10',\n          headerIcon: <Star className=\"w-6 h-6\" />\n        };\n      case 'side quests': \n        return {\n          card: 'quest-category border-green-500/30',\n          accent: 'text-green-400',\n          icon: '⭐',\n          bgGradient: 'from-green-900/20 to-green-800/10',\n          headerIcon: <CheckCircle2 className=\"w-6 h-6\" />\n        };\n      default: \n        return {\n          card: 'quest-category',\n          accent: 'text-cyan-400',\n          icon: '📋',\n          bgGradient: 'from-cyan-900/20 to-cyan-800/10',\n          headerIcon: <Target className=\"w-6 h-6\" />\n        };\n    }\n  };\n\n  const styles = getCategoryStyles(category.name);\n\n  return (\n    <div className={`${styles.card} mb-6 bg-gradient-to-br ${styles.bgGradient}`}>\n      {/* Header */}\n      <div \n        className=\"p-6 cursor-pointer flex items-center justify-between hover:bg-white/5 transition-all duration-300\"\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        <div className=\"flex items-center space-x-4\">\n          {isExpanded ? \n            <ChevronDown className={`w-5 h-5 ${styles.accent} transition-transform duration-300 rotate-0`} /> : \n            <ChevronRight className={`w-5 h-5 ${styles.accent} transition-transform duration-300`} />\n          }\n          <div className=\"text-3xl\">{styles.icon}</div>\n          <div>\n            <h3 className={`font-bold font-['Orbitron'] text-xl ${styles.accent} uppercase tracking-wide`}>\n              {category.name}\n            </h3>\n            <p className=\"text-gray-400 font-semibold\">\n              {completedGoals}/{totalGoals} COMPLETED • {completionRate}% PROGRESS\n            </p>\n          </div>\n        </div>\n        \n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            setShowAddForm(true);\n          }}\n          className=\"mystical-card p-3 hover:scale-110 transition-all duration-300 group\"\n        >\n          <Plus className={`w-6 h-6 ${styles.accent} group-hover:rotate-90 transition-transform duration-300`} />\n        </button>\n      </div>\n\n      {/* Progress Bar */}\n      {isExpanded && totalGoals > 0 && (\n        <div className=\"px-6 pb-4\">\n          <div className=\"relative\">\n            <div className=\"w-full bg-gray-800 rounded-full h-3 overflow-hidden border border-gray-700\">\n              <div \n                className={`h-full bg-gradient-to-r ${\n                  category.name.toLowerCase() === 'main mission' ? 'from-red-500 to-red-400' :\n                  category.name.toLowerCase() === 'training' ? 'from-blue-500 to-blue-400' :\n                  'from-green-500 to-green-400'\n                } rounded-full transition-all duration-700 power-surge`}\n                style={{ width: `${completionRate}%` }}\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\" />\n            </div>\n            <div className=\"absolute -top-8 right-0 text-xs font-bold text-gray-400\">\n              {completionRate}%\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Content */}\n      {isExpanded && (\n        <div className=\"border-t border-white/10 p-6 space-y-5\">\n          {/* Add Goal Form */}\n          {showAddForm && (\n            <div className=\"mystical-card p-6 bg-gradient-to-br from-gray-900/80 to-gray-800/60 border-2 border-cyan-500/30\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-lg flex items-center justify-center\">\n                  <Plus className=\"w-5 h-5 text-white\" />\n                </div>\n                <h4 className=\"text-cyan-400 font-bold font-['Orbitron'] uppercase tracking-wide\">\n                  New {category.name.slice(0, -1)} Creation\n                </h4>\n              </div>\n              <input\n                type=\"text\"\n                value={newGoalText}\n                onChange={(e) => setNewGoalText(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleAddGoal()}\n                placeholder={`ENTER NEW ${category.name.toUpperCase()} OBJECTIVE...`}\n                className=\"w-full bg-gray-900/80 border-2 border-cyan-500/30 rounded-lg px-4 py-4 text-white placeholder-gray-400 font-semibold focus:border-cyan-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/20 transition-all duration-300\"\n                autoFocus\n              />\n              <div className=\"flex space-x-4 mt-6\">\n                <button\n                  onClick={handleAddGoal}\n                  className=\"power-button flex-1\"\n                >\n                  <span className=\"relative z-10\">Deploy Quest</span>\n                </button>\n                <button\n                  onClick={() => {\n                    setShowAddForm(false);\n                    setNewGoalText(\"\");\n                  }}\n                  className=\"mystical-card px-6 py-3 text-gray-300 hover:text-white border border-gray-600 hover:border-gray-500 transition-all duration-200\"\n                >\n                  Abort\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Goals List */}\n          {category.goals.length === 0 ? (\n            <div className=\"text-center py-16 text-gray-400\">\n              <div className=\"mystical-card p-12 text-center bg-gradient-to-br from-gray-900/60 to-gray-800/40\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-gray-700 to-gray-800 rounded-full flex items-center justify-center\">\n                  <Target className=\"w-10 h-10 text-gray-500\" />\n                </div>\n                <p className=\"font-bold text-xl mb-3 text-gray-300 font-['Orbitron']\">NO ACTIVE QUESTS</p>\n                <p className=\"text-gray-500 text-sm\">The realm awaits your first mission</p>\n                <div className=\"mt-6 text-xs text-gray-600\">\n                  • Click the + button to begin your journey\n                </div>\n              </div>\n            </div>\n          ) : (\n            category.goals.map((goal, index) => (\n              <div\n                key={goal.id}\n                className=\"goal-quest group fade-in relative\"\n                style={{ animationDelay: `${index * 100}ms` }}\n              >\n                {/* Delete Button */}\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteGoal(goal.id);\n                  }}\n                  className=\"absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 bg-red-600 hover:bg-red-700 rounded-full z-10\"\n                  title=\"Delete goal\"\n                >\n                  <X className=\"w-4 h-4 text-white\" />\n                </button>\n\n                <div \n                  className=\"flex items-start space-x-4 cursor-pointer\"\n                  onClick={() => onToggleGoal(goal.id)}\n                >\n                  <button className=\"mt-1 group-hover:scale-125 transition-all duration-300\">\n                    {goal.completed ? (\n                      <div className=\"relative\">\n                        <CheckCircle2 className=\"w-7 h-7 text-green-400 drop-shadow-[0_0_10px_rgba(34,197,94,0.5)]\" />\n                        <div className=\"absolute inset-0 w-7 h-7 bg-green-400/20 rounded-full animate-pulse\" />\n                      </div>\n                    ) : (\n                      <Circle className=\"w-7 h-7 text-gray-400 group-hover:text-cyan-400 transition-colors duration-300\" />\n                    )}\n                  </button>\n                  \n                  <div className=\"flex-1\">\n                    <p className={`font-bold text-lg ${\n                      goal.completed \n                        ? 'line-through text-gray-500' \n                        : 'text-white group-hover:text-cyan-300'\n                    } transition-colors duration-300`}>\n                      {goal.title}\n                    </p>\n                    {goal.description && (\n                      <p className=\"text-gray-400 mt-2 text-sm\">\n                        {goal.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center space-x-6 mt-4 text-sm\">\n                      {goal.dueDate && (\n                        <span className=\"text-amber-400 font-semibold flex items-center space-x-1\">\n                          <span>⏰</span>\n                          <span>{new Date(goal.dueDate).toLocaleDateString()}</span>\n                        </span>\n                      )}\n                      {goal.xpReward && (\n                        <span className=\"text-cyan-400 font-bold bg-cyan-400/10 px-3 py-1 rounded-lg border border-cyan-400/20\">\n                          +{goal.xpReward} EXP\n                        </span>\n                      )}\n                      <span className={`px-3 py-1 rounded-lg text-xs font-bold uppercase border ${\n                        goal.priority === 'high' \n                          ? 'bg-red-500/20 text-red-400 border-red-500/30' :\n                        goal.priority === 'medium' \n                          ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30' :\n                        'bg-green-500/20 text-green-400 border-green-500/30'\n                      }`}>\n                        {goal.priority} Priority\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11549},"client/src/components/goals/GoalItem.tsx":{"content":"import { Goal } from \"@/types\";\nimport { cn } from \"@/lib/utils\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface GoalItemProps {\n  goal: Goal;\n  categoryColor: string;\n  onToggle: () => void;\n}\n\nexport function GoalItem({ goal, categoryColor, onToggle }: GoalItemProps) {\n  const isCompleted = goal.status === 'completed';\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500/20 text-red-300';\n      case 'medium':\n        return 'bg-yellow-500/20 text-yellow-300';\n      case 'low':\n        return 'bg-blue-500/20 text-blue-300';\n      default:\n        return 'bg-gray-500/20 text-gray-300';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-500/20 text-green-300';\n      case 'in-progress':\n        return 'bg-yellow-500/20 text-yellow-300';\n      case 'failed':\n        return 'bg-red-500/20 text-red-300';\n      default:\n        return 'bg-gray-500/20 text-gray-300';\n    }\n  };\n\n  const formatDueDate = (date: Date) => {\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return 'Tomorrow';\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  return (\n    <div className={cn(\n      \"flex items-center space-x-3 p-3 bg-gray-700/50 rounded-lg hover:bg-gray-700 transition-colors\",\n      isCompleted && \"opacity-75\"\n    )}>\n      <Checkbox\n        checked={isCompleted}\n        onCheckedChange={onToggle}\n        className={cn(\"border-2\", categoryColor.replace('text-', 'border-'))}\n      />\n      \n      <div className=\"flex-1\">\n        <p className={cn(\n          \"font-medium\",\n          isCompleted && \"line-through\"\n        )}>\n          {goal.title}\n        </p>\n        <div className=\"flex items-center space-x-2 mt-1\">\n          {goal.dueDate && (\n            <p className=\"text-sm text-gray-400\">\n              Due: {formatDueDate(goal.dueDate)}\n            </p>\n          )}\n          {goal.dueDate && goal.xpValue && <span className=\"text-gray-500\">•</span>}\n          {goal.xpValue && (\n            <p className=\"text-sm text-gray-400\">\n              XP: {goal.xpValue}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-2\">\n        {goal.priority !== 'medium' && (\n          <span className={cn(\"px-2 py-1 rounded text-xs\", getPriorityColor(goal.priority))}>\n            {goal.priority === 'high' ? 'High Priority' : 'Low Priority'}\n          </span>\n        )}\n        <span className={cn(\"px-2 py-1 rounded text-xs capitalize\", getStatusColor(goal.status))}>\n          {goal.status === 'in-progress' ? 'In Progress' : goal.status}\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2959},"client/src/components/goals/MorningModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sun } from \"lucide-react\";\nimport { CategoryWithGoals } from \"@/types\";\n\ninterface MorningModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  categories: CategoryWithGoals[];\n  onAddGoal: (goalData: any) => void;\n}\n\nconst motivationalQuotes = [\n  \"The stronger the monster, the stronger I become. - Sung Jin-Woo\",\n  \"I alone level up. - Sung Jin-Woo\", \n  \"No matter how hard you train, there's always room for improvement. - Sung Jin-Woo\",\n  \"The shadow soldiers will always have my back. - Sung Jin-Woo\",\n  \"Every ending is a new beginning. - Sung Jin-Woo\"\n];\n\nexport function MorningModal({ isOpen, onClose, categories, onAddGoal }: MorningModalProps) {\n  const [goalTitle, setGoalTitle] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [xpValue, setXpValue] = useState(50);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const randomQuote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n\n  const handleSubmit = async () => {\n    if (!goalTitle.trim() || !selectedCategory) return;\n\n    setIsSubmitting(true);\n    try {\n      await onAddGoal({\n        title: goalTitle,\n        categoryId: selectedCategory,\n        status: 'pending',\n        priority: 'medium',\n        xpValue: xpValue,\n        isRecurring: false,\n      });\n      \n      // Reset form\n      setGoalTitle(\"\");\n      setSelectedCategory(\"\");\n      setXpValue(50);\n      onClose();\n    } catch (error) {\n      console.error('Error adding goal:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSnooze = () => {\n    // TODO: Implement snooze functionality (e.g., remind in 15 minutes)\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-solo-purple border border-solo-blue/50 max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-r from-solo-blue to-solo-violet rounded-full mx-auto mb-4 flex items-center justify-center\">\n            <Sun className=\"w-8 h-8 text-white\" />\n          </div>\n          <DialogTitle className=\"font-orbitron font-bold text-xl text-solo-blue\">\n            Morning Quest Briefing\n          </DialogTitle>\n          <p className=\"text-gray-300\">What goals do you want to crush today, hunter?</p>\n        </DialogHeader>\n        \n        {/* Motivational Quote */}\n        <div className=\"bg-gray-800/50 border border-gray-600 rounded-lg p-4 mb-6\">\n          <p className=\"text-sm text-gray-300 italic text-center\">\n            \"{randomQuote}\"\n          </p>\n        </div>\n        \n        {/* Quick Goal Entry */}\n        <div className=\"space-y-4 mb-6\">\n          <Input\n            type=\"text\"\n            placeholder=\"Enter today's main quest...\"\n            value={goalTitle}\n            onChange={(e) => setGoalTitle(e.target.value)}\n            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-solo-blue focus:ring-solo-blue\"\n          />\n          <div className=\"flex space-x-2\">\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"flex-1 bg-gray-800 border-gray-600 text-white focus:border-solo-blue\">\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-600\">\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Input\n              type=\"number\"\n              placeholder=\"XP\"\n              value={xpValue}\n              onChange={(e) => setXpValue(Number(e.target.value))}\n              className=\"w-20 bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-solo-blue\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          <Button\n            onClick={handleSnooze}\n            variant=\"secondary\"\n            className=\"flex-1 bg-gray-700 hover:bg-gray-600 text-gray-300\"\n          >\n            Snooze\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitting || !goalTitle.trim() || !selectedCategory}\n            className=\"flex-1 bg-gradient-to-r from-solo-blue to-solo-violet hover:shadow-lg hover:shadow-solo-blue/25\"\n          >\n            {isSubmitting ? 'Adding...' : 'Begin Hunt'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5002},"client/src/components/layout/AppSidebar.tsx":{"content":"import { Home, Calendar, BarChart3, Settings, User, BookOpen, Flame } from \"lucide-react\";\n\ninterface AppSidebarProps {\n  currentView: string;\n  onViewChange?: (view: string) => void;\n  collapsed?: boolean;\n  onToggleCollapse?: () => void;\n  userLevel?: number;\n  currentXP?: number;\n  maxXP?: number;\n  rank?: string;\n  user?: { displayName?: string | null; } | null;\n}\n\nexport function AppSidebar({ \n  currentView, \n  onViewChange, \n  collapsed = false,\n  onToggleCollapse,\n  userLevel = 1, \n  currentXP = 0, \n  maxXP = 100,\n  user\n}: AppSidebarProps) {\n  const progress = Math.round((currentXP / maxXP) * 100);\n\n  const navItems = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home },\n    { id: 'streaks', label: 'Streak Tracker', icon: Flame },\n    { id: 'calendar', label: 'Calendar', icon: Calendar },\n    { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n    { id: 'notes', label: 'Shadow Archives', icon: BookOpen },\n    { id: 'settings', label: 'Settings', icon: Settings },\n  ];\n\n  return (\n    <aside className=\"w-64 h-screen bg-gradient-to-b from-gray-900 to-black border-r border-gray-700 flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-700\">\n        {/* Logo Section */}\n        <div className=\"flex items-center justify-center mb-4\">\n          <img \n            src=\"/attached_assets/image_1754237156070.png\" \n            alt=\"Solo Leveling - ARISE\" \n            className=\"h-12 w-auto object-contain\"\n          />\n        </div>\n        \n        {/* User Info */}\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n            <User className=\"w-5 h-5 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-sm font-bold text-white truncate max-w-32\">{user?.displayName || 'Hunter'}</h1>\n            <p className=\"text-xs text-gray-400\">Level {userLevel}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* XP Progress */}\n      <div className=\"p-6 border-b border-gray-700\">\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-300\">XP Progress</span>\n            <span className=\"text-cyan-400 font-semibold\">{currentXP}/{maxXP}</span>\n          </div>\n          <div className=\"w-full bg-gray-800 rounded-full h-2 overflow-hidden\">\n            <div \n              className=\"bg-gradient-to-r from-blue-500 to-cyan-400 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${progress}%` }}\n            />\n          </div>\n          <div className=\"text-xs text-gray-400 text-center\">\n            {maxXP - currentXP} XP to next level\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4\">\n        <div className=\"space-y-2\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = currentView === item.id;\n            \n            return (\n              <button\n                key={item.id}\n                onClick={() => onViewChange?.(item.id)}\n                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-all duration-200 font-medium ${\n                  isActive\n                    ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-lg'\n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      </nav>\n    </aside>\n  );\n}","size_bytes":3718},"client/src/components/layout/TopBar.tsx":{"content":"import { Bell, User, Menu } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface TopBarProps {\n  user?: any;\n  onMenuClick?: () => void;\n}\n\nexport function TopBar({ user, onMenuClick }: TopBarProps) {\n  const { signOut } = useAuth();\n\n  const handleSignOut = async () => {\n    if (confirm('Are you sure you want to sign out?')) {\n      try {\n        await signOut();\n        // The app will automatically redirect to login due to auth state change\n      } catch (error) {\n        console.error('Sign out error:', error);\n      }\n    }\n  };\n\n  return (\n    <header className=\"h-16 border-b border-cyan-500/20 bg-gray-900/90 backdrop-blur-sm px-4 flex items-center justify-between\">\n      <div className=\"flex items-center space-x-4\">\n        {/* Mobile hamburger */}\n        <button \n          onClick={onMenuClick}\n          className=\"lg:hidden p-2 hover:bg-gray-800 rounded-md text-cyan-400\"\n          data-testid=\"button-mobile-menu\"\n        >\n          <Menu className=\"w-5 h-5\" />\n        </button>\n        \n        <div>\n          <h2 className=\"font-['Orbitron'] font-semibold text-cyan-400\">Solo Hunter</h2>\n          <p className=\"text-xs text-gray-400\">\n            {new Date().toLocaleDateString('en-GB', { \n              weekday: 'long', \n              day: '2-digit',\n              month: '2-digit',\n              year: 'numeric'\n            })}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-3\">\n        {/* User Profile & Sign Out */}\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2\">\n            {user?.photoURL ? (\n              <img \n                src={user.photoURL} \n                alt=\"Profile\" \n                className=\"w-8 h-8 rounded-full border border-cyan-400/30\"\n              />\n            ) : (\n              <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full flex items-center justify-center\">\n                <User className=\"w-4 h-4 text-white\" />\n              </div>\n            )}\n            <span className=\"hidden sm:block text-sm text-white font-medium\">\n              {user?.displayName || 'Hunter'}\n            </span>\n          </div>\n          \n          {/* Sign Out Button */}\n          <button\n            onClick={handleSignOut}\n            className=\"px-3 py-1.5 bg-red-600/20 hover:bg-red-600/30 text-red-400 hover:text-red-300 border border-red-600/30 rounded-lg text-sm font-medium transition-colors\"\n            data-testid=\"button-sign-out\"\n            title=\"Sign Out\"\n          >\n            Sign Out\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2686},"client/src/components/modals/MorningModal.tsx":{"content":"import { useState } from \"react\";\nimport { X, Sun, Target, Calendar, Trophy } from \"lucide-react\";\n\ninterface MorningModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function MorningModal({ isOpen, onClose }: MorningModalProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  if (!isOpen) return null;\n\n  const steps = [\n    {\n      title: \"Good Morning, Hunter!\",\n      icon: <Sun className=\"w-12 h-12 text-amber-400\" />,\n      content: (\n        <div className=\"text-center space-y-4\">\n          <p className=\"text-gray-300 text-lg\">\n            Welcome to your Daily Planning session. This is your chance to set intentions and prepare for the day ahead.\n          </p>\n          <div className=\"bg-blue-900/20 border border-blue-500/30 rounded-lg p-4\">\n            <p className=\"text-blue-300 text-sm\">\n              <strong>Purpose:</strong> Help you reflect on your goals, prioritize tasks, and start your day with focus and motivation.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Set Your Daily Intentions\",\n      icon: <Target className=\"w-12 h-12 text-cyan-400\" />,\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-300\">\n            What are your top 3 priorities for today?\n          </p>\n          <div className=\"space-y-3\">\n            <input\n              type=\"text\"\n              placeholder=\"Priority 1: Most important task\"\n              className=\"w-full bg-gray-900/80 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Priority 2: Second important task\"\n              className=\"w-full bg-gray-900/80 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Priority 3: Third important task\"\n              className=\"w-full bg-gray-900/80 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Plan Your Schedule\",\n      icon: <Calendar className=\"w-12 h-12 text-green-400\" />,\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-300\">\n            When will you work on your priorities?\n          </p>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm text-gray-400 mb-2\">Morning Focus Time</label>\n              <input\n                type=\"time\"\n                className=\"w-full bg-gray-900/80 border border-gray-600 rounded-lg px-4 py-3 text-white focus:border-green-400 focus:outline-none\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm text-gray-400 mb-2\">Afternoon Focus Time</label>\n              <input\n                type=\"time\"\n                className=\"w-full bg-gray-900/80 border border-gray-600 rounded-lg px-4 py-3 text-white focus:border-green-400 focus:outline-none\"\n              />\n            </div>\n          </div>\n          <textarea\n            placeholder=\"Any specific plans or notes for today?\"\n            className=\"w-full bg-gray-900/80 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-green-400 focus:outline-none h-24 resize-none\"\n          />\n        </div>\n      )\n    },\n    {\n      title: \"Ready to Conquer Today!\",\n      icon: <Trophy className=\"w-12 h-12 text-amber-400\" />,\n      content: (\n        <div className=\"text-center space-y-4\">\n          <p className=\"text-gray-300 text-lg\">\n            Your daily plan is set. Remember: every small step brings you closer to your goals.\n          </p>\n          <div className=\"bg-gradient-to-r from-amber-900/20 to-orange-900/20 border border-amber-500/30 rounded-lg p-4\">\n            <p className=\"text-amber-300 font-semibold\">\n              \"The journey of a thousand miles begins with a single step.\"\n            </p>\n          </div>\n          <div className=\"text-sm text-gray-400\">\n            <p>✓ Priorities set</p>\n            <p>✓ Schedule planned</p>\n            <p>✓ Ready to level up</p>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const currentStepData = steps[currentStep];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[9999] flex items-center justify-center p-4\">\n      <div className=\"mystical-card max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            {currentStepData.icon}\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">\n                {currentStepData.title}\n              </h2>\n              <p className=\"text-sm text-gray-400\">\n                Step {currentStep + 1} of {steps.length}\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-700 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-400\" />\n          </button>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"px-6 pt-4\">\n          <div className=\"w-full bg-gray-800 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-blue-500 to-cyan-500 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {currentStepData.content}\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between p-6 border-t border-gray-700\">\n          <button\n            onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n            disabled={currentStep === 0}\n            className=\"px-6 py-3 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 disabled:text-gray-500 text-white rounded-lg transition-colors\"\n          >\n            Previous\n          </button>\n          \n          {currentStep < steps.length - 1 ? (\n            <button\n              onClick={() => setCurrentStep(currentStep + 1)}\n              className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white rounded-lg transition-all\"\n            >\n              Next\n            </button>\n          ) : (\n            <button\n              onClick={onClose}\n              className=\"px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white rounded-lg transition-all\"\n            >\n              Start Your Day\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7044},"client/src/components/modals/OnboardingModal.tsx":{"content":"import { useState } from \"react\";\nimport { X, ChevronRight, ChevronLeft, Target, Calendar, BarChart3, FileText, Bell } from \"lucide-react\";\n\ninterface OnboardingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function OnboardingModal({ isOpen, onClose }: OnboardingModalProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const steps = [\n    {\n      title: \"Welcome, Hunter!\",\n      icon: \"🎯\",\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"text-6xl mb-6\">🦸‍♂️</div>\n          <h3 className=\"text-2xl font-bold text-white font-['Orbitron'] mb-4\">\n            Welcome to Your Hunter System\n          </h3>\n          <p className=\"text-gray-300 text-lg leading-relaxed\">\n            Transform your productivity with a Solo Leveling-inspired quest management system. \n            Complete daily goals, level up your character, and become the ultimate productivity hunter!\n          </p>\n          <div className=\"bg-blue-900/30 border border-blue-500/30 rounded-lg p-4 mt-6\">\n            <p className=\"text-blue-400 font-semibold\">🏆 Ready to begin your hunter journey?</p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Quest Categories\",\n      icon: \"⚔️\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <Target className=\"w-16 h-16 mx-auto text-cyan-400 mb-4\" />\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Organize Your Missions</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"mystical-card p-4 bg-gradient-to-r from-red-900/30 to-red-800/20 border border-red-500/30\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-2xl\">⚔️</span>\n                <div>\n                  <h4 className=\"text-red-400 font-bold\">Main Mission</h4>\n                  <p className=\"text-gray-300 text-sm\">Critical work tasks and important goals</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"mystical-card p-4 bg-gradient-to-r from-blue-900/30 to-blue-800/20 border border-blue-500/30\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-2xl\">🛡️</span>\n                <div>\n                  <h4 className=\"text-blue-400 font-bold\">Training</h4>\n                  <p className=\"text-gray-300 text-sm\">Learning, skills, and personal development</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"mystical-card p-4 bg-gradient-to-r from-green-900/30 to-green-800/20 border border-green-500/30\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-2xl\">⭐</span>\n                <div>\n                  <h4 className=\"text-green-400 font-bold\">Side Quest</h4>\n                  <p className=\"text-gray-300 text-sm\">Personal tasks and optional activities</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Level Up System\",\n      icon: \"👑\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-cyan-400 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-3xl\">👑</span>\n            </div>\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Gain Experience Points</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"mystical-card p-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-white\">Complete a goal</span>\n                <span className=\"text-cyan-400 font-bold\">+25 XP</span>\n              </div>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-white\">Daily streak bonus</span>\n                <span className=\"text-amber-400 font-bold\">+50 XP</span>\n              </div>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-white\">Perfect week</span>\n                <span className=\"text-purple-400 font-bold\">+200 XP</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-amber-900/30 border border-amber-500/30 rounded-lg p-4\">\n            <p className=\"text-amber-400 text-sm\">\n              📈 Level up to unlock new ranks: E-Rank → D-Rank → C-Rank → B-Rank → A-Rank → S-Rank\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Calendar & Planning\",\n      icon: \"📅\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <Calendar className=\"w-16 h-16 mx-auto text-blue-400 mb-4\" />\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Plan Your Quests</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">📅 Calendar View</h4>\n              <p className=\"text-gray-300 text-sm\">See all your goals organized by due date and track completion patterns</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">🌅 Morning Briefing</h4>\n              <p className=\"text-gray-300 text-sm\">Start each day with an immersive quest briefing modal</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">⏰ Due Date Tracking</h4>\n              <p className=\"text-gray-300 text-sm\">Set deadlines and never miss important goals</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Analytics & Progress\",\n      icon: \"📊\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400 mb-4\" />\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Track Your Growth</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">📈 Completion Analytics</h4>\n              <p className=\"text-gray-300 text-sm\">Visual charts showing your productivity trends and patterns</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">🎯 Goal Distribution</h4>\n              <p className=\"text-gray-300 text-sm\">See how your effort is spread across different categories</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">🔥 Streak Tracking</h4>\n              <p className=\"text-gray-300 text-sm\">Maintain daily completion streaks for bonus XP</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Hunter's Archive\",\n      icon: \"📝\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <FileText className=\"w-16 h-16 mx-auto text-green-400 mb-4\" />\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Document Your Journey</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">📔 Personal Notes</h4>\n              <p className=\"text-gray-300 text-sm\">Write reflections, strategies, and insights in your Hunter's Archive</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">🏷️ Organized Tags</h4>\n              <p className=\"text-gray-300 text-sm\">Tag notes by category: Strategies, Reflections, Plans, and Ideas</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">🔍 Quick Search</h4>\n              <p className=\"text-gray-300 text-sm\">Find past notes instantly with powerful search functionality</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Notifications & Reminders\",\n      icon: \"🔔\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <Bell className=\"w-16 h-16 mx-auto text-yellow-400 mb-4\" />\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Stay On Track</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">⏰ Daily Reminders</h4>\n              <p className=\"text-gray-300 text-sm\">Get notified for morning planning and evening reviews</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">📱 Browser Notifications</h4>\n              <p className=\"text-gray-300 text-sm\">Receive alerts even when the app isn't open</p>\n            </div>\n            <div className=\"mystical-card p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">⚙️ Customizable Settings</h4>\n              <p className=\"text-gray-300 text-sm\">Configure notification times and frequency in Settings</p>\n            </div>\n          </div>\n          <div className=\"bg-blue-900/30 border border-blue-500/30 rounded-lg p-4\">\n            <p className=\"text-blue-400 text-sm\">\n              💡 Tip: Enable notifications in Settings → Notification Center for the best experience\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Ready to Begin!\",\n      icon: \"🚀\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <div className=\"text-6xl mb-6\">🎉</div>\n          <h3 className=\"text-2xl font-bold text-white font-['Orbitron'] mb-4\">\n            You're All Set, Hunter!\n          </h3>\n          <p className=\"text-gray-300 text-lg leading-relaxed mb-6\">\n            Your productivity system is ready. Start by adding your first goals in each category, \n            set up notifications, and begin your journey to become an S-Rank productivity hunter!\n          </p>\n          <div className=\"space-y-3\">\n            <div className=\"bg-green-900/30 border border-green-500/30 rounded-lg p-4\">\n              <p className=\"text-green-400 font-semibold\">✅ Add your first Main Mission goal</p>\n            </div>\n            <div className=\"bg-blue-900/30 border border-blue-500/30 rounded-lg p-4\">\n              <p className=\"text-blue-400 font-semibold\">📱 Enable notifications in Settings</p>\n            </div>\n            <div className=\"bg-purple-900/30 border border-purple-500/30 rounded-lg p-4\">\n              <p className=\"text-purple-400 font-semibold\">🎨 Customize your theme and colors</p>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const currentStepData = steps[currentStep];\n\n  const nextStep = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log('Next button clicked, current step:', currentStep);\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  const prevStep = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log('Previous button clicked, current step:', currentStep);\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  const handleClose = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log('Close button clicked');\n    setCurrentStep(0);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/90 backdrop-blur-lg z-[9999] flex items-center justify-center p-4\">\n      <div className=\"hunter-status-window max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-700\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-2xl\">{currentStepData.icon}</span>\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">\n                HUNTER TUTORIAL\n              </h2>\n              <p className=\"text-gray-400 text-sm\">\n                Step {currentStep + 1} of {steps.length}: {currentStepData.title}\n              </p>\n            </div>\n          </div>\n          <button\n            type=\"button\"\n            onClick={handleClose}\n            className=\"p-2 hover:bg-gray-700 rounded-lg transition-colors cursor-pointer\"\n            data-testid=\"button-close-header\"\n          >\n            <X className=\"w-6 h-6 text-gray-400\" />\n          </button>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"px-6 pt-4\">\n          <div className=\"w-full bg-gray-800 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-blue-500 to-cyan-500 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {currentStepData.content}\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex items-center justify-between p-6 border-t border-gray-700\">\n          <div className=\"flex space-x-3\">\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-semibold\"\n              data-testid=\"button-cancel-tutorial\"\n            >\n              <X className=\"w-4 h-4\" />\n              <span>Cancel</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={currentStep === 0 ? undefined : prevStep}\n              disabled={currentStep === 0}\n              className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${\n                currentStep === 0\n                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                  : 'bg-gray-700 hover:bg-gray-600 text-white cursor-pointer'\n              }`}\n              data-testid=\"button-previous-tutorial\"\n            >\n              <ChevronLeft className=\"w-5 h-5\" />\n              <span>Previous</span>\n            </button>\n          </div>\n\n          <div className=\"flex space-x-2\">\n            {steps.map((_, index) => (\n              <button\n                key={index}\n                type=\"button\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  console.log('Step dot clicked:', index);\n                  setCurrentStep(index);\n                }}\n                className={`w-3 h-3 rounded-full transition-all duration-200 hover:scale-125 cursor-pointer ${\n                  index === currentStep\n                    ? 'bg-cyan-400 ring-2 ring-cyan-400/50'\n                    : index < currentStep\n                    ? 'bg-blue-500 hover:bg-blue-400'\n                    : 'bg-gray-600 hover:bg-gray-500'\n                }`}\n                data-testid={`button-step-${index}`}\n              />\n            ))}\n          </div>\n\n          {currentStep === steps.length - 1 ? (\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"px-6 py-3 bg-gradient-to-r from-green-600 to-cyan-600 hover:from-green-700 hover:to-cyan-700 text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-105 cursor-pointer\"\n              data-testid=\"button-start-hunting\"\n            >\n              <span>Start Hunting!</span>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              onClick={nextStep}\n              className=\"flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-105 cursor-pointer\"\n              data-testid=\"button-next-tutorial\"\n            >\n              <span>Next</span>\n              <ChevronRight className=\"w-5 h-5\" />\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17043},"client/src/components/settings/SettingsView.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useUserProfile } from \"@/hooks/useUserProfile\";\nimport { Settings, User, Bell, Moon, Sun } from \"lucide-react\";\n\nexport function SettingsView() {\n  const { user } = useAuth();\n  const { profile, updateProfile } = useUserProfile();\n  const [morningTime, setMorningTime] = useState(\"07:00\");\n  const [enableNotifications, setEnableNotifications] = useState(true);\n  const [darkMode, setDarkMode] = useState(true);\n  const [displayName, setDisplayName] = useState(user?.displayName || \"\");\n\n  const handleSaveProfile = async () => {\n    if (profile) {\n      await updateProfile({\n        displayName: displayName,\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <Settings className=\"w-6 h-6 text-solo-blue\" />\n        <h2 className=\"font-orbitron font-bold text-2xl text-solo-blue\">System Settings</h2>\n      </div>\n      \n      {/* Profile Settings */}\n      <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <User className=\"w-5 h-5 text-solo-blue\" />\n          <h3 className=\"font-semibold text-lg\">Hunter Profile</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Display Name</label>\n            <Input\n              type=\"text\"\n              value={displayName}\n              onChange={(e) => setDisplayName(e.target.value)}\n              placeholder=\"Enter your hunter name\"\n              className=\"bg-gray-800 border-gray-600\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Email</label>\n            <Input\n              type=\"email\"\n              value={user?.email || \"\"}\n              disabled\n              className=\"bg-gray-700 border-gray-600 text-gray-400\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Current Level</label>\n            <div className=\"bg-gray-800 border border-gray-600 rounded-md px-3 py-2\">\n              <span className=\"text-solo-blue font-bold\">{profile?.level || 1}</span>\n              <span className=\"text-gray-400 ml-2\">({profile?.rank || 'E-Rank'})</span>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Total XP</label>\n            <div className=\"bg-gray-800 border border-gray-600 rounded-md px-3 py-2\">\n              <span className=\"text-green-400 font-bold\">{profile?.totalXP?.toLocaleString() || 0}</span>\n              <span className=\"text-gray-400 ml-2\">XP</span>\n            </div>\n          </div>\n        </div>\n        \n        <Button \n          onClick={handleSaveProfile}\n          className=\"mt-4 bg-gradient-to-r from-solo-blue to-solo-violet\"\n        >\n          Update Profile\n        </Button>\n      </div>\n\n      {/* Notification Settings */}\n      <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Bell className=\"w-5 h-5 text-solo-blue\" />\n          <h3 className=\"font-semibold text-lg\">Morning Quest Briefing</h3>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Enable Morning Notifications</p>\n              <p className=\"text-sm text-gray-400\">Get daily quest prompts to start your hunter journey</p>\n            </div>\n            <Switch \n              checked={enableNotifications}\n              onCheckedChange={setEnableNotifications}\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Morning Briefing Time</label>\n            <Input\n              type=\"time\"\n              value={morningTime}\n              onChange={(e) => setMorningTime(e.target.value)}\n              className=\"bg-gray-800 border-gray-600 w-32\"\n            />\n            <p className=\"text-xs text-gray-400 mt-1\">When you want to receive your daily quest prompt</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Appearance Settings */}\n      <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Moon className=\"w-5 h-5 text-solo-blue\" />\n          <h3 className=\"font-semibold text-lg\">Appearance</h3>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Dark Mode</p>\n              <p className=\"text-sm text-gray-400\">Embrace the shadows like a true hunter</p>\n            </div>\n            <Switch \n              checked={darkMode}\n              onCheckedChange={setDarkMode}\n              disabled\n            />\n          </div>\n          \n          <div className=\"bg-gray-700/50 border border-gray-600 rounded-lg p-4\">\n            <p className=\"text-sm text-gray-300\">\n              <strong>Solo Leveling Theme Active</strong><br />\n              Your app is styled with the official Solo Leveling dark theme featuring neon blues and purples.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Data & Privacy */}\n      <div className=\"bg-gray-800/30 border border-gray-700 rounded-lg p-6\">\n        <h3 className=\"font-semibold text-lg mb-4\">Data & Privacy</h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-gray-700/50 border border-gray-600 rounded-lg p-4\">\n            <h4 className=\"font-medium text-solo-blue mb-2\">Firebase Integration</h4>\n            <p className=\"text-sm text-gray-300 mb-2\">\n              Your data is securely stored using Firebase and syncs across all your devices.\n            </p>\n            <ul className=\"text-xs text-gray-400 list-disc list-inside space-y-1\">\n              <li>Goals and categories are stored in Firestore</li>\n              <li>User authentication via Google</li>\n              <li>Real-time sync between devices</li>\n              <li>Data is private and only accessible to you</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6610},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex h-full w-64 flex-col border-r bg-background\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-1 flex-col overflow-hidden\", className)}\n    {...props}\n  />\n))\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center border-b px-6 py-4\", className)}\n    {...props}\n  />\n))\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarNav = React.forwardRef<\n  HTMLElement,\n  React.HTMLAttributes<HTMLElement>\n>(({ className, ...props }, ref) => (\n  <nav\n    ref={ref}\n    className={cn(\"flex-1 space-y-1 px-3 py-4\", className)}\n    {...props}\n  />\n))\nSidebarNav.displayName = \"SidebarNav\"\n\nconst SidebarNavItem = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    active?: boolean\n  }\n>(({ className, active, ...props }, ref) => (\n  <button\n    ref={ref}\n    className={cn(\n      \"flex w-full items-center rounded-lg px-3 py-2 text-sm font-medium transition-colors\",\n      active\n        ? \"bg-accent text-accent-foreground\"\n        : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarNavItem.displayName = \"SidebarNavItem\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarNav,\n  SidebarNavItem,\n}\n","size_bytes":1872},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport { useState, useEffect } from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X, CheckCircle, AlertTriangle, Info, XCircle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type ToastType = 'success' | 'error' | 'warning' | 'info';\n\ninterface Toast {\n  id: string;\n  type: ToastType;\n  title: string;\n  message?: string;\n  duration?: number;\n}\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\n// Toast system with show function and container\nconst toastIcons = {\n  success: CheckCircle,\n  error: XCircle,\n  warning: AlertTriangle,\n  info: Info\n};\n\nconst toastColors = {\n  success: 'from-green-500/80 to-emerald-500/80 border-green-500 text-green-100',\n  error: 'from-red-500/80 to-pink-500/80 border-red-500 text-red-100',\n  warning: 'from-yellow-500/80 to-orange-500/80 border-yellow-500 text-yellow-100',\n  info: 'from-cyan-500/80 to-blue-500/80 border-cyan-500 text-cyan-100'\n};\n\nfunction ToastItem({ toast, onClose }: { toast: Toast; onClose: (id: string) => void }) {\n  const Icon = toastIcons[toast.type];\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose(toast.id);\n    }, toast.duration || 4000);\n\n    return () => clearTimeout(timer);\n  }, [toast.id, toast.duration, onClose]);\n\n  return (\n    <div className={`bg-gradient-to-r ${toastColors[toast.type]} p-4 mb-3 shadow-xl border-2 rounded-lg backdrop-blur-md animate-in slide-in-from-right-full`}>\n      <div className=\"flex items-start space-x-3\">\n        <Icon className=\"w-5 h-5 mt-0.5 flex-shrink-0\" />\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white\">{toast.title}</h4>\n          {toast.message && (\n            <p className=\"text-sm text-white/90 mt-1\">{toast.message}</p>\n          )}\n        </div>\n        <button\n          onClick={() => onClose(toast.id)}\n          className=\"text-white/70 hover:text-white transition-colors\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nlet toastCallbacks: Array<(toast: Omit<Toast, 'id'>) => void> = [];\n\nexport function showToast(toast: Omit<Toast, 'id'>) {\n  toastCallbacks.forEach(callback => callback(toast));\n}\n\nexport function ToastContainer() {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  useEffect(() => {\n    const callback = (toast: Omit<Toast, 'id'>) => {\n      const newToast: Toast = {\n        ...toast,\n        id: Math.random().toString(36).substr(2, 9)\n      };\n      setToasts(prev => [...prev, newToast]);\n    };\n\n    toastCallbacks.push(callback);\n\n    return () => {\n      toastCallbacks = toastCallbacks.filter(cb => cb !== callback);\n    };\n  }, []);\n\n  const removeToast = (id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  };\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 space-y-2 max-w-sm\">\n      {toasts.map(toast => (\n        <ToastItem key={toast.id} toast={toast} onClose={removeToast} />\n      ))}\n    </div>\n  );\n}\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":7633},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/features/ShadowArchives.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { \n  Search, \n  Plus, \n  Star, \n  Edit3, \n  Trash2, \n  Save, \n  X, \n  Filter,\n  BookOpen,\n  Calendar,\n  Tag,\n  ChevronDown,\n  FileText\n} from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { useConfirmDialog } from \"@/components/ui/ConfirmDialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface Note {\n  id: string;\n  title: string;\n  content: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n  category: 'strategy' | 'reflection' | 'plan' | 'idea';\n  starred: boolean;\n}\n\nexport function ShadowArchives() {\n  const queryClient = useQueryClient();\n  const { showConfirm, confirmDialog } = useConfirmDialog();\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingNote, setEditingNote] = useState<string | null>(null);\n  const [filterDropdownOpen, setFilterDropdownOpen] = useState(false);\n  const [newTagInput, setNewTagInput] = useState('');\n  \n  // Archive categories - load from localStorage and listen for updates\n  const [archiveCategories, setArchiveCategories] = useState(() => {\n    const saved = localStorage.getItem('hunter-archive-categories');\n    return saved ? JSON.parse(saved) : [\n      { id: 'strategy', name: 'Battle Strategies', icon: '⚡', description: 'Combat tactics and planning' },\n      { id: 'reflection', name: 'Hunter Reflections', icon: '🧠', description: 'Personal thoughts and insights' },\n      { id: 'plan', name: 'Quest Plans', icon: '📋', description: 'Mission planning and preparation' },\n      { id: 'idea', name: 'Shadow Ideas', icon: '💡', description: 'Creative thoughts and concepts' }\n    ];\n  });\n\n  // Listen for category updates from Settings\n  useEffect(() => {\n    const handleCategoryUpdate = (event: CustomEvent) => {\n      if (event.detail.archiveCategories) {\n        setArchiveCategories(event.detail.archiveCategories);\n      }\n    };\n\n    window.addEventListener('categoriesUpdated', handleCategoryUpdate as EventListener);\n    return () => window.removeEventListener('categoriesUpdated', handleCategoryUpdate as EventListener);\n  }, []);\n  \n  const [newNote, setNewNote] = useState({\n    title: '',\n    content: '',\n    category: 'plan' as Note['category'],\n    tags: [] as string[]\n  });\n\n  const [editData, setEditData] = useState({\n    title: '',\n    content: '',\n    tags: [] as string[]\n  });\n\n  // Fetch notes from database\n  const { data: notes = [], isLoading } = useQuery({\n    queryKey: ['/api/notes'],\n    queryFn: async () => {\n      const response = await fetch('/api/notes');\n      if (!response.ok) throw new Error('Failed to fetch notes');\n      return response.json();\n    }\n  });\n\n  // Create note mutation\n  const createNoteMutation = useMutation({\n    mutationFn: async (noteData: any) => {\n      const response = await fetch('/api/notes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(noteData)\n      });\n      if (!response.ok) throw new Error('Failed to create note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setIsCreating(false);\n      setNewNote({\n        title: '',\n        content: '',\n        category: 'plan',\n        tags: []\n      });\n      showToast({\n        type: 'success',\n        title: 'Archive Created',\n        message: 'Your Hunter knowledge has been preserved!'\n      });\n    }\n  });\n\n  // Update note mutation\n  const updateNoteMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setEditingNote(null);\n      showToast({\n        type: 'success',\n        title: 'Archive Updated',\n        message: 'Your knowledge has been updated!'\n      });\n    }\n  });\n\n  // Delete note mutation\n  const deleteNoteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      showToast({\n        type: 'success',\n        title: 'Archive Deleted',\n        message: 'Knowledge entry has been removed'\n      });\n    }\n  });\n\n  // Toggle star mutation\n  const toggleStarMutation = useMutation({\n    mutationFn: async ({ id, starred }: { id: string; starred: boolean }) => {\n      const response = await fetch(`/api/notes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ starred: !starred })\n      });\n      if (!response.ok) throw new Error('Failed to update note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n    }\n  });\n\n  const categories = [\n    { id: 'all', name: 'All Archives', icon: FileText, color: 'text-gray-400', bgColor: 'bg-gray-500/20' },\n    { id: 'strategy', name: 'Battle Strategies', icon: BookOpen, color: 'text-blue-400', bgColor: 'bg-blue-500/20' },\n    { id: 'reflection', name: 'Hunter Reflections', icon: Star, color: 'text-purple-400', bgColor: 'bg-purple-500/20' },\n    { id: 'plan', name: 'Quest Plans', icon: Calendar, color: 'text-green-400', bgColor: 'bg-green-500/20' },\n    { id: 'idea', name: 'Shadow Ideas', icon: Plus, color: 'text-amber-400', bgColor: 'bg-amber-500/20' }\n  ];\n\n  const filteredNotes = notes.filter((note: Note) => {\n    const matchesSearch = note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         note.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesCategory = selectedCategory === 'all' || note.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleCreateNote = () => {\n    if (!newNote.title.trim()) {\n      showToast({\n        type: 'warning',\n        title: 'Title Required',\n        message: 'Please enter a title for your archive'\n      });\n      return;\n    }\n\n    createNoteMutation.mutate({\n      ...newNote,\n      starred: false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    });\n  };\n\n  const handleEditNote = (note: Note) => {\n    setEditingNote(note.id);\n    setEditData({\n      title: note.title,\n      content: note.content,\n      tags: note.tags\n    });\n  };\n\n  const handleUpdateNote = () => {\n    if (!editData.title.trim()) {\n      showToast({\n        type: 'warning',\n        title: 'Title Required',\n        message: 'Please enter a title for your archive'\n      });\n      return;\n    }\n\n    updateNoteMutation.mutate({\n      id: editingNote!,\n      data: {\n        ...editData,\n        updatedAt: new Date().toISOString()\n      }\n    });\n  };\n\n  const handleDeleteNote = (id: string) => {\n    showConfirm(\n      'Delete Archive',\n      'Are you sure you want to delete this knowledge entry? This action cannot be undone.',\n      () => deleteNoteMutation.mutate(id)\n    );\n  };\n\n  const handleToggleStar = (note: Note) => {\n    toggleStarMutation.mutate({ id: note.id, starred: note.starred });\n  };\n\n  const addTagToNewNote = () => {\n    if (newTagInput.trim() && !newNote.tags.includes(newTagInput.trim())) {\n      setNewNote(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTagInput.trim()]\n      }));\n      setNewTagInput('');\n    }\n  };\n\n  const removeTagFromNewNote = (tagToRemove: string) => {\n    setNewNote(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const addTagToEditNote = () => {\n    if (newTagInput.trim() && !editData.tags.includes(newTagInput.trim())) {\n      setEditData(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTagInput.trim()]\n      }));\n      setNewTagInput('');\n    }\n  };\n\n  const removeTagFromEditNote = (tagToRemove: string) => {\n    setEditData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: '2-digit', \n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"h-full bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white overflow-hidden\">\n      {/* Header Section */}\n      <div className=\"bg-gradient-to-r from-purple-900/50 to-blue-900/50 border-b border-purple-500/30 p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <BookOpen className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold font-['Orbitron'] bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n                SHADOW ARCHIVES\n              </h1>\n              <p className=\"text-gray-400 text-sm\">Preserve your Hunter's knowledge</p>\n            </div>\n          </div>\n          \n          <button\n            onClick={() => setIsCreating(true)}\n            className=\"bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 flex items-center space-x-2 shadow-lg\"\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>NEW ENTRY</span>\n          </button>\n        </div>\n\n        {/* Search and Filter Bar */}\n        <div className=\"flex flex-col md:flex-row gap-4 mt-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search your archives...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full bg-gray-800/60 border border-gray-600 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none transition-colors\"\n            />\n          </div>\n          \n          <div className=\"relative\">\n            <button\n              onClick={() => setFilterDropdownOpen(!filterDropdownOpen)}\n              className=\"bg-gray-800/60 border border-gray-600 rounded-lg px-4 py-3 text-white flex items-center space-x-2 hover:border-purple-400 transition-colors min-w-[200px] justify-between\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-5 h-5\" />\n                <span>{categories.find(c => c.id === selectedCategory)?.name || 'All Archives'}</span>\n              </div>\n              <ChevronDown className=\"w-4 h-4\" />\n            </button>\n            \n            {filterDropdownOpen && (\n              <div className=\"absolute top-full mt-2 right-0 bg-gray-800 border border-gray-600 rounded-lg shadow-xl z-20 min-w-[200px]\">\n                {categories.map(category => {\n                  const IconComponent = category.icon;\n                  return (\n                    <button\n                      key={category.id}\n                      onClick={() => {\n                        setSelectedCategory(category.id);\n                        setFilterDropdownOpen(false);\n                      }}\n                      className={`w-full text-left px-4 py-3 hover:bg-gray-700 transition-colors flex items-center space-x-3 ${\n                        selectedCategory === category.id ? 'bg-gray-700' : ''\n                      }`}\n                    >\n                      <IconComponent className={`w-5 h-5 ${category.color}`} />\n                      <span className=\"text-white\">{category.name}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-purple-500 border-t-transparent\"></div>\n          </div>\n        ) : filteredNotes.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <BookOpen className=\"w-12 h-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-300 mb-3\">No Archives Found</h3>\n            <p className=\"text-gray-400 mb-6\">Start documenting your Hunter journey</p>\n            <button\n              onClick={() => setIsCreating(true)}\n              className=\"bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200\"\n            >\n              CREATE YOUR FIRST ENTRY\n            </button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredNotes.map((note: Note) => {\n              const category = categories.find(c => c.id === note.category);\n              const IconComponent = category?.icon || FileText;\n              \n              return (\n                <div\n                  key={note.id}\n                  className=\"bg-gradient-to-br from-gray-800/60 to-gray-900/60 border border-gray-700 rounded-xl p-6 hover:border-purple-500/50 transition-all duration-200 group\"\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 ${category?.bgColor} rounded-lg flex items-center justify-center`}>\n                        <IconComponent className={`w-5 h-5 ${category?.color}`} />\n                      </div>\n                      <div className=\"flex-1\">\n                        {editingNote === note.id ? (\n                          <input\n                            type=\"text\"\n                            value={editData.title}\n                            onChange={(e) => setEditData(prev => ({ ...prev, title: e.target.value }))}\n                            className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-white text-sm font-semibold w-full\"\n                          />\n                        ) : (\n                          <h3 className=\"font-semibold text-white group-hover:text-purple-300 transition-colors\">\n                            {note.title}\n                          </h3>\n                        )}\n                        <p className=\"text-xs text-gray-400 capitalize\">{category?.name}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <button\n                        onClick={() => handleToggleStar(note)}\n                        className={`p-1 rounded transition-colors ${\n                          note.starred ? 'text-yellow-400 hover:text-yellow-300' : 'text-gray-400 hover:text-yellow-400'\n                        }`}\n                      >\n                        <Star className={`w-4 h-4 ${note.starred ? 'fill-current' : ''}`} />\n                      </button>\n                      \n                      {editingNote === note.id ? (\n                        <>\n                          <button\n                            onClick={handleUpdateNote}\n                            className=\"p-1 rounded text-green-400 hover:text-green-300 transition-colors\"\n                          >\n                            <Save className=\"w-4 h-4\" />\n                          </button>\n                          <button\n                            onClick={() => setEditingNote(null)}\n                            className=\"p-1 rounded text-gray-400 hover:text-gray-300 transition-colors\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </button>\n                        </>\n                      ) : (\n                        <>\n                          <button\n                            onClick={() => handleEditNote(note)}\n                            className=\"p-1 rounded text-blue-400 hover:text-blue-300 transition-colors\"\n                          >\n                            <Edit3 className=\"w-4 h-4\" />\n                          </button>\n                          <button\n                            onClick={() => handleDeleteNote(note.id)}\n                            className=\"p-1 rounded text-red-400 hover:text-red-300 transition-colors\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"mb-4\">\n                    {editingNote === note.id ? (\n                      <textarea\n                        value={editData.content}\n                        onChange={(e) => setEditData(prev => ({ ...prev, content: e.target.value }))}\n                        className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm resize-none\"\n                        rows={4}\n                      />\n                    ) : (\n                      <p className=\"text-gray-300 text-sm line-clamp-4\">\n                        {note.content || 'No content yet...'}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex flex-wrap gap-2 mb-3\">\n                    {editingNote === note.id ? (\n                      <div className=\"w-full\">\n                        <div className=\"flex flex-wrap gap-1 mb-2\">\n                          {editData.tags.map(tag => (\n                            <span\n                              key={tag}\n                              className=\"inline-flex items-center bg-purple-500/20 text-purple-300 text-xs px-2 py-1 rounded-full\"\n                            >\n                              <Tag className=\"w-3 h-3 mr-1\" />\n                              {tag}\n                              <button\n                                onClick={() => removeTagFromEditNote(tag)}\n                                className=\"ml-1 text-purple-400 hover:text-red-400\"\n                              >\n                                <X className=\"w-3 h-3\" />\n                              </button>\n                            </span>\n                          ))}\n                        </div>\n                        <div className=\"flex flex-col md:flex-row gap-2\">\n                          <input\n                            type=\"text\"\n                            placeholder=\"Add tag...\"\n                            value={newTagInput}\n                            onChange={(e) => setNewTagInput(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' && addTagToEditNote()}\n                            className=\"flex-1 bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm min-h-[44px]\"\n                            data-testid=\"input-edit-tag\"\n                          />\n                          <button\n                            onClick={addTagToEditNote}\n                            className=\"bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors min-h-[44px] touch-manipulation\"\n                            data-testid=\"button-edit-add-tag\"\n                          >\n                            Add\n                          </button>\n                        </div>\n                      </div>\n                    ) : (\n                      note.tags.map(tag => (\n                        <span\n                          key={tag}\n                          className=\"inline-flex items-center bg-purple-500/20 text-purple-300 text-xs px-2 py-1 rounded-full\"\n                        >\n                          <Tag className=\"w-3 h-3 mr-1\" />\n                          {tag}\n                        </span>\n                      ))\n                    )}\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-500 border-t border-gray-700 pt-3\">\n                    <div className=\"flex justify-between\">\n                      <span>Created: {formatDate(note.createdAt)}</span>\n                      <span>Updated: {formatDate(note.updatedAt)}</span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Create Note Modal */}\n      {isCreating && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-600 rounded-xl max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">Create New Archive</h2>\n              <button\n                onClick={() => setIsCreating(false)}\n                className=\"p-2 text-gray-400 hover:text-white transition-colors\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter archive title...\"\n                  value={newNote.title}\n                  onChange={(e) => setNewNote(prev => ({ ...prev, title: e.target.value }))}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select\n                  value={newNote.category}\n                  onChange={(e) => setNewNote(prev => ({ ...prev, category: e.target.value as Note['category'] }))}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white focus:border-purple-400 focus:outline-none cursor-pointer\"\n                >\n                  <option value=\"strategy\">Battle Strategies</option>\n                  <option value=\"reflection\">Hunter Reflections</option>\n                  <option value=\"plan\">Quest Plans</option>\n                  <option value=\"idea\">Shadow Ideas</option>\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Content</label>\n                <textarea\n                  placeholder=\"Document your Hunter knowledge...\"\n                  value={newNote.content}\n                  onChange={(e) => setNewNote(prev => ({ ...prev, content: e.target.value }))}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none resize-none\"\n                  rows={6}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Tags</label>\n                <div className=\"flex flex-wrap gap-2 mb-3\">\n                  {newNote.tags.map(tag => (\n                    <span\n                      key={tag}\n                      className=\"inline-flex items-center bg-purple-500/20 text-purple-300 text-sm px-3 py-1 rounded-full\"\n                    >\n                      <Tag className=\"w-4 h-4 mr-1\" />\n                      {tag}\n                      <button\n                        onClick={() => removeTagFromNewNote(tag)}\n                        className=\"ml-2 text-purple-400 hover:text-red-400\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n                <div className=\"flex flex-col md:flex-row gap-2 md:gap-2\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Add tag...\"\n                    value={newTagInput}\n                    onChange={(e) => setNewTagInput(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && addTagToNewNote()}\n                    className=\"flex-1 bg-gray-700 border border-gray-600 rounded-lg px-3 py-3 md:py-2 text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none min-h-[44px]\"\n                    data-testid=\"input-add-tag\"\n                  />\n                  <button\n                    onClick={addTagToNewNote}\n                    className=\"bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 md:py-2 rounded-lg font-medium transition-colors min-h-[44px] md:min-w-[100px] touch-manipulation\"\n                    data-testid=\"button-add-tag\"\n                  >\n                    Add Tag\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3 mt-6\">\n              <button\n                onClick={handleCreateNote}\n                disabled={createNoteMutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200\"\n              >\n                {createNoteMutation.isPending ? 'Creating...' : 'Create Archive'}\n              </button>\n              <button\n                onClick={() => setIsCreating(false)}\n                className=\"px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition-colors\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {confirmDialog}\n    </div>\n  );\n}","size_bytes":27261},"client/src/components/ui/MotivationalGreeting.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, RefreshCw, Star } from \"lucide-react\";\nimport { getRandomQuote, getDailyQuote, type MotivationalQuote } from \"@/data/motivationalQuotes\";\n\ninterface MotivationalGreetingProps {\n  userName?: string;\n  onClose: () => void;\n}\n\nexport function MotivationalGreeting({ userName = \"Hunter\", onClose }: MotivationalGreetingProps) {\n  const [currentQuote, setCurrentQuote] = useState<MotivationalQuote>(() => getDailyQuote());\n  const [greeting, setGreeting] = useState(\"\");\n\n  // Update quote daily - check if we need a new quote\n  useEffect(() => {\n    const checkForNewQuote = () => {\n      const today = new Date().toDateString();\n      const lastQuoteDate = localStorage.getItem('last-quote-date');\n      \n      if (lastQuoteDate !== today) {\n        const newQuote = getDailyQuote();\n        setCurrentQuote(newQuote);\n        localStorage.setItem('last-quote-date', today);\n      }\n    };\n    \n    checkForNewQuote();\n    \n    // Check every hour if we need a new quote (in case user keeps app open overnight)\n    const interval = setInterval(checkForNewQuote, 3600000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const hour = new Date().getHours();\n    let timeGreeting = \"\";\n    \n    if (hour < 12) {\n      timeGreeting = \"Good morning\";\n    } else if (hour < 17) {\n      timeGreeting = \"Good afternoon\";\n    } else {\n      timeGreeting = \"Good evening\";\n    }\n    \n    const greetings = [\n      `${timeGreeting}, ${userName}! Ready to level up today?`,\n      `${timeGreeting}, ${userName}! Time to conquer your quests!`,\n      `${timeGreeting}, ${userName}! Your adventure awaits!`,\n      `${timeGreeting}, ${userName}! Let's rise stronger than yesterday!`,\n      `${timeGreeting}, ${userName}! Today's battles will forge your legend!`,\n      `${timeGreeting}, ${userName}! The Shadow Monarch believes in you!`,\n      `${timeGreeting}, ${userName}! Every quest completed makes you stronger!`,\n      `${timeGreeting}, ${userName}! Time to show the world your true power!`\n    ];\n    \n    const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];\n    setGreeting(randomGreeting);\n  }, [userName]);\n\n  const handleNewQuote = () => {\n    setCurrentQuote(getRandomQuote());\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'perseverance': return 'text-red-400 bg-red-500/20 border-red-500/30';\n      case 'strength': return 'text-orange-400 bg-orange-500/20 border-orange-500/30';\n      case 'dreams': return 'text-blue-400 bg-blue-500/20 border-blue-500/30';\n      case 'courage': return 'text-green-400 bg-green-500/20 border-green-500/30';\n      case 'friendship': return 'text-purple-400 bg-purple-500/20 border-purple-500/30';\n      case 'growth': return 'text-cyan-400 bg-cyan-500/20 border-cyan-500/30';\n      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-2 sm:p-4\">\n      <div className=\"mystical-card max-w-2xl w-full max-h-[95vh] overflow-y-auto animate-in zoom-in-95 duration-300\">\n        <div className=\"p-3 sm:p-6 border-b border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                <Star className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n                  DAILY MOTIVATION\n                </h2>\n                <p className=\"text-gray-400 text-xs sm:text-sm\">Fuel your inner power</p>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-700 rounded-lg transition-colors flex-shrink-0\"\n            >\n              <X className=\"w-5 h-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"p-3 sm:p-6 space-y-4 sm:space-y-6\">\n          {/* Greeting */}\n          <div className=\"text-center\">\n            <h3 className=\"text-lg sm:text-2xl font-bold text-white mb-2 font-['Orbitron'] leading-tight\">\n              {greeting}\n            </h3>\n            <p className=\"text-gray-300 text-sm sm:text-base\">\n              Another day, another chance to prove your strength!\n            </p>\n          </div>\n\n          {/* Quote Section */}\n          <div className=\"mystical-card p-3 sm:p-6 bg-gradient-to-br from-gray-900/60 to-gray-800/40\">\n            <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n              <div className={`px-2 sm:px-3 py-1 rounded-full border text-xs font-semibold uppercase tracking-wider ${getCategoryColor(currentQuote.category)}`}>\n                {currentQuote.category}\n              </div>\n              <button\n                onClick={handleNewQuote}\n                className=\"p-2 hover:bg-gray-700 rounded-lg transition-colors group\"\n                title=\"Get new quote\"\n              >\n                <RefreshCw className=\"w-4 h-4 text-gray-400 group-hover:text-white transition-colors\" />\n              </button>\n            </div>\n\n            <blockquote className=\"text-white text-sm sm:text-lg leading-relaxed mb-3 sm:mb-4 font-medium\">\n              \"{currentQuote.text}\"\n            </blockquote>\n\n            <div className=\"text-right\">\n              <p className=\"text-cyan-400 font-semibold text-sm sm:text-base\">— {currentQuote.author}</p>\n              <p className=\"text-gray-400 text-xs sm:text-sm\">{currentQuote.anime}</p>\n            </div>\n          </div>\n\n          {/* Action Section */}\n          <div className=\"text-center space-y-3 sm:space-y-4\">\n            <p className=\"text-gray-300 text-sm sm:text-base\">\n              Every completed quest makes you stronger. Your Hunter journey starts now!\n            </p>\n            \n            <div className=\"flex flex-col md:flex-row gap-3\">\n              <button\n                onClick={handleNewQuote}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2\"\n              >\n                <RefreshCw className=\"w-5 h-5\" />\n                <span>New Quote</span>\n              </button>\n              <button\n                onClick={onClose}\n                className=\"flex-1 power-button\"\n              >\n                Start My Journey\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6819},"client/src/components/ui/Toast.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, CheckCircle, AlertTriangle, Info, XCircle } from \"lucide-react\";\n\nexport type ToastType = 'success' | 'error' | 'warning' | 'info';\n\ninterface Toast {\n  id: string;\n  type: ToastType;\n  title: string;\n  message?: string;\n  duration?: number;\n}\n\ninterface ToastProps {\n  toast: Toast;\n  onClose: (id: string) => void;\n}\n\nconst toastIcons = {\n  success: CheckCircle,\n  error: XCircle,\n  warning: AlertTriangle,\n  info: Info\n};\n\nconst toastColors = {\n  success: 'from-green-500/80 to-emerald-500/80 border-green-500 text-green-100',\n  error: 'from-red-500/80 to-pink-500/80 border-red-500 text-red-100',\n  warning: 'from-yellow-500/80 to-orange-500/80 border-yellow-500 text-yellow-100',\n  info: 'from-cyan-500/80 to-blue-500/80 border-cyan-500 text-cyan-100'\n};\n\nfunction ToastItem({ toast, onClose }: ToastProps) {\n  const Icon = toastIcons[toast.type];\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose(toast.id);\n    }, toast.duration || 4000);\n\n    return () => clearTimeout(timer);\n  }, [toast.id, toast.duration, onClose]);\n\n  return (\n    <div className={`bg-gradient-to-r ${toastColors[toast.type]} p-4 mb-3 shadow-xl border-2 rounded-lg backdrop-blur-md animate-in slide-in-from-right-full`}>\n      <div className=\"flex items-start space-x-3\">\n        <Icon className=\"w-5 h-5 mt-0.5 flex-shrink-0\" />\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white\">{toast.title}</h4>\n          {toast.message && (\n            <p className=\"text-sm text-white/90 mt-1\">{toast.message}</p>\n          )}\n        </div>\n        <button\n          onClick={() => onClose(toast.id)}\n          className=\"text-white/70 hover:text-white transition-colors\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nlet toastCallbacks: Array<(toast: Omit<Toast, 'id'>) => void> = [];\n\nexport function showToast(toast: Omit<Toast, 'id'>) {\n  toastCallbacks.forEach(callback => callback(toast));\n}\n\nexport function ToastContainer() {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  useEffect(() => {\n    const callback = (toast: Omit<Toast, 'id'>) => {\n      const newToast: Toast = {\n        ...toast,\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9)\n      };\n      setToasts(prev => [...prev, newToast]);\n    };\n\n    toastCallbacks.push(callback);\n\n    return () => {\n      toastCallbacks = toastCallbacks.filter(cb => cb !== callback);\n    };\n  }, []);\n\n  const removeToast = (id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  };\n\n  if (toasts.length === 0) return null;\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 max-w-sm w-full\">\n      {toasts.map(toast => (\n        <ToastItem key={toast.id} toast={toast} onClose={removeToast} />\n      ))}\n    </div>\n  );\n}","size_bytes":2872},"client/src/data/motivationalQuotes.ts":{"content":"export interface MotivationalQuote {\n  text: string;\n  author: string;\n  anime: string;\n  category: 'perseverance' | 'strength' | 'dreams' | 'courage' | 'friendship' | 'growth';\n}\n\nexport const motivationalQuotes: MotivationalQuote[] = [\n  // Solo Leveling\n  {\n    text: \"Since I have a weapon, I'm not afraid anymore! There's nothing to fear.\",\n    author: \"Sung Jin-Woo\",\n    anime: \"Solo Leveling\",\n    category: \"courage\"\n  },\n  {\n    text: \"I've stood on the precipice of death plenty of times before.\",\n    author: \"Sung Jin-Woo\", \n    anime: \"Solo Leveling\",\n    category: \"strength\"\n  },\n  {\n    text: \"No matter how low-ranked the dungeon was, I was always fighting for my life.\",\n    author: \"Sung Jin-Woo\",\n    anime: \"Solo Leveling\", \n    category: \"perseverance\"\n  },\n  {\n    text: \"The weak have no rights or choices. Their only fate is to be relentlessly crushed by the strong.\",\n    author: \"Sung Jin-Woo\",\n    anime: \"Solo Leveling\",\n    category: \"strength\"\n  },\n  {\n    text: \"I will become stronger. I will keep growing until no one can ignore me.\",\n    author: \"Sung Jin-Woo\",\n    anime: \"Solo Leveling\",\n    category: \"growth\"\n  },\n\n  // Naruto\n  {\n    text: \"I'll never give up! That is my nindo, my ninja way!\",\n    author: \"Naruto Uzumaki\",\n    anime: \"Naruto\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"Believe in yourself and there will come a day when others will have no choice but to believe with you.\",\n    author: \"Naruto Uzumaki\",\n    anime: \"Naruto\",\n    category: \"dreams\"\n  },\n  {\n    text: \"Those who break the rules are scum, but those who abandon their friends are worse than scum.\",\n    author: \"Kakashi Hatake\",\n    anime: \"Naruto\",\n    category: \"friendship\"\n  },\n  {\n    text: \"If you don't believe in yourself, your work will never be enough.\",\n    author: \"Naruto Uzumaki\",\n    anime: \"Naruto\",\n    category: \"dreams\"\n  },\n  {\n    text: \"A smile is the easiest way out of a difficult situation.\",\n    author: \"Naruto Uzumaki\",\n    anime: \"Naruto\",\n    category: \"courage\"\n  },\n\n  // Attack on Titan\n  {\n    text: \"If you win, you live. If you lose, you die. If you don't fight, you can't win!\",\n    author: \"Eren Yeager\",\n    anime: \"Attack on Titan\",\n    category: \"courage\"\n  },\n  {\n    text: \"The world is merciless, and it's also very beautiful.\",\n    author: \"Mikasa Ackerman\",\n    anime: \"Attack on Titan\",\n    category: \"strength\"\n  },\n  {\n    text: \"It doesn't matter how hard the past was, you can always start over.\",\n    author: \"Hange Zoe\",\n    anime: \"Attack on Titan\",\n    category: \"growth\"\n  },\n  {\n    text: \"People who can't throw something important away can never hope to change anything.\",\n    author: \"Armin Arlert\",\n    anime: \"Attack on Titan\",\n    category: \"growth\"\n  },\n\n  // One Piece\n  {\n    text: \"No matter how hard or impossible it is, never lose sight of your goal.\",\n    author: \"Monkey D. Luffy\",\n    anime: \"One Piece\",\n    category: \"dreams\"\n  },\n  {\n    text: \"If you don't take risks, you can't create a future!\",\n    author: \"Monkey D. Luffy\",\n    anime: \"One Piece\",\n    category: \"courage\"\n  },\n  {\n    text: \"It's just pathetic to give up on something before you even give it a shot.\",\n    author: \"Roronoa Zoro\",\n    anime: \"One Piece\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"Being lonely is more painful than getting hurt.\",\n    author: \"Monkey D. Luffy\",\n    anime: \"One Piece\",\n    category: \"friendship\"\n  },\n\n  // Dragon Ball Z\n  {\n    text: \"I am the hope of the universe. I am the answer to all living things that cry out for peace.\",\n    author: \"Goku\",\n    anime: \"Dragon Ball Z\",\n    category: \"strength\"\n  },\n  {\n    text: \"Power comes in response to a need, not a desire. You have to create that need.\",\n    author: \"Goku\",\n    anime: \"Dragon Ball Z\",\n    category: \"growth\"\n  },\n  {\n    text: \"I do not fear this new challenge, rather like a true warrior I will rise to meet it.\",\n    author: \"Vegeta\",\n    anime: \"Dragon Ball Z\",\n    category: \"courage\"\n  },\n  {\n    text: \"You can take control of my mind and my body, but there is one thing a Saiyan always keeps... his PRIDE!\",\n    author: \"Vegeta\",\n    anime: \"Dragon Ball Z\",\n    category: \"strength\"\n  },\n  {\n    text: \"The harder you work for something, the greater you'll feel when you achieve it.\",\n    author: \"Gohan\",\n    anime: \"Dragon Ball Z\",\n    category: \"perseverance\"\n  },\n\n  // My Hero Academia\n  {\n    text: \"If you feel yourself hitting up against your limit, remember for what cause you clench your fists!\",\n    author: \"All Might\",\n    anime: \"My Hero Academia\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"A real hero always finds a way for justice to be served.\",\n    author: \"All Might\",\n    anime: \"My Hero Academia\",\n    category: \"courage\"\n  },\n  {\n    text: \"Whether you win or lose, you can always come out ahead by learning from the experience.\",\n    author: \"All Might\",\n    anime: \"My Hero Academia\",\n    category: \"growth\"\n  },\n\n  // Demon Slayer\n  {\n    text: \"No matter how many people you may lose, you have no choice but to go on living.\",\n    author: \"Tanjiro Kamado\",\n    anime: \"Demon Slayer\",\n    category: \"strength\"\n  },\n  {\n    text: \"Feel the rage. The powerful, pure rage of not being able to forgive will become your unswerving drive to take action.\",\n    author: \"Kyojuro Rengoku\",\n    anime: \"Demon Slayer\",\n    category: \"strength\"\n  },\n  {\n    text: \"Life is like a beautiful flower. You admire it and are enthralled by it, but eventually it wilts and dies.\",\n    author: \"Kyojuro Rengoku\",\n    anime: \"Demon Slayer\",\n    category: \"growth\"\n  },\n\n  // Fullmetal Alchemist\n  {\n    text: \"There's no such thing as a painless lesson, they just don't exist.\",\n    author: \"Edward Elric\",\n    anime: \"Fullmetal Alchemist\",\n    category: \"growth\"\n  },\n  {\n    text: \"A lesson without pain is meaningless. For you cannot gain anything without sacrificing something else in return.\",\n    author: \"Edward Elric\",\n    anime: \"Fullmetal Alchemist\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"Mankind's greatest scientific discovery may be its ability to choose.\",\n    author: \"Roy Mustang\",\n    anime: \"Fullmetal Alchemist\",\n    category: \"growth\"\n  },\n\n  // Hunter x Hunter\n  {\n    text: \"Being able to cry for his companion. I was correct that you are a true friend.\",\n    author: \"Killua Zoldyck\",\n    anime: \"Hunter x Hunter\",\n    category: \"friendship\"\n  },\n  {\n    text: \"You should enjoy the little detours to the fullest. Because that's where you'll find the things more important than what you want.\",\n    author: \"Ging Freecss\",\n    anime: \"Hunter x Hunter\",\n    category: \"dreams\"\n  },\n\n  // Jujutsu Kaisen\n  {\n    text: \"Even if you are consumed by doubt, think of yourself as the protagonist.\",\n    author: \"Satoru Gojo\",\n    anime: \"Jujutsu Kaisen\",\n    category: \"courage\"\n  },\n  {\n    text: \"When you die, you're alone. But that's not the end. When the people around you die, that's when you truly become alone.\",\n    author: \"Yuji Itadori\",\n    anime: \"Jujutsu Kaisen\",\n    category: \"friendship\"\n  },\n\n  // Universal Motivational Themes\n  {\n    text: \"Life is not a game of luck. If you wanna win, work hard.\",\n    author: \"Sora\",\n    anime: \"No Game No Life\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"There's no shame in falling down! True shame is to not stand up again!\",\n    author: \"Shintaro Midorima\",\n    anime: \"Kuroko's Basketball\",\n    category: \"courage\"\n  },\n  {\n    text: \"Don't beg for things. Do it yourself, or else you won't get anything.\",\n    author: \"Riza Hawkeye\",\n    anime: \"Fullmetal Alchemist\",\n    category: \"strength\"\n  },\n  {\n    text: \"If you really want to be strong... Stop caring about what your surrounding thinks of you!\",\n    author: \"Saitama\",\n    anime: \"One Punch Man\",\n    category: \"strength\"\n  },\n  {\n    text: \"Knowing you're different is only the beginning. If you accept these differences you'll be able to get past them.\",\n    author: \"Edward Elric\",\n    anime: \"Fullmetal Alchemist\",\n    category: \"growth\"\n  },\n  {\n    text: \"When you hit the point of no return, that's the moment it truly becomes a journey.\",\n    author: \"Hinata Shouyou\",\n    anime: \"Haikyuu!!\",\n    category: \"dreams\"\n  },\n  {\n    text: \"If you don't share someone's pain, you can never understand them.\",\n    author: \"Nagato\",\n    anime: \"Naruto\",\n    category: \"friendship\"\n  },\n  {\n    text: \"We are all like fireworks: we climb, we shine and always go our separate ways.\",\n    author: \"Tamaki Suoh\",\n    anime: \"Ouran High School Host Club\",\n    category: \"dreams\"\n  },\n  {\n    text: \"The moment you think of giving up, think of the reason why you held on so long.\",\n    author: \"Natsu Dragneel\",\n    anime: \"Fairy Tail\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"Fear is not evil. It tells you what weakness is. And once you know your weakness, you can become stronger as well as kinder.\",\n    author: \"Gildarts Clive\",\n    anime: \"Fairy Tail\",\n    category: \"strength\"\n  },\n  {\n    text: \"It's not the face that makes someone a monster, it's the choices they make with their lives.\",\n    author: \"Naruto Uzumaki\",\n    anime: \"Naruto\",\n    category: \"growth\"\n  },\n  {\n    text: \"Hard work is what makes your dreams come true.\",\n    author: \"Rock Lee\",\n    anime: \"Naruto\",\n    category: \"perseverance\"\n  },\n  {\n    text: \"The true measure of a shinobi is not how he lives but how he dies.\",\n    author: \"Jiraiya\",\n    anime: \"Naruto\",\n    category: \"strength\"\n  },\n  {\n    text: \"People's lives don't end when they die, it ends when they lose faith.\",\n    author: \"Itachi Uchiha\",\n    anime: \"Naruto\",\n    category: \"dreams\"\n  },\n  {\n    text: \"When people are protecting something truly special to them, they truly can become as strong as they can be.\",\n    author: \"Haku\",\n    anime: \"Naruto\",\n    category: \"strength\"\n  },\n  {\n    text: \"Even the mightiest of warriors experiences fear. But the true warrior fights despite his fear.\",\n    author: \"Hokage\",\n    anime: \"Naruto\",\n    category: \"courage\"\n  },\n  {\n    text: \"You and I have memories longer and deeper than the road that stretches out ahead.\",\n    author: \"Kakashi Hatake\",\n    anime: \"Naruto\",\n    category: \"friendship\"\n  },\n  {\n    text: \"It's not always possible to do what we want to do, but it's important to believe in something before you actually do it.\",\n    author: \"Might Guy\",\n    anime: \"Naruto\",\n    category: \"dreams\"\n  },\n  {\n    text: \"A person grows up when he's able to overcome hardships. Protection is important, but there are some things that a person must learn on his own.\",\n    author: \"Jiraiya\",\n    anime: \"Naruto\",\n    category: \"growth\"\n  },\n  {\n    text: \"In order to escape a road of solitude, one has to work hard, and forge a new path with their own power!\",\n    author: \"Rock Lee\",\n    anime: \"Naruto\",\n    category: \"perseverance\"\n  }\n];\n\nexport function getRandomQuote(): MotivationalQuote {\n  return motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n}\n\nexport function getQuoteByCategory(category: MotivationalQuote['category']): MotivationalQuote {\n  const categoryQuotes = motivationalQuotes.filter(quote => quote.category === category);\n  return categoryQuotes[Math.floor(Math.random() * categoryQuotes.length)];\n}\n\nexport function getDailyQuote(): MotivationalQuote {\n  // Use date as seed for consistent daily quote that changes each day\n  const today = new Date();\n  const dateString = `${today.getFullYear()}-${today.getMonth()}-${today.getDate()}`;\n  let hash = 0;\n  \n  // Create hash from date string\n  for (let i = 0; i < dateString.length; i++) {\n    const char = dateString.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  // Ensure positive index\n  const index = Math.abs(hash) % motivationalQuotes.length;\n  return motivationalQuotes[index];\n}","size_bytes":11830},"client/src/components/calendar/WeeklyView.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight, Plus, Calendar as CalendarIcon } from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  date: string;\n  type: 'main-mission' | 'training' | 'side-quest';\n  completed: boolean;\n}\n\ninterface WeeklyViewProps {\n  goals?: Array<{\n    id: string;\n    title: string;\n    dueDate?: string;\n    completed: boolean;\n    category: string;\n  }>;\n}\n\nexport function WeeklyView({ goals = [] }: WeeklyViewProps) {\n  const [currentWeekStart, setCurrentWeekStart] = useState(() => {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const diff = today.getDate() - dayOfWeek;\n    return new Date(today.setDate(diff));\n  });\n  \n  const [isAddingEvent, setIsAddingEvent] = useState(false);\n  const [newEventTitle, setNewEventTitle] = useState('');\n  const [newEventType, setNewEventType] = useState<'main-mission' | 'training' | 'side-quest'>('main-mission');\n  const [newEventDate, setNewEventDate] = useState(() => {\n    const today = new Date();\n    return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;\n  });\n  \n  const queryClient = useQueryClient();\n\n  // Fetch events from database\n  const { data: calendarEvents = [], isLoading } = useQuery({\n    queryKey: ['/api/calendar-events'],\n    queryFn: async () => {\n      const response = await fetch('/api/calendar-events');\n      if (!response.ok) throw new Error('Failed to fetch events');\n      return response.json();\n    }\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      const response = await fetch('/api/calendar-events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(eventData)\n      });\n      if (!response.ok) throw new Error('Failed to create event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/calendar-events/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  // Delete event mutation\n  const deleteEventMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/calendar-events/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  const getWeekDates = (startDate: Date) => {\n    const dates = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      dates.push(date);\n    }\n    return dates;\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    const newStart = new Date(currentWeekStart);\n    newStart.setDate(currentWeekStart.getDate() + (direction === 'next' ? 7 : -7));\n    setCurrentWeekStart(newStart);\n  };\n\n  const getEventsForDate = (date: Date) => {\n    const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    \n    // Combine calendar events and goals with due dates\n    const events = [...calendarEvents];\n    \n    goals.forEach(goal => {\n      if (goal.dueDate === dateStr) {\n        events.push({\n          id: `goal-${goal.id}`,\n          title: goal.title,\n          date: dateStr,\n          type: goal.category as 'main-mission' | 'training' | 'side-quest' || 'main-mission',\n          completed: goal.completed\n        });\n      }\n    });\n    \n    return events.filter(event => event.date === dateStr);\n  };\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'main-mission': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'training': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'side-quest': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const handleAddEvent = () => {\n    if (!newEventTitle.trim()) return;\n    \n    createEventMutation.mutate({\n      title: newEventTitle,\n      date: newEventDate,\n      type: newEventType,\n      completed: false\n    }, {\n      onSuccess: () => {\n        setNewEventTitle('');\n        setIsAddingEvent(false);\n        const today = new Date();\n        setNewEventDate(`${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`);\n        \n        showToast({\n          type: 'success',\n          title: 'Quest Event Added!',\n          message: 'Event added to your weekly schedule'\n        });\n      },\n      onError: () => {\n        showToast({\n          type: 'error',\n          title: 'Failed to Add Event',\n          message: 'Please try again'\n        });\n      }\n    });\n  };\n\n  const handleToggleEventComplete = (eventId: string) => {\n    const event = calendarEvents.find((e: CalendarEvent) => e.id === eventId);\n    if (!event) return;\n    \n    updateEventMutation.mutate({\n      id: eventId,\n      data: { completed: !event.completed }\n    }, {\n      onSuccess: () => {\n        showToast({\n          type: 'success',\n          title: !event.completed ? 'Quest Completed!' : 'Quest Reopened',\n          message: `\"${event.title}\" marked as ${!event.completed ? 'completed' : 'pending'}`\n        });\n      }\n    });\n  };\n\n  const handleDeleteEvent = (eventId: string) => {\n    const event = calendarEvents.find((e: CalendarEvent) => e.id === eventId);\n    if (!event) return;\n    \n    deleteEventMutation.mutate(eventId, {\n      onSuccess: () => {\n        showToast({\n          type: 'success',\n          title: 'Event Deleted',\n          message: `\"${event.title}\" has been removed`\n        });\n      }\n    });\n  };\n\n  const weekDates = getWeekDates(currentWeekStart);\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date();\n\n  return (\n    <div className=\"w-full space-y-4\">\n      {/* Weekly Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl sm:text-2xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              WEEKLY MISSIONS\n            </span>\n          </h2>\n          <p className=\"text-gray-400 text-sm\">Your 7-day quest overview</p>\n        </div>\n        <button \n          className=\"power-button text-sm px-3 py-2\"\n          onClick={() => setIsAddingEvent(true)}\n        >\n          <Plus className=\"w-4 h-4 mr-1\" />\n          Add\n        </button>\n      </div>\n\n      {/* Week Navigation - Mobile Optimized */}\n      <div className=\"mystical-card p-2 md:p-4\">\n        <div className=\"flex items-center justify-between mb-2 md:mb-4\">\n          <button \n            onClick={() => navigateWeek('prev')}\n            className=\"p-2 md:p-2 hover:bg-gray-700 rounded-lg transition-colors touch-manipulation min-h-[44px] min-w-[44px] flex items-center justify-center\"\n            data-testid=\"button-prev-week\"\n          >\n            <ChevronLeft className=\"w-5 h-5 text-cyan-400\" />\n          </button>\n          \n          <div className=\"text-center flex-1 px-2\">\n            <h3 className=\"text-sm md:text-lg font-bold text-white font-['Orbitron'] leading-tight\">\n              {weekDates[0].toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </h3>\n            <p className=\"text-gray-400 text-xs md:text-sm leading-tight mt-1\">\n              {weekDates[0].toLocaleDateString()} - {weekDates[6].toLocaleDateString()}\n            </p>\n          </div>\n          \n          <button \n            onClick={() => navigateWeek('next')}\n            className=\"p-2 md:p-2 hover:bg-gray-700 rounded-lg transition-colors touch-manipulation min-h-[44px] min-w-[44px] flex items-center justify-center\"\n            data-testid=\"button-next-week\"\n          >\n            <ChevronRight className=\"w-5 h-5 text-cyan-400\" />\n          </button>\n        </div>\n\n        {/* Innovative Mobile-First Week Grid */}\n        <div className=\"grid grid-cols-7 gap-px md:gap-2 bg-gray-800/20 p-px md:p-0 rounded-lg md:rounded-none\">\n          {weekDates.map((date, index) => {\n            const isToday = date.toDateString() === today.toDateString();\n            const dayEvents = getEventsForDate(date);\n            \n            return (\n              <div\n                key={date.toISOString()}\n                className={`\n                  bg-gray-900/80 md:bg-transparent\n                  p-1.5 md:p-3 rounded-md md:rounded-lg \n                  min-h-[90px] md:min-h-[120px] \n                  transition-all duration-200 \n                  flex flex-col\n                  ${isToday \n                    ? 'bg-gradient-to-br from-cyan-500/30 to-blue-500/20 border-2 border-cyan-400/60 shadow-lg shadow-cyan-500/10' \n                    : 'hover:bg-white/5 md:border md:border-gray-700/30 hover:border-gray-600/50'\n                  }\n                `}\n              >\n                {/* Day Header - Improved */}\n                <div className=\"text-center mb-2 flex-shrink-0\">\n                  <div className=\"text-[10px] md:text-xs text-gray-400 font-semibold uppercase tracking-wide\">\n                    {dayNames[index]}\n                  </div>\n                  <div className={`\n                    text-sm md:text-base font-bold mt-0.5\n                    ${isToday \n                      ? 'text-cyan-300 bg-cyan-500/20 rounded-full w-6 h-6 md:w-7 md:h-7 flex items-center justify-center mx-auto' \n                      : 'text-white'\n                    }\n                  `}>\n                    {date.getDate()}\n                  </div>\n                </div>\n\n                {/* Events - Better Mobile Layout */}\n                <div className=\"space-y-1 flex-1 overflow-hidden\">\n                  {dayEvents.slice(0, 3).map(event => (\n                    <div\n                      key={event.id}\n                      className={`\n                        text-[9px] md:text-xs px-1.5 py-1 rounded-md\n                        ${getEventTypeColor(event.type)} \n                        ${event.completed ? 'opacity-60 line-through' : ''} \n                        cursor-pointer transition-all duration-150\n                        hover:scale-105 active:scale-95\n                        border border-white/10\n                        backdrop-blur-sm\n                      `}\n                      onClick={() => !event.id.startsWith('goal-') && handleToggleEventComplete(event.id)}\n                      title={event.title}\n                    >\n                      <div className=\"truncate leading-tight\">\n                        {event.title.length > 8 ? event.title.substring(0, 8) + '...' : event.title}\n                      </div>\n                    </div>\n                  ))}\n                  {dayEvents.length > 3 && (\n                    <div className=\"text-[8px] md:text-xs text-gray-400 text-center py-1 bg-gray-800/30 rounded-md\">\n                      +{dayEvents.length - 3} more\n                    </div>\n                  )}\n                  {dayEvents.length === 0 && (\n                    <div className=\"text-[8px] md:text-xs text-gray-600 text-center py-2 border border-dashed border-gray-700/30 rounded-md\">\n                      No events\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Add Event Modal */}\n      {isAddingEvent && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <div className=\"mystical-card max-w-md w-full\">\n            <div className=\"p-4 border-b border-gray-700\">\n              <h3 className=\"text-lg font-bold text-white font-['Orbitron']\">Add Quest Event</h3>\n            </div>\n            \n            <div className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Quest Title\n                </label>\n                <input\n                  type=\"text\"\n                  value={newEventTitle}\n                  onChange={(e) => setNewEventTitle(e.target.value)}\n                  className=\"w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-cyan-500 focus:outline-none\"\n                  placeholder=\"Enter quest title...\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Date\n                </label>\n                <input\n                  type=\"date\"\n                  value={newEventDate}\n                  onChange={(e) => setNewEventDate(e.target.value)}\n                  className=\"w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-cyan-500 focus:outline-none\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Quest Type\n                </label>\n                <select\n                  value={newEventType}\n                  onChange={(e) => setNewEventType(e.target.value as any)}\n                  className=\"w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:border-cyan-500 focus:outline-none\"\n                >\n                  <option value=\"main-mission\">Main Mission</option>\n                  <option value=\"training\">Training</option>\n                  <option value=\"side-quest\">Side Quest</option>\n                </select>\n              </div>\n              \n              <div className=\"flex space-x-3 pt-4\">\n                <button\n                  onClick={() => setIsAddingEvent(false)}\n                  className=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleAddEvent}\n                  className=\"flex-1 power-button\"\n                  disabled={!newEventTitle.trim()}\n                >\n                  Add Quest\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15226},"public/sw.js":{"content":"// Solo Leveling Productivity App - Service Worker\nconst CACHE_NAME = 'solo-hunter-v1.2.0';\nconst OFFLINE_URL = '/offline.html';\n\n// Assets to cache for offline functionality\nconst CACHE_URLS = [\n  '/',\n  '/dashboard',\n  '/settings',\n  '/calendar',\n  '/analytics',\n  '/notes',\n  '/streaks',\n  '/offline.html',\n  '/manifest.json',\n  '/favicon.ico',\n  '/icon-192x192.png',\n  '/icon-512x512.png'\n];\n\n// Install event - cache critical resources\nself.addEventListener('install', (event) => {\n  console.log('Service Worker: Installing...');\n  \n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Service Worker: Caching critical resources');\n        // Cache resources individually to avoid failures\n        const cachePromises = CACHE_URLS.map(url => {\n          return cache.add(url).catch(err => {\n            console.warn(`Failed to cache ${url}:`, err);\n            return Promise.resolve(); // Continue with other resources\n          });\n        });\n        return Promise.all(cachePromises);\n      })\n      .then(() => {\n        console.log('Service Worker: Installation complete');\n        self.skipWaiting();\n      })\n      .catch((error) => {\n        console.error('Service Worker: Cache installation failed', error);\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker: Activating...');\n  \n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Deleting old cache', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      console.log('Service Worker: Activated');\n      return self.clients.claim();\n    })\n  );\n});\n\n// Fetch event - serve cached content when offline\nself.addEventListener('fetch', (event) => {\n  // Skip non-GET requests\n  if (event.request.method !== 'GET') return;\n  \n  // Skip chrome-extension and other non-http requests\n  if (!event.request.url.startsWith('http')) return;\n  \n  event.respondWith(\n    caches.match(event.request)\n      .then((cachedResponse) => {\n        // Return cached version if available\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n        \n        // Otherwise, fetch from network\n        return fetch(event.request)\n          .then((response) => {\n            // Don't cache non-successful responses\n            if (!response || response.status !== 200 || response.type !== 'basic') {\n              return response;\n            }\n            \n            // Clone response for caching\n            const responseToCache = response.clone();\n            \n            caches.open(CACHE_NAME)\n              .then((cache) => {\n                cache.put(event.request, responseToCache);\n              });\n            \n            return response;\n          })\n          .catch(() => {\n            // Return offline page for navigation requests\n            if (event.request.mode === 'navigate') {\n              return caches.match(OFFLINE_URL);\n            }\n          });\n      })\n  );\n});\n\n// Push notification event\nself.addEventListener('push', (event) => {\n  console.log('Service Worker: Push notification received');\n  \n  const options = {\n    body: event.data ? event.data.text() : 'New quest awaits, Hunter!',\n    icon: '/icons/icon-192x192.png',\n    badge: '/icons/badge-72x72.png',\n    vibrate: [200, 100, 200],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: '1'\n    },\n    actions: [\n      {\n        action: 'view',\n        title: 'View Quest',\n        icon: '/icons/action-view.png'\n      },\n      {\n        action: 'dismiss',\n        title: 'Dismiss',\n        icon: '/icons/action-dismiss.png'\n      }\n    ],\n    tag: 'hunter-notification',\n    requireInteraction: true\n  };\n  \n  event.waitUntil(\n    self.registration.showNotification('Solo Hunter Alert', options)\n  );\n});\n\n// Notification click event\nself.addEventListener('notificationclick', (event) => {\n  console.log('Service Worker: Notification clicked');\n  \n  event.notification.close();\n  \n  if (event.action === 'view') {\n    // Open the app\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  } else if (event.action === 'dismiss') {\n    // Just close the notification\n    return;\n  } else {\n    // Default action - open app\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n\n// Background sync for offline actions\nself.addEventListener('sync', (event) => {\n  console.log('Service Worker: Background sync triggered');\n  \n  if (event.tag === 'background-sync') {\n    event.waitUntil(\n      // Sync any pending data when online\n      syncPendingData()\n    );\n  }\n});\n\n// Periodic background sync for notifications\nself.addEventListener('periodicsync', (event) => {\n  if (event.tag === 'hunter-reminders') {\n    event.waitUntil(\n      checkAndSendReminders()\n    );\n  }\n});\n\n// Helper function to sync pending data\nasync function syncPendingData() {\n  try {\n    // Get pending data from IndexedDB or localStorage\n    const pendingActions = await getPendingActions();\n    \n    for (const action of pendingActions) {\n      try {\n        await fetch(action.url, {\n          method: action.method,\n          headers: action.headers,\n          body: action.body\n        });\n        \n        // Remove from pending list on success\n        await removePendingAction(action.id);\n      } catch (error) {\n        console.error('Failed to sync action:', error);\n      }\n    }\n  } catch (error) {\n    console.error('Background sync failed:', error);\n  }\n}\n\n// Helper function to check and send reminders\nasync function checkAndSendReminders() {\n  try {\n    // Check if it's time for daily reminders\n    const now = new Date();\n    const reminderTime = 9; // 9 AM\n    \n    if (now.getHours() === reminderTime) {\n      await self.registration.showNotification('Daily Hunter Check-in', {\n        body: 'Time to review your quests and plan your day!',\n        icon: '/icons/icon-192x192.png',\n        badge: '/icons/badge-72x72.png',\n        vibrate: [200, 100, 200],\n        tag: 'daily-reminder',\n        actions: [\n          {\n            action: 'open-app',\n            title: 'Open App'\n          }\n        ]\n      });\n    }\n  } catch (error) {\n    console.error('Reminder check failed:', error);\n  }\n}\n\n// Helper functions for pending actions\nasync function getPendingActions() {\n  // Implementation would use IndexedDB\n  return [];\n}\n\nasync function removePendingAction(id) {\n  // Implementation would use IndexedDB\n  return true;\n}\n\n// Message handling for communication with main thread\nself.addEventListener('message', (event) => {\n  console.log('Service Worker: Message received', event.data);\n  \n  if (event.data && event.data.type) {\n    switch (event.data.type) {\n      case 'SKIP_WAITING':\n        self.skipWaiting();\n        break;\n        \n      case 'GET_VERSION':\n        event.ports[0].postMessage({ version: CACHE_NAME });\n        break;\n        \n      case 'CACHE_URLS':\n        event.waitUntil(\n          caches.open(CACHE_NAME)\n            .then(cache => cache.addAll(event.data.urls))\n        );\n        break;\n        \n      case 'SCHEDULE_NOTIFICATION':\n        scheduleNotification(event.data.notification);\n        break;\n        \n      default:\n        console.log('Unknown message type:', event.data.type);\n    }\n  }\n});\n\n// Schedule notification function\nfunction scheduleNotification(notificationData) {\n  const { title, body, delay = 0, tag = 'scheduled' } = notificationData;\n  \n  setTimeout(() => {\n    self.registration.showNotification(title, {\n      body,\n      icon: '/icons/icon-192x192.png',\n      badge: '/icons/badge-72x72.png',\n      vibrate: [200, 100, 200],\n      tag,\n      requireInteraction: true\n    });\n  }, delay);\n}\n\nconsole.log('Service Worker: Script loaded successfully');","size_bytes":7936},"client/src/components/features/APKGenerator.tsx":{"content":"import { useState } from 'react';\nimport { Download, Smartphone, ExternalLink, CheckCircle } from 'lucide-react';\n// import { showToast } from '@/components/ui/toast';\n\nexport function APKGenerator() {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationStep, setGenerationStep] = useState(0);\n\n  const generateAPK = async () => {\n    setIsGenerating(true);\n    setGenerationStep(0);\n\n    // Step 1: Check PWA readiness\n    setGenerationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Step 2: Generate app bundle\n    setGenerationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Step 3: Create APK file\n    setGenerationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Complete\n    setGenerationStep(4);\n    setIsGenerating(false);\n\n    console.log('APK generation complete! Check instructions below.');\n  };\n\n  const steps = [\n    'Preparing app configuration...',\n    'Checking PWA compatibility...',\n    'Building Android package...',\n    'Finalizing APK file...',\n    'Ready for installation!'\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-600 rounded-xl p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-blue-600 rounded-lg flex items-center justify-center\">\n            <Smartphone className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">Android APK Generator</h3>\n            <p className=\"text-sm text-gray-400\">Generate installable Android app</p>\n          </div>\n        </div>\n      </div>\n\n      {/* APK Generation Status */}\n      {isGenerating && (\n        <div className=\"mb-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className=\"animate-spin rounded-full h-5 w-5 border-2 border-blue-500 border-t-transparent\"></div>\n            <span className=\"text-blue-300 font-medium\">Generating APK...</span>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {steps.map((step, index) => (\n              <div key={index} className={`flex items-center space-x-2 text-sm ${\n                index < generationStep ? 'text-green-400' :\n                index === generationStep ? 'text-blue-400' : 'text-gray-500'\n              }`}>\n                {index < generationStep ? (\n                  <CheckCircle className=\"w-4 h-4\" />\n                ) : (\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    index === generationStep ? 'border-blue-400 border-t-transparent animate-spin' : 'border-gray-600'\n                  }`} />\n                )}\n                <span>{step}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Generation Complete */}\n      {!isGenerating && generationStep === 4 && (\n        <div className=\"mb-6 p-4 bg-green-500/10 border border-green-500/30 rounded-lg\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <CheckCircle className=\"w-5 h-5 text-green-400\" />\n            <span className=\"text-green-300 font-medium\">APK Ready!</span>\n          </div>\n          <p className=\"text-sm text-gray-300\">\n            Your Solo Hunter APK has been generated. Follow the installation steps below.\n          </p>\n        </div>\n      )}\n\n      {/* APK Generation Methods */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Generation Options</h4>\n        \n        {/* Method 1: PWA Installer */}\n        <div className=\"bg-gray-700/30 rounded-lg p-4\">\n          <h5 className=\"text-white font-medium mb-2\">📱 PWA Installation (Recommended)</h5>\n          <p className=\"text-sm text-gray-300 mb-3\">\n            Install directly from browser - works immediately with notifications\n          </p>\n          <ol className=\"text-xs text-gray-400 space-y-1 mb-3\">\n            <li>1. Open this app in Chrome on Android</li>\n            <li>2. Tap \"Install App\" when prompted</li>\n            <li>3. Or tap menu → \"Add to Home Screen\"</li>\n            <li>4. Enable notifications in app settings</li>\n          </ol>\n          <button\n            onClick={() => console.log('Install prompt should appear automatically in Chrome')}\n            className=\"text-blue-400 text-sm hover:text-blue-300 flex items-center space-x-1\"\n          >\n            <ExternalLink className=\"w-3 h-3\" />\n            <span>Help with PWA installation</span>\n          </button>\n        </div>\n\n        {/* Method 2: APK Builder Tools */}\n        <div className=\"bg-gray-700/30 rounded-lg p-4\">\n          <h5 className=\"text-white font-medium mb-2\">🔧 APK Builder Tools</h5>\n          <p className=\"text-sm text-gray-300 mb-3\">\n            Use online tools to convert this PWA to APK\n          </p>\n          <div className=\"space-y-2\">\n            <a\n              href=\"https://www.pwabuilder.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"block text-blue-400 text-sm hover:text-blue-300 flex items-center space-x-1\"\n            >\n              <ExternalLink className=\"w-3 h-3\" />\n              <span>PWABuilder (Microsoft)</span>\n            </a>\n            <a\n              href=\"https://appmaker.merku.love\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"block text-blue-400 text-sm hover:text-blue-300 flex items-center space-x-1\"\n            >\n              <ExternalLink className=\"w-3 h-3\" />\n              <span>PWA to APK Generator</span>\n            </a>\n          </div>\n        </div>\n\n        {/* Method 3: Manual APK Creation */}\n        <div className=\"bg-gray-700/30 rounded-lg p-4\">\n          <h5 className=\"text-white font-medium mb-2\">⚙️ Manual APK Creation</h5>\n          <p className=\"text-sm text-gray-300 mb-3\">\n            Advanced: Build APK with Android Studio\n          </p>\n          <button\n            onClick={generateAPK}\n            disabled={isGenerating}\n            className={`w-full px-4 py-2 rounded-lg font-medium transition-colors ${\n              isGenerating \n                ? 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                : 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white'\n            }`}\n            data-testid=\"button-generate-apk\"\n          >\n            {isGenerating ? 'Generating...' : 'Generate Configuration'}\n          </button>\n        </div>\n      </div>\n\n      {/* Installation Instructions */}\n      <div className=\"mt-6 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg\">\n        <h4 className=\"text-yellow-300 font-medium mb-2\">⚠️ Installation Notes</h4>\n        <ul className=\"text-xs text-gray-300 space-y-1\">\n          <li>• Enable \"Install from unknown sources\" in Android settings</li>\n          <li>• PWA installation is recommended for best notification support</li>\n          <li>• APK files from third-party tools may have limited functionality</li>\n          <li>• Always download APKs from trusted sources only</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":7383},"client/src/components/calendar/VerticalWeekView.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight, Plus, Calendar as CalendarIcon, X, Save } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  date: string;\n  type: 'main-mission' | 'training' | 'side-quest';\n  completed: boolean;\n}\n\ninterface VerticalWeekViewProps {\n  goals?: Array<{\n    id: string;\n    title: string;\n    dueDate?: string;\n    completed: boolean;\n    category: string;\n  }>;\n}\n\nexport function VerticalWeekView({ goals = [] }: VerticalWeekViewProps) {\n  const [currentWeekStart, setCurrentWeekStart] = useState(() => {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const diff = today.getDate() - dayOfWeek;\n    return new Date(today.setDate(diff));\n  });\n  \n  const [isAddingEvent, setIsAddingEvent] = useState(false);\n  const [newEventTitle, setNewEventTitle] = useState('');\n  const [newEventType, setNewEventType] = useState<'main-mission' | 'training' | 'side-quest'>('main-mission');\n  const [newEventDate, setNewEventDate] = useState(() => {\n    const today = new Date();\n    return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;\n  });\n  \n  const queryClient = useQueryClient();\n\n  // Fetch events from database\n  const { data: calendarEvents = [], isLoading } = useQuery({\n    queryKey: ['/api/calendar-events'],\n    queryFn: async () => {\n      const response = await fetch('/api/calendar-events');\n      if (!response.ok) throw new Error('Failed to fetch events');\n      return response.json();\n    }\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      const response = await fetch('/api/calendar-events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(eventData)\n      });\n      if (!response.ok) throw new Error('Failed to create event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/calendar-events/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update event');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar-events'] });\n    }\n  });\n\n  const getWeekDates = (startDate: Date) => {\n    const dates = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      dates.push(date);\n    }\n    return dates;\n  };\n\n  const navigateWeek = (direction: number) => {\n    const newStart = new Date(currentWeekStart);\n    newStart.setDate(currentWeekStart.getDate() + (direction * 7));\n    setCurrentWeekStart(newStart);\n  };\n\n  const getEventsForDate = (date: Date) => {\n    const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    \n    // Combine calendar events and goals with due dates\n    const events = [...calendarEvents];\n    \n    goals.forEach(goal => {\n      if (goal.dueDate === dateStr) {\n        events.push({\n          id: `goal-${goal.id}`,\n          title: goal.title,\n          date: dateStr,\n          type: goal.category as 'main-mission' | 'training' | 'side-quest' || 'main-mission',\n          completed: goal.completed\n        });\n      }\n    });\n    \n    return events.filter(event => event.date === dateStr);\n  };\n\n  const getEventStyles = (type: string) => {\n    switch (type) {\n      case 'main-mission': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'training': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'side-quest': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const handleAddEvent = () => {\n    if (!newEventTitle.trim()) return;\n    \n    createEventMutation.mutate({\n      title: newEventTitle,\n      date: newEventDate,\n      type: newEventType,\n      completed: false\n    }, {\n      onSuccess: () => {\n        setNewEventTitle('');\n        setIsAddingEvent(false);\n        const today = new Date();\n        setNewEventDate(`${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`);\n      }\n    });\n  };\n\n  const toggleEventCompletion = (eventId: string, currentCompleted: boolean) => {\n    updateEventMutation.mutate({\n      id: eventId,\n      data: { completed: !currentCompleted }\n    });\n  };\n\n  const weekDays = getWeekDates(currentWeekStart);\n\n  const isDateToday = (date: Date) => {\n    const today = new Date();\n    return date.toDateString() === today.toDateString();\n  };\n\n  const getWeekEnd = () => {\n    const end = new Date(currentWeekStart);\n    end.setDate(currentWeekStart.getDate() + 6);\n    return end;\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl p-6 border border-gray-700\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">Weekly Quest Calendar</h2>\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => navigateWeek(-1)}\n            className=\"p-2 text-gray-400 hover:text-white rounded-lg hover:bg-gray-700 transition-colors\"\n            data-testid=\"button-prev-week\"\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n          </button>\n          \n          <span className=\"text-sm text-gray-300 px-3\">\n            {currentWeekStart.toLocaleDateString()} - {getWeekEnd().toLocaleDateString()}\n          </span>\n          \n          <button\n            onClick={() => navigateWeek(1)}\n            className=\"p-2 text-gray-400 hover:text-white rounded-lg hover:bg-gray-700 transition-colors\"\n            data-testid=\"button-next-week\"\n          >\n            <ChevronRight className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Vertical Week Layout - More Space for Tasks */}\n      <div className=\"space-y-4 mb-4\">\n        {weekDays.map((day, index) => {\n          const dayEvents = getEventsForDate(day);\n          const isToday = isDateToday(day);\n          \n          return (\n            <div\n              key={index}\n              className={`p-4 rounded-lg border transition-all duration-200 ${\n                isToday \n                  ? 'bg-blue-600/20 border-blue-500/50 shadow-lg shadow-blue-500/20' \n                  : 'bg-gray-800/50 border-gray-700/50 hover:border-gray-600/50'\n              }`}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-gray-400 uppercase\">\n                      {day.toLocaleDateString('en', { weekday: 'short' })}\n                    </div>\n                    <div className={`text-lg font-bold ${isToday ? 'text-blue-300' : 'text-white'}`}>\n                      {day.getDate()}\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-300\">\n                    {day.toLocaleDateString('en', { month: 'long', day: 'numeric' })}\n                    {isToday && <span className=\"ml-2 text-xs text-blue-400 bg-blue-500/20 px-2 py-1 rounded\">Today</span>}\n                  </div>\n                </div>\n                \n                {/* Add Event Button */}\n                <button\n                  onClick={() => {\n                    setNewEventDate(day.toISOString().split('T')[0]);\n                    setIsAddingEvent(true);\n                  }}\n                  className=\"px-3 py-1 text-xs border border-gray-600 text-gray-400 hover:border-gray-500 hover:text-gray-300 rounded transition-colors\"\n                  data-testid={`button-add-event-${index}`}\n                >\n                  <Plus className=\"w-3 h-3 inline mr-1\" />\n                  Add Event\n                </button>\n              </div>\n              \n              {/* Events Grid - More space for tasks, responsive columns */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3\">\n                {dayEvents.map((event, eventIndex) => (\n                  <div\n                    key={eventIndex}\n                    className={`text-sm p-3 rounded cursor-pointer transition-all duration-200 border ${\n                      event.completed \n                        ? 'bg-green-600/30 border-green-500/50 text-green-300 line-through'\n                        : getEventStyles(event.type)\n                    }`}\n                    onClick={() => toggleEventCompletion(event.id, event.completed)}\n                    title={event.title}\n                    data-testid={`event-${event.id}`}\n                  >\n                    <div className=\"font-medium mb-1\">{event.title}</div>\n                    <div className=\"text-xs text-gray-400 capitalize\">\n                      {event.type.replace('-', ' ')}\n                    </div>\n                  </div>\n                ))}\n                \n                {dayEvents.length === 0 && (\n                  <div className=\"col-span-full text-center py-6 text-gray-500 text-sm border-2 border-dashed border-gray-700 rounded-lg\">\n                    No events scheduled for this day\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Add Event Modal */}\n      {isAddingEvent && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-gray-800 rounded-lg p-6 w-full max-w-md border border-gray-700\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-bold text-white\">Add New Event</h3>\n              <button\n                onClick={() => setIsAddingEvent(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm text-gray-300 mb-2\">Event Title</label>\n                <input\n                  type=\"text\"\n                  value={newEventTitle}\n                  onChange={(e) => setNewEventTitle(e.target.value)}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white\"\n                  placeholder=\"Enter event title\"\n                  data-testid=\"input-event-title\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm text-gray-300 mb-2\">Date</label>\n                <input\n                  type=\"date\"\n                  value={newEventDate}\n                  onChange={(e) => setNewEventDate(e.target.value)}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white\"\n                  data-testid=\"input-event-date\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm text-gray-300 mb-2\">Type</label>\n                <select\n                  value={newEventType}\n                  onChange={(e) => setNewEventType(e.target.value as 'main-mission' | 'training' | 'side-quest')}\n                  className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white\"\n                  data-testid=\"select-event-type\"\n                >\n                  <option value=\"main-mission\">Main Mission</option>\n                  <option value=\"training\">Training</option>\n                  <option value=\"side-quest\">Side Quest</option>\n                </select>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={handleAddEvent}\n                  disabled={!newEventTitle.trim() || createEventMutation.isPending}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded transition-colors\"\n                  data-testid=\"button-save-event\"\n                >\n                  <Save className=\"w-4 h-4 inline mr-2\" />\n                  {createEventMutation.isPending ? 'Saving...' : 'Save Event'}\n                </button>\n                <button\n                  onClick={() => setIsAddingEvent(false)}\n                  className=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded transition-colors\"\n                  data-testid=\"button-cancel-event\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {isLoading && (\n        <div className=\"text-center py-8\">\n          <div className=\"text-gray-400\">Loading events...</div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13518},"client/src/components/features/CategoryCustomization.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Edit, Save, X, Plus } from 'lucide-react';\n\ninterface QuestCategory {\n  id: string;\n  name: string;\n  icon: string;\n  originalName: string;\n}\n\ninterface ShadowArchiveCategory {\n  id: string;\n  name: string;\n  icon: string;\n  description: string;\n}\n\nexport function CategoryCustomization() {\n  const [editingCategory, setEditingCategory] = useState<string | null>(null);\n  const [editingArchiveCategory, setEditingArchiveCategory] = useState<string | null>(null);\n  \n  const [questCategories, setQuestCategories] = useState<QuestCategory[]>(() => {\n    const saved = localStorage.getItem('hunter-quest-categories');\n    return saved ? JSON.parse(saved) : [\n      { id: 'main-mission', name: 'Main Mission', icon: '⚔️', originalName: 'Main Mission' },\n      { id: 'training', name: 'Training', icon: '🛡️', originalName: 'Training' },\n      { id: 'side-quest', name: 'Side Quest', icon: '⭐', originalName: 'Side Quest' }\n    ];\n  });\n\n  const [archiveCategories, setArchiveCategories] = useState<ShadowArchiveCategory[]>(() => {\n    const saved = localStorage.getItem('hunter-archive-categories');\n    return saved ? JSON.parse(saved) : [\n      { id: 'strategy', name: 'Battle Strategies', icon: '⚡', description: 'Combat tactics and planning' },\n      { id: 'reflection', name: 'Hunter Reflections', icon: '🧠', description: 'Personal thoughts and insights' },\n      { id: 'plan', name: 'Quest Plans', icon: '📋', description: 'Mission planning and preparation' },\n      { id: 'idea', name: 'Shadow Ideas', icon: '💡', description: 'Creative thoughts and concepts' }\n    ];\n  });\n\n  const [editForm, setEditForm] = useState({ name: '', icon: '' });\n  const [archiveEditForm, setArchiveEditForm] = useState({ name: '', icon: '', description: '' });\n\n  // Save to localStorage when categories change\n  useEffect(() => {\n    localStorage.setItem('hunter-quest-categories', JSON.stringify(questCategories));\n  }, [questCategories]);\n\n  useEffect(() => {\n    localStorage.setItem('hunter-archive-categories', JSON.stringify(archiveCategories));\n  }, [archiveCategories]);\n\n  const handleEditQuestCategory = (categoryId: string) => {\n    const category = questCategories.find(c => c.id === categoryId);\n    if (category) {\n      setEditingCategory(categoryId);\n      setEditForm({ name: category.name, icon: category.icon });\n    }\n  };\n\n  const handleSaveQuestCategory = () => {\n    if (!editForm.name.trim()) return;\n\n    const updatedCategories = questCategories.map(cat => \n      cat.id === editingCategory \n        ? { ...cat, name: editForm.name, icon: editForm.icon || cat.icon }\n        : cat\n    );\n    \n    setQuestCategories(updatedCategories);\n    localStorage.setItem('hunter-quest-categories', JSON.stringify(updatedCategories));\n    \n    // Trigger a storage event for other components to listen to\n    window.dispatchEvent(new CustomEvent('categoriesUpdated', { \n      detail: { questCategories: updatedCategories } \n    }));\n\n    setEditingCategory(null);\n    setEditForm({ name: '', icon: '' });\n  };\n\n  const handleEditArchiveCategory = (categoryId: string) => {\n    const category = archiveCategories.find(c => c.id === categoryId);\n    if (category) {\n      setEditingArchiveCategory(categoryId);\n      setArchiveEditForm({ name: category.name, icon: category.icon, description: category.description });\n    }\n  };\n\n  const handleSaveArchiveCategory = () => {\n    if (!archiveEditForm.name.trim()) return;\n\n    const updatedArchiveCategories = archiveCategories.map(cat => \n      cat.id === editingArchiveCategory \n        ? { \n            ...cat, \n            name: archiveEditForm.name, \n            icon: archiveEditForm.icon || cat.icon,\n            description: archiveEditForm.description || cat.description\n          }\n        : cat\n    );\n    \n    setArchiveCategories(updatedArchiveCategories);\n    localStorage.setItem('hunter-archive-categories', JSON.stringify(updatedArchiveCategories));\n    \n    // Trigger a storage event for other components to listen to\n    window.dispatchEvent(new CustomEvent('categoriesUpdated', { \n      detail: { archiveCategories: updatedArchiveCategories } \n    }));\n\n    setEditingArchiveCategory(null);\n    setArchiveEditForm({ name: '', icon: '', description: '' });\n  };\n\n  const resetToDefaults = () => {\n    const defaultQuest = [\n      { id: 'main-mission', name: 'Main Mission', icon: '⚔️', originalName: 'Main Mission' },\n      { id: 'training', name: 'Training', icon: '🛡️', originalName: 'Training' },\n      { id: 'side-quest', name: 'Side Quest', icon: '⭐', originalName: 'Side Quest' }\n    ];\n    \n    const defaultArchive = [\n      { id: 'strategy', name: 'Battle Strategies', icon: '⚡', description: 'Combat tactics and planning' },\n      { id: 'reflection', name: 'Hunter Reflections', icon: '🧠', description: 'Personal thoughts and insights' },\n      { id: 'plan', name: 'Quest Plans', icon: '📋', description: 'Mission planning and preparation' },\n      { id: 'idea', name: 'Shadow Ideas', icon: '💡', description: 'Creative thoughts and concepts' }\n    ];\n\n    setQuestCategories(defaultQuest);\n    setArchiveCategories(defaultArchive);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quest Categories */}\n      <div className=\"mystical-card p-4 sm:p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n              <Edit className=\"w-5 h-5 text-white\" />\n            </div>\n            <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n              <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                QUEST CATEGORIES\n              </span>\n            </h2>\n          </div>\n          <button\n            onClick={resetToDefaults}\n            className=\"text-xs px-3 py-1 border border-gray-600 text-gray-400 hover:text-white hover:border-gray-500 rounded transition-colors\"\n          >\n            Reset to Defaults\n          </button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {questCategories.map((category) => (\n            <div key={category.id} className=\"bg-gray-800/50 p-3 rounded-lg border border-gray-700/50\">\n              {editingCategory === category.id ? (\n                <div className=\"space-y-3\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                    <input\n                      type=\"text\"\n                      value={editForm.name}\n                      onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm placeholder-gray-400 focus:border-purple-400 focus:outline-none\"\n                      placeholder=\"Category name\"\n                      data-testid={`input-quest-category-name-${category.id}`}\n                    />\n                    <input\n                      type=\"text\"\n                      value={editForm.icon}\n                      onChange={(e) => setEditForm(prev => ({ ...prev, icon: e.target.value }))}\n                      className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm placeholder-gray-400 focus:border-purple-400 focus:outline-none\"\n                      placeholder=\"Icon (emoji)\"\n                      data-testid={`input-quest-category-icon-${category.id}`}\n                    />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={handleSaveQuestCategory}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors\"\n                      data-testid={`button-save-quest-category-${category.id}`}\n                    >\n                      <Save className=\"w-4 h-4 mr-1 inline\" />\n                      Save\n                    </button>\n                    <button\n                      onClick={() => setEditingCategory(null)}\n                      className=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors\"\n                      data-testid={`button-cancel-quest-category-${category.id}`}\n                    >\n                      <X className=\"w-4 h-4 mr-1 inline\" />\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-xl\">{category.icon}</span>\n                    <div>\n                      <div className=\"text-white font-medium text-sm sm:text-base\">{category.name}</div>\n                      <div className=\"text-gray-400 text-xs capitalize\">{category.id.replace('-', ' ')}</div>\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => handleEditQuestCategory(category.id)}\n                    className=\"p-2 text-gray-400 hover:text-white rounded transition-colors\"\n                    data-testid={`button-edit-quest-category-${category.id}`}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Shadow Archive Categories */}\n      <div className=\"mystical-card p-4 sm:p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-lg flex items-center justify-center\">\n            <Edit className=\"w-5 h-5 text-white\" />\n          </div>\n          <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n            <span className=\"bg-gradient-to-r from-indigo-400 to-purple-400 bg-clip-text text-transparent\">\n              SHADOW ARCHIVE CATEGORIES\n            </span>\n          </h2>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {archiveCategories.map((category) => (\n            <div key={category.id} className=\"bg-gray-800/50 p-3 rounded-lg border border-gray-700/50\">\n              {editingArchiveCategory === category.id ? (\n                <div className=\"space-y-3\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                    <input\n                      type=\"text\"\n                      value={archiveEditForm.name}\n                      onChange={(e) => setArchiveEditForm(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm placeholder-gray-400 focus:border-purple-400 focus:outline-none\"\n                      placeholder=\"Category name\"\n                      data-testid={`input-archive-category-name-${category.id}`}\n                    />\n                    <input\n                      type=\"text\"\n                      value={archiveEditForm.icon}\n                      onChange={(e) => setArchiveEditForm(prev => ({ ...prev, icon: e.target.value }))}\n                      className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm placeholder-gray-400 focus:border-purple-400 focus:outline-none\"\n                      placeholder=\"Icon (emoji)\"\n                      data-testid={`input-archive-category-icon-${category.id}`}\n                    />\n                  </div>\n                  <input\n                    type=\"text\"\n                    value={archiveEditForm.description}\n                    onChange={(e) => setArchiveEditForm(prev => ({ ...prev, description: e.target.value }))}\n                    className=\"w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm placeholder-gray-400 focus:border-purple-400 focus:outline-none\"\n                    placeholder=\"Description\"\n                    data-testid={`input-archive-category-desc-${category.id}`}\n                  />\n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={handleSaveArchiveCategory}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors\"\n                      data-testid={`button-save-archive-category-${category.id}`}\n                    >\n                      <Save className=\"w-4 h-4 mr-1 inline\" />\n                      Save\n                    </button>\n                    <button\n                      onClick={() => setEditingArchiveCategory(null)}\n                      className=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors\"\n                      data-testid={`button-cancel-archive-category-${category.id}`}\n                    >\n                      <X className=\"w-4 h-4 mr-1 inline\" />\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-xl\">{category.icon}</span>\n                    <div>\n                      <div className=\"text-white font-medium text-sm sm:text-base\">{category.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{category.description}</div>\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => handleEditArchiveCategory(category.id)}\n                    className=\"p-2 text-gray-400 hover:text-white rounded transition-colors\"\n                    data-testid={`button-edit-archive-category-${category.id}`}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14278},"client/src/components/features/PhoneNotifications.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Bell, BellOff, Clock, Plus, Trash2, Check, X } from 'lucide-react';\nimport { showToast } from '@/components/ui/toast';\n\ninterface ReminderTime {\n  id: string;\n  time: string;\n  label: string;\n  enabled: boolean;\n}\n\nexport function PhoneNotifications() {\n  const [permission, setPermission] = useState<NotificationPermission>('default');\n  const [reminderTimes, setReminderTimes] = useState<ReminderTime[]>(() => {\n    const saved = localStorage.getItem('hunter-reminder-times');\n    return saved ? JSON.parse(saved) : [\n      { id: '1', time: '09:00', label: 'Morning Quest Check', enabled: true },\n      { id: '2', time: '13:00', label: 'Afternoon Reminder', enabled: true },\n      { id: '3', time: '18:00', label: 'Evening Review', enabled: true }\n    ];\n  });\n  const [newTime, setNewTime] = useState('');\n  const [newLabel, setNewLabel] = useState('');\n  const [isAddingNew, setIsAddingNew] = useState(false);\n\n  useEffect(() => {\n    if ('Notification' in window) {\n      setPermission(Notification.permission);\n    }\n    setupNotificationScheduler();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('hunter-reminder-times', JSON.stringify(reminderTimes));\n    setupNotificationScheduler();\n  }, [reminderTimes]);\n\n  const requestPermission = async () => {\n    if (!('Notification' in window)) {\n      showToast({ title: 'Notifications not supported on this device', type: 'error' });\n      return;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      setPermission(permission);\n      \n      if (permission === 'granted') {\n        showToast({ title: 'Notifications enabled successfully!', type: 'success' });\n        setupNotificationScheduler();\n      } else {\n        showToast({ title: 'Notification permission denied', type: 'error' });\n      }\n    } catch (error) {\n      showToast({ title: 'Failed to request notification permission', type: 'error' });\n    }\n  };\n\n  const setupNotificationScheduler = () => {\n    if (typeof window === 'undefined' || permission !== 'granted') return;\n\n    try {\n      // Clear existing intervals\n      const intervals = (window as any).hunterIntervals || [];\n      intervals.forEach((id: number) => {\n        if (typeof id === 'number') {\n          clearTimeout(id);\n        }\n      });\n      (window as any).hunterIntervals = [];\n\n      // Set up new intervals for each enabled reminder\n      reminderTimes.forEach(reminder => {\n        if (!reminder?.enabled || !reminder?.time || !reminder?.label) return;\n\n        try {\n          const [hours, minutes] = reminder.time.split(':').map(Number);\n          \n          if (isNaN(hours) || isNaN(minutes)) {\n            console.warn('Invalid time format:', reminder.time);\n            return;\n          }\n          \n          const scheduleNotification = () => {\n            const now = new Date();\n            const scheduledTime = new Date();\n            scheduledTime.setHours(hours, minutes, 0, 0);\n\n            // If the time has passed today, schedule for tomorrow\n            if (scheduledTime <= now) {\n              scheduledTime.setDate(scheduledTime.getDate() + 1);\n            }\n\n            const timeUntilNotification = scheduledTime.getTime() - now.getTime();\n\n            const timeoutId = setTimeout(() => {\n              showNotification(reminder.label);\n              // Schedule next day\n              scheduleNotification();\n            }, timeUntilNotification);\n\n            if (typeof window !== 'undefined') {\n              (window as any).hunterIntervals = (window as any).hunterIntervals || [];\n              (window as any).hunterIntervals.push(timeoutId);\n            }\n          };\n\n          scheduleNotification();\n        } catch (error) {\n          console.error('Error setting up notification for reminder:', reminder, error);\n        }\n      });\n    } catch (error) {\n      console.error('Error in setupNotificationScheduler:', error);\n    }\n  };\n\n  const showNotification = (message: string) => {\n    if (typeof window === 'undefined' || permission !== 'granted' || !message) return;\n\n    try {\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification('🎯 Solo Hunter', {\n          body: message,\n          icon: '/icon-192x192.png',\n          tag: 'hunter-reminder',\n          requireInteraction: false\n        });\n      }\n    } catch (error) {\n      console.error('Failed to show notification:', error);\n    }\n  };\n\n  const addReminderTime = () => {\n    if (!newTime || !newLabel.trim()) {\n      showToast({ \n        title: 'Missing Information', \n        message: 'Please enter both time and label for the reminder',\n        type: 'warning' \n      });\n      return;\n    }\n\n    try {\n      // Validate time format\n      const [hours, minutes] = newTime.split(':').map(Number);\n      if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {\n        showToast({ \n          title: 'Invalid Time', \n          message: 'Please enter a valid time in HH:MM format',\n          type: 'error' \n        });\n        return;\n      }\n\n      const newReminder: ReminderTime = {\n        id: Date.now().toString(),\n        time: newTime,\n        label: newLabel.trim(),\n        enabled: true\n      };\n\n      console.log('Adding new reminder:', newReminder);\n      setReminderTimes(prev => [...prev, newReminder]);\n      setNewTime('');\n      setNewLabel('');\n      setIsAddingNew(false);\n      \n      showToast({ \n        title: 'Reminder Added!', \n        message: `\"${newReminder.label}\" scheduled for ${newReminder.time}`,\n        type: 'success' \n      });\n    } catch (error) {\n      console.error('Error adding reminder:', error);\n      showToast({ \n        title: 'Failed to Add Reminder', \n        message: 'Please try again',\n        type: 'error' \n      });\n    }\n  };\n\n  const toggleReminder = (id: string) => {\n    setReminderTimes(prev => prev.map(reminder => \n      reminder.id === id ? { ...reminder, enabled: !reminder.enabled } : reminder\n    ));\n  };\n\n  const deleteReminder = (id: string) => {\n    setReminderTimes(prev => prev.filter(reminder => reminder.id !== id));\n    showToast({ title: 'Reminder deleted', type: 'success' });\n  };\n\n  const testNotification = async () => {\n    console.log('Test notification clicked, permission:', permission);\n    \n    if (!('Notification' in window)) {\n      showToast({ \n        title: 'Not Supported', \n        message: 'Notifications are not supported on this device',\n        type: 'error' \n      });\n      return;\n    }\n\n    if (permission !== 'granted') {\n      showToast({ \n        title: 'Permission Required', \n        message: 'Please enable notifications first',\n        type: 'warning' \n      });\n      return;\n    }\n\n    try {\n      // Show browser notification\n      const notification = new Notification('🎯 Solo Hunter - Test Alert', {\n        body: 'Notification system is working perfectly! You will receive reminders at your scheduled times.',\n        icon: '/icon-192x192.png',\n        tag: 'hunter-test',\n        requireInteraction: false,\n        silent: false\n      });\n\n      // Auto close after 5 seconds\n      setTimeout(() => {\n        notification.close();\n      }, 5000);\n\n      showToast({ \n        title: 'Test Notification Sent!', \n        message: 'Check your browser or device notifications',\n        type: 'success' \n      });\n      \n      console.log('Test notification sent successfully');\n    } catch (error) {\n      console.error('Notification error:', error);\n      showToast({ \n        title: 'Notification Failed', \n        message: `Error: ${error}`,\n        type: 'error' \n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Permission Status */}\n      <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n        <div className=\"flex items-center space-x-3\">\n          {permission === 'granted' ? (\n            <Bell className=\"w-5 h-5 text-green-400\" />\n          ) : (\n            <BellOff className=\"w-5 h-5 text-red-400\" />\n          )}\n          <div>\n            <div className=\"text-white font-medium text-sm\">Notification Status</div>\n            <div className={`text-xs ${\n              permission === 'granted' ? 'text-green-400' : 'text-red-400'\n            }`}>\n              {permission === 'granted' ? 'Enabled' : 'Disabled'}\n            </div>\n          </div>\n        </div>\n        {permission !== 'granted' && (\n          <button\n            onClick={requestPermission}\n            className=\"px-3 py-1 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white text-xs rounded-lg transition-colors\"\n            data-testid=\"button-enable-notifications\"\n          >\n            Enable\n          </button>\n        )}\n      </div>\n\n      {/* Test Notification */}\n      {permission === 'granted' && (\n        <button\n          onClick={testNotification}\n          className=\"w-full px-4 py-2 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white text-sm rounded-lg transition-colors\"\n          data-testid=\"button-test-notification\"\n        >\n          Send Test Notification\n        </button>\n      )}\n\n      {/* Reminder Times */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-white font-medium text-sm\">Scheduled Reminders</h3>\n          <button\n            onClick={() => setIsAddingNew(true)}\n            className=\"p-1 text-blue-400 hover:text-blue-300 transition-colors\"\n            data-testid=\"button-add-reminder\"\n          >\n            <Plus className=\"w-4 h-4\" />\n          </button>\n        </div>\n\n        {/* Add New Reminder */}\n        {isAddingNew && (\n          <div className=\"p-4 bg-gray-800/50 rounded-lg border border-cyan-500/30\">\n            <h4 className=\"text-white font-medium mb-3\">Add New Reminder</h4>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-gray-300 text-sm mb-1\">Time</label>\n                <input\n                  type=\"time\"\n                  value={newTime}\n                  onChange={(e) => {\n                    console.log('Time input changed:', e.target.value);\n                    setNewTime(e.target.value);\n                  }}\n                  className=\"w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400\"\n                  data-testid=\"input-reminder-time\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm mb-1\">Label</label>\n                <input\n                  type=\"text\"\n                  value={newLabel}\n                  onChange={(e) => {\n                    console.log('Label input changed:', e.target.value);\n                    setNewLabel(e.target.value);\n                  }}\n                  placeholder=\"e.g., Morning Quest Check\"\n                  className=\"w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 placeholder-gray-400\"\n                  data-testid=\"input-reminder-label\"\n                  required\n                />\n              </div>\n              <div className=\"flex space-x-2 pt-2\">\n                <button\n                  onClick={() => {\n                    console.log('Save reminder clicked with:', { newTime, newLabel });\n                    addReminderTime();\n                  }}\n                  disabled={!newTime || !newLabel.trim()}\n                  className={`flex-1 px-4 py-2 rounded-lg text-sm font-medium transition-all ${\n                    newTime && newLabel.trim()\n                      ? 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white'\n                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                  }`}\n                  data-testid=\"button-save-reminder\"\n                >\n                  <Check className=\"w-4 h-4 inline mr-2\" />\n                  Save Reminder\n                </button>\n                <button\n                  onClick={() => {\n                    console.log('Cancel reminder clicked');\n                    setIsAddingNew(false);\n                    setNewTime('');\n                    setNewLabel('');\n                  }}\n                  className=\"px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded-lg transition-colors\"\n                  data-testid=\"button-cancel-reminder\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Existing Reminders */}\n        <div className=\"space-y-2\">\n          {reminderTimes.map((reminder) => (\n            <div\n              key={reminder.id}\n              className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n              data-testid={`reminder-${reminder.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-4 h-4 text-blue-400\" />\n                <div>\n                  <div className=\"text-white text-sm font-medium\">{reminder.time}</div>\n                  <div className=\"text-gray-400 text-xs\">{reminder.label}</div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => toggleReminder(reminder.id)}\n                  className={`w-10 h-5 rounded-full transition-colors ${\n                    reminder.enabled ? 'bg-green-500' : 'bg-gray-600'\n                  }`}\n                  data-testid={`toggle-reminder-${reminder.id}`}\n                >\n                  <div className={`w-4 h-4 bg-white rounded-full transition-transform ${\n                    reminder.enabled ? 'translate-x-5' : 'translate-x-0.5'\n                  }`} />\n                </button>\n                <button\n                  onClick={() => deleteReminder(reminder.id)}\n                  className=\"p-1 text-red-400 hover:text-red-300 transition-colors\"\n                  data-testid={`delete-reminder-${reminder.id}`}\n                >\n                  <Trash2 className=\"w-3 h-3\" />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {reminderTimes.length === 0 && (\n          <div className=\"text-center py-4 text-gray-500 text-sm\">\n            No reminders set. Click + to add your first reminder.\n          </div>\n        )}\n      </div>\n\n      {/* Mobile Tips */}\n      <div className=\"p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg\">\n        <h3 className=\"text-blue-300 text-sm font-medium mb-2\">Tips:</h3>\n        <ul className=\"text-xs text-blue-200 space-y-1\">\n          <li>• Notifications work even when the app is closed</li>\n          <li>• Enable notifications in your browser settings</li>\n          <li>• Install as PWA for best mobile experience</li>\n          <li>• Reminders will repeat daily at set times</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":15348},"client/src/components/features/ServiceWorkerStatus.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { serviceWorkerManager } from '@/lib/serviceWorker';\nimport { Wifi, WifiOff, Bell, BellOff, Smartphone, Download, CheckCircle, AlertCircle } from 'lucide-react';\n\nexport function ServiceWorkerStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>('default');\n  const [serviceWorkerReady, setServiceWorkerReady] = useState(false);\n  const [version, setVersion] = useState('unknown');\n  const [pushSubscribed, setPushSubscribed] = useState(false);\n\n  useEffect(() => {\n    // Initialize service worker status\n    checkServiceWorkerStatus();\n    \n    // Monitor online status\n    serviceWorkerManager.onOnlineStatusChange(setIsOnline);\n    \n    // Check notification permission\n    if ('Notification' in window) {\n      setNotificationPermission(Notification.permission);\n    }\n    \n    // Get service worker version\n    serviceWorkerManager.getVersion().then(setVersion);\n  }, []);\n\n  const checkServiceWorkerStatus = async () => {\n    if ('serviceWorker' in navigator) {\n      const registration = await navigator.serviceWorker.getRegistration();\n      setServiceWorkerReady(!!registration);\n    }\n  };\n\n  const enableNotifications = async () => {\n    const permission = await serviceWorkerManager.requestNotificationPermission();\n    setNotificationPermission(permission);\n    \n    if (permission === 'granted') {\n      const subscription = await serviceWorkerManager.subscribeToPushNotifications();\n      setPushSubscribed(!!subscription);\n    }\n  };\n\n  const testNotification = async () => {\n    await serviceWorkerManager.showNotification({\n      title: 'Test Notification 🧪',\n      body: 'Service Worker notifications are working!',\n      tag: 'test-notification'\n    });\n  };\n\n  return (\n    <div className=\"mystical-card p-4 sm:p-6\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-10 h-10 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg flex items-center justify-center\">\n          <Smartphone className=\"w-5 h-5 text-white\" />\n        </div>\n        <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n          <span className=\"bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent\">\n            SERVICE WORKER STATUS\n          </span>\n        </h2>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Online Status */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n          <div className=\"flex items-center space-x-3\">\n            {isOnline ? (\n              <Wifi className=\"w-5 h-5 text-green-400\" />\n            ) : (\n              <WifiOff className=\"w-5 h-5 text-red-400\" />\n            )}\n            <div>\n              <div className=\"text-white font-medium text-sm\">Connection Status</div>\n              <div className={`text-xs ${isOnline ? 'text-green-400' : 'text-red-400'}`}>\n                {isOnline ? 'Online' : 'Offline'}\n              </div>\n            </div>\n          </div>\n          <div className={`w-3 h-3 rounded-full ${isOnline ? 'bg-green-400' : 'bg-red-400'}`} />\n        </div>\n\n        {/* Service Worker Status */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n          <div className=\"flex items-center space-x-3\">\n            {serviceWorkerReady ? (\n              <CheckCircle className=\"w-5 h-5 text-green-400\" />\n            ) : (\n              <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n            )}\n            <div>\n              <div className=\"text-white font-medium text-sm\">Service Worker</div>\n              <div className={`text-xs ${serviceWorkerReady ? 'text-green-400' : 'text-yellow-400'}`}>\n                {serviceWorkerReady ? `Active (${version})` : 'Initializing...'}\n              </div>\n            </div>\n          </div>\n          <div className={`w-3 h-3 rounded-full ${serviceWorkerReady ? 'bg-green-400' : 'bg-yellow-400'}`} />\n        </div>\n\n        {/* Notification Permission */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n          <div className=\"flex items-center space-x-3\">\n            {notificationPermission === 'granted' ? (\n              <Bell className=\"w-5 h-5 text-green-400\" />\n            ) : (\n              <BellOff className=\"w-5 h-5 text-gray-400\" />\n            )}\n            <div>\n              <div className=\"text-white font-medium text-sm\">Notifications</div>\n              <div className={`text-xs ${\n                notificationPermission === 'granted' ? 'text-green-400' : \n                notificationPermission === 'denied' ? 'text-red-400' : 'text-yellow-400'\n              }`}>\n                {notificationPermission === 'granted' ? 'Enabled' : \n                 notificationPermission === 'denied' ? 'Blocked' : 'Not Enabled'}\n              </div>\n            </div>\n          </div>\n          {notificationPermission !== 'granted' && (\n            <button\n              onClick={enableNotifications}\n              className=\"px-3 py-1 text-xs bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors\"\n              data-testid=\"button-enable-notifications\"\n            >\n              Enable\n            </button>\n          )}\n        </div>\n\n        {/* Push Subscription Status */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n          <div className=\"flex items-center space-x-3\">\n            <Download className=\"w-5 h-5 text-blue-400\" />\n            <div>\n              <div className=\"text-white font-medium text-sm\">Push Notifications</div>\n              <div className={`text-xs ${pushSubscribed ? 'text-green-400' : 'text-gray-400'}`}>\n                {pushSubscribed ? 'Subscribed' : 'Not Subscribed'}\n              </div>\n            </div>\n          </div>\n          <div className={`w-3 h-3 rounded-full ${pushSubscribed ? 'bg-green-400' : 'bg-gray-400'}`} />\n        </div>\n\n        {/* Test Notification Button */}\n        {notificationPermission === 'granted' && (\n          <button\n            onClick={testNotification}\n            className=\"w-full px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white rounded-lg transition-colors text-sm font-medium\"\n            data-testid=\"button-test-notification\"\n          >\n            Test Notification\n          </button>\n        )}\n\n        {/* Features List */}\n        <div className=\"mt-4 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg\">\n          <h3 className=\"text-blue-300 text-sm font-medium mb-2\">Available Features:</h3>\n          <ul className=\"text-xs text-blue-200 space-y-1\">\n            <li>{serviceWorkerReady ? '✓' : '⚠'} Offline functionality with cached content</li>\n            <li>{serviceWorkerReady ? '✓' : '⚠'} Background data synchronization</li>\n            <li>{notificationPermission === 'granted' ? '✓' : '⚠'} Push notifications for reminders</li>\n            <li>{serviceWorkerReady ? '✓' : '⚠'} Automatic app updates</li>\n            <li>{serviceWorkerReady ? '✓' : '⚠'} Quest reminder scheduling</li>\n          </ul>\n          {!serviceWorkerReady && (\n            <p className=\"text-xs text-yellow-400 mt-2\">\n              Service Worker disabled in development environment for security\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7619},"client/src/lib/serviceWorker.ts":{"content":"// Service Worker Management for Solo Hunter App\n\ninterface NotificationOptions {\n  title: string;\n  body: string;\n  delay?: number;\n  tag?: string;\n  icon?: string;\n  badge?: string;\n  vibrate?: number[];\n  requireInteraction?: boolean;\n  actions?: Array<{\n    action: string;\n    title: string;\n    icon?: string;\n  }>;\n}\n\ninterface ServiceWorkerMessage {\n  type: string;\n  data?: any;\n}\n\nclass ServiceWorkerManager {\n  private registration: ServiceWorkerRegistration | null = null;\n  private isSupported = 'serviceWorker' in navigator;\n  \n  async init(): Promise<boolean> {\n    if (!this.isSupported) {\n      console.warn('Service Worker not supported');\n      return false;\n    }\n\n    // Enable service worker for deployed app\n    const isDeployed = location.protocol === 'https:' || location.hostname.includes('replit.app');\n    \n    if (!isDeployed) {\n      console.log('Service Worker requires HTTPS deployment - enabling in production');\n      return false;\n    }\n    \n    console.log('Deployed environment detected - enabling Service Worker');\n    \n    try {\n      // Register service worker\n      this.registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/',\n        updateViaCache: 'none'\n      });\n      \n      console.log('Service Worker registered:', this.registration);\n      \n      // Handle updates\n      this.registration.addEventListener('updatefound', () => {\n        const newWorker = this.registration?.installing;\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New content available, notify user\n              this.notifyUpdate();\n            }\n          });\n        }\n      });\n      \n      // Listen for service worker messages\n      navigator.serviceWorker.addEventListener('message', this.handleMessage.bind(this));\n      \n      return true;\n    } catch (error) {\n      console.error('Service Worker registration failed:', error);\n      return false;\n    }\n  }\n  \n  private handleMessage(event: MessageEvent) {\n    const { type, data } = event.data as ServiceWorkerMessage;\n    \n    switch (type) {\n      case 'UPDATE_AVAILABLE':\n        this.notifyUpdate();\n        break;\n      case 'CACHE_UPDATED':\n        console.log('Cache updated with new content');\n        break;\n      default:\n        console.log('Unknown message from service worker:', type);\n    }\n  }\n  \n  private notifyUpdate() {\n    // Show update notification to user\n    if (confirm('New version available! Reload to update?')) {\n      this.updateServiceWorker();\n    }\n  }\n  \n  async updateServiceWorker() {\n    if (!this.registration) return;\n    \n    const waitingWorker = this.registration.waiting;\n    if (waitingWorker) {\n      waitingWorker.postMessage({ type: 'SKIP_WAITING' });\n      waitingWorker.addEventListener('statechange', () => {\n        if (waitingWorker.state === 'activated') {\n          window.location.reload();\n        }\n      });\n    }\n  }\n  \n  async requestNotificationPermission(): Promise<NotificationPermission> {\n    if (!('Notification' in window)) {\n      console.warn('Notifications not supported');\n      return 'denied';\n    }\n    \n    if (Notification.permission === 'granted') {\n      return 'granted';\n    }\n    \n    const permission = await Notification.requestPermission();\n    console.log('Notification permission:', permission);\n    return permission;\n  }\n  \n  async showNotification(options: NotificationOptions): Promise<boolean> {\n    if (!this.registration) {\n      console.error('Service Worker not registered');\n      return false;\n    }\n    \n    const permission = await this.requestNotificationPermission();\n    if (permission !== 'granted') {\n      console.warn('Notification permission denied');\n      return false;\n    }\n    \n    try {\n      const notificationOptions: NotificationOptions = {\n        icon: '/icons/icon-192x192.png',\n        badge: '/icons/badge-72x72.png',\n        vibrate: [200, 100, 200],\n        requireInteraction: true,\n        ...options\n      };\n      \n      if (options.delay && options.delay > 0) {\n        // Schedule notification\n        this.scheduleNotification(options);\n      } else {\n        // Show immediately\n        await this.registration.showNotification(options.title, notificationOptions);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to show notification:', error);\n      return false;\n    }\n  }\n  \n  private scheduleNotification(options: NotificationOptions) {\n    if (!this.registration) return;\n    \n    // Send message to service worker to schedule notification\n    navigator.serviceWorker.ready.then(registration => {\n      registration.active?.postMessage({\n        type: 'SCHEDULE_NOTIFICATION',\n        notification: options\n      });\n    });\n  }\n  \n  async subscribeToPushNotifications(): Promise<PushSubscription | null> {\n    if (!this.registration) {\n      console.error('Service Worker not registered');\n      return null;\n    }\n    \n    // Wait for service worker to be ready\n    await navigator.serviceWorker.ready;\n    \n    try {\n      // Check if push messaging is supported\n      if (!('PushManager' in window)) {\n        console.warn('Push messaging not supported');\n        return null;\n      }\n      \n      // Check if service worker is active\n      if (!this.registration.active) {\n        console.warn('Service worker not active yet');\n        return null;\n      }\n      \n      // For basic notifications, we don't need VAPID keys\n      // Using simple push subscription\n      const subscription = await this.registration.pushManager.subscribe({\n        userVisibleOnly: true\n      });\n      \n      console.log('Push subscription:', subscription);\n      \n      // Send subscription to your server\n      await this.sendSubscriptionToServer(subscription);\n      \n      return subscription;\n    } catch (error) {\n      console.error('Push notification registration failed:', error);\n      return null;\n    }\n  }\n  \n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n    \n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    \n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n  \n  private async sendSubscriptionToServer(subscription: PushSubscription) {\n    try {\n      await fetch('/api/push-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(subscription)\n      });\n    } catch (error) {\n      console.error('Failed to send subscription to server:', error);\n    }\n  }\n  \n  async enableBackgroundSync(): Promise<boolean> {\n    if (!this.registration) return false;\n    \n    // Wait for service worker to be active\n    await navigator.serviceWorker.ready;\n    \n    try {\n      // Check if background sync is supported\n      if (!('sync' in this.registration)) {\n        console.warn('Background sync not supported');\n        return false;\n      }\n      \n      // Check if service worker is active\n      if (!this.registration.active) {\n        console.warn('Service worker not active yet');\n        return false;\n      }\n      \n      // Register for background sync\n      await this.registration.sync.register('background-sync');\n      console.log('Background sync registered');\n      return true;\n    } catch (error) {\n      console.error('Background sync registration failed:', error);\n      return false;\n    }\n  }\n  \n  async cacheUrls(urls: string[]): Promise<void> {\n    if (!this.registration) return;\n    \n    navigator.serviceWorker.ready.then(registration => {\n      registration.active?.postMessage({\n        type: 'CACHE_URLS',\n        urls\n      });\n    });\n  }\n  \n  isOnline(): boolean {\n    return navigator.onLine;\n  }\n  \n  onOnlineStatusChange(callback: (online: boolean) => void) {\n    window.addEventListener('online', () => callback(true));\n    window.addEventListener('offline', () => callback(false));\n  }\n  \n  async getVersion(): Promise<string> {\n    return new Promise((resolve) => {\n      if (!this.registration) {\n        resolve('unknown');\n        return;\n      }\n      \n      const channel = new MessageChannel();\n      channel.port1.onmessage = (event) => {\n        resolve(event.data.version || 'unknown');\n      };\n      \n      navigator.serviceWorker.ready.then(registration => {\n        registration.active?.postMessage({ type: 'GET_VERSION' }, [channel.port2]);\n      });\n    });\n  }\n}\n\n// Create singleton instance\nexport const serviceWorkerManager = new ServiceWorkerManager();\n\n// Hunter-specific notification helpers\nexport const HunterNotifications = {\n  questReminder: (questTitle: string) => \n    serviceWorkerManager.showNotification({\n      title: 'Quest Reminder 🎯',\n      body: `Don't forget about: ${questTitle}`,\n      tag: 'quest-reminder',\n      actions: [\n        { action: 'view', title: 'View Quest' },\n        { action: 'complete', title: 'Mark Complete' }\n      ]\n    }),\n  \n  dailyMotivation: () =>\n    serviceWorkerManager.showNotification({\n      title: 'Rise and Hunt! 🌅',\n      body: 'A new day of challenges awaits. Check your quests and level up!',\n      tag: 'daily-motivation'\n    }),\n  \n  streakAlert: (streakCount: number) =>\n    serviceWorkerManager.showNotification({\n      title: `${streakCount} Day Streak! 🔥`,\n      body: 'Keep the momentum going, Hunter!',\n      tag: 'streak-alert'\n    }),\n  \n  levelUp: (newLevel: number) =>\n    serviceWorkerManager.showNotification({\n      title: 'Level Up! ⚡',\n      body: `Congratulations! You've reached Level ${newLevel}!`,\n      tag: 'level-up',\n      requireInteraction: true,\n      vibrate: [300, 100, 300, 100, 300]\n    })\n};\n\nexport default serviceWorkerManager;","size_bytes":10012},"client/src/components/features/StreakTracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Flame, Trophy, Star, Target, Calendar, Zap, Crown, Shield, Sword } from \"lucide-react\";\nimport { showToast } from \"@/components/ui/toast\";\n\ninterface StreakData {\n  currentStreak: number;\n  longestStreak: number;\n  lastCompletionDate: string;\n  totalCompletions: number;\n  weeklyProgress: boolean[];\n  achievements: Achievement[];\n}\n\ninterface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  unlockedAt?: string;\n  streak: number;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n}\n\ninterface StreakTrackerProps {\n  completedGoalsToday: number;\n  totalGoalsToday: number;\n  onStreakUpdate?: (streak: number) => void;\n}\n\nexport function StreakTracker({ completedGoalsToday, totalGoalsToday, onStreakUpdate }: StreakTrackerProps) {\n  const [streakData, setStreakData] = useState<StreakData>({\n    currentStreak: 0,\n    longestStreak: 0,\n    lastCompletionDate: '',\n    totalCompletions: 0,\n    weeklyProgress: [false, false, false, false, false, false, false],\n    achievements: []\n  });\n\n  const [showAchievement, setShowAchievement] = useState<Achievement | null>(null);\n  const [isStreakActive, setIsStreakActive] = useState(false);\n\n  const achievements: Achievement[] = [\n    { id: 'first-day', title: 'First Step', description: 'Complete your first day', icon: '🎯', streak: 1, rarity: 'common' },\n    { id: 'three-days', title: 'Getting Started', description: '3 days in a row', icon: '🔥', streak: 3, rarity: 'common' },\n    { id: 'week-warrior', title: 'Week Warrior', description: '7 days streak', icon: '⚔️', streak: 7, rarity: 'rare' },\n    { id: 'fortnight-fighter', title: 'Fortnight Fighter', description: '14 days streak', icon: '🛡️', streak: 14, rarity: 'rare' },\n    { id: 'month-master', title: 'Month Master', description: '30 days streak', icon: '👑', streak: 30, rarity: 'epic' },\n    { id: 'quarter-champion', title: 'Quarter Champion', description: '90 days streak', icon: '💎', streak: 90, rarity: 'epic' },\n    { id: 'half-year-hero', title: 'Half-Year Hero', description: '180 days streak', icon: '⭐', streak: 180, rarity: 'legendary' },\n    { id: 'year-legend', title: 'Year Legend', description: '365 days streak', icon: '🏆', streak: 365, rarity: 'legendary' }\n  ];\n\n  useEffect(() => {\n    // Load streak data from localStorage\n    const savedData = localStorage.getItem('hunter-streak-data');\n    if (savedData) {\n      const parsed = JSON.parse(savedData);\n      setStreakData(parsed);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Save streak data to localStorage\n    localStorage.setItem('hunter-streak-data', JSON.stringify(streakData));\n    onStreakUpdate?.(streakData.currentStreak);\n  }, [streakData, onStreakUpdate]);\n\n  useEffect(() => {\n    // Check if today's goals are completed\n    const today = new Date().toDateString();\n    const hasCompletedToday = completedGoalsToday > 0 && completedGoalsToday === totalGoalsToday && totalGoalsToday > 0;\n    \n    if (hasCompletedToday && streakData.lastCompletionDate !== today) {\n      updateStreak();\n    }\n    \n    setIsStreakActive(hasCompletedToday);\n  }, [completedGoalsToday, totalGoalsToday, streakData.lastCompletionDate]);\n\n  const updateStreak = () => {\n    const today = new Date();\n    const todayString = today.toDateString();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toDateString();\n\n    setStreakData(prev => {\n      let newStreak = prev.currentStreak;\n      \n      // If last completion was yesterday, continue streak\n      if (prev.lastCompletionDate === yesterdayString) {\n        newStreak = prev.currentStreak + 1;\n      } \n      // If last completion was today, don't update\n      else if (prev.lastCompletionDate === todayString) {\n        return prev;\n      }\n      // Otherwise, start new streak\n      else {\n        newStreak = 1;\n      }\n\n      const newLongestStreak = Math.max(prev.longestStreak, newStreak);\n      const newTotalCompletions = prev.totalCompletions + 1;\n\n      // Update weekly progress\n      const dayOfWeek = today.getDay();\n      const newWeeklyProgress = [...prev.weeklyProgress];\n      newWeeklyProgress[dayOfWeek] = true;\n\n      // Check for new achievements\n      const newAchievements = [...prev.achievements];\n      achievements.forEach(achievement => {\n        if (newStreak >= achievement.streak && !newAchievements.some(a => a.id === achievement.id)) {\n          const unlockedAchievement = { ...achievement, unlockedAt: new Date().toISOString() };\n          newAchievements.push(unlockedAchievement);\n          setShowAchievement(unlockedAchievement);\n          \n          showToast({\n            type: 'success',\n            title: 'Achievement Unlocked!',\n            message: `${achievement.title} - ${achievement.description}`\n          });\n        }\n      });\n\n      return {\n        currentStreak: newStreak,\n        longestStreak: newLongestStreak,\n        lastCompletionDate: todayString,\n        totalCompletions: newTotalCompletions,\n        weeklyProgress: newWeeklyProgress,\n        achievements: newAchievements\n      };\n    });\n  };\n\n  const getStreakColor = (streak: number) => {\n    if (streak >= 365) return 'from-purple-500 to-pink-500';\n    if (streak >= 180) return 'from-yellow-500 to-orange-500';\n    if (streak >= 90) return 'from-blue-500 to-purple-500';\n    if (streak >= 30) return 'from-green-500 to-blue-500';\n    if (streak >= 7) return 'from-orange-500 to-red-500';\n    if (streak >= 3) return 'from-yellow-500 to-orange-400';\n    return 'from-gray-500 to-gray-400';\n  };\n\n  const getStreakTitle = (streak: number) => {\n    if (streak >= 365) return 'Legendary Hunter';\n    if (streak >= 180) return 'Epic Hunter';\n    if (streak >= 90) return 'Master Hunter';\n    if (streak >= 30) return 'Elite Hunter';\n    if (streak >= 7) return 'Veteran Hunter';\n    if (streak >= 3) return 'Rising Hunter';\n    return 'Novice Hunter';\n  };\n\n  const getRarityColor = (rarity: Achievement['rarity']) => {\n    switch (rarity) {\n      case 'legendary': return 'from-purple-400 to-pink-400';\n      case 'epic': return 'from-orange-400 to-yellow-400';\n      case 'rare': return 'from-blue-400 to-cyan-400';\n      default: return 'from-gray-400 to-gray-300';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Streak Display */}\n      <div className=\"mystical-card p-6 relative overflow-hidden\">\n        <div className={`absolute inset-0 bg-gradient-to-r ${getStreakColor(streakData.currentStreak)} opacity-10`} />\n        \n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-12 h-12 bg-gradient-to-r ${getStreakColor(streakData.currentStreak)} rounded-full flex items-center justify-center shadow-lg`}>\n                <Flame className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-white font-['Orbitron']\">\n                  {streakData.currentStreak} Day Streak\n                </h2>\n                <p className=\"text-gray-400\">{getStreakTitle(streakData.currentStreak)}</p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <p className=\"text-gray-400 text-sm\">Best Streak</p>\n              <p className=\"text-white font-bold\">{streakData.longestStreak} days</p>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-700 rounded-full h-3 mb-4 overflow-hidden\">\n            <div \n              className={`h-full bg-gradient-to-r ${getStreakColor(streakData.currentStreak)} transition-all duration-1000 ease-out relative`}\n              style={{ width: `${Math.min((completedGoalsToday / Math.max(totalGoalsToday, 1)) * 100, 100)}%` }}\n            >\n              <div className=\"absolute inset-0 bg-white/20 animate-pulse\" />\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center text-sm\">\n            <span className=\"text-gray-400\">\n              Today: {completedGoalsToday}/{totalGoalsToday} goals\n            </span>\n            <span className={`font-semibold ${isStreakActive ? 'text-green-400' : 'text-yellow-400'}`}>\n              {isStreakActive ? '🔥 Streak Active!' : '⏳ Complete goals to continue streak'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Weekly Progress */}\n      <div className=\"mystical-card p-6\">\n        <h3 className=\"text-lg font-bold text-white font-['Orbitron'] mb-4 flex items-center\">\n          <Calendar className=\"w-5 h-5 mr-2\" />\n          Weekly Progress\n        </h3>\n        \n        <div className=\"grid grid-cols-7 gap-2\">\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (\n            <div key={day} className=\"text-center\">\n              <p className=\"text-gray-400 text-xs mb-2\">{day}</p>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                streakData.weeklyProgress[index] \n                  ? 'bg-gradient-to-r from-green-500 to-blue-500 shadow-lg shadow-green-500/25' \n                  : 'bg-gray-700 border border-gray-600'\n              }`}>\n                {streakData.weeklyProgress[index] && <Star className=\"w-4 h-4 text-white\" />}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"mystical-card p-4 text-center\">\n          <Target className=\"w-8 h-8 text-blue-400 mx-auto mb-2\" />\n          <p className=\"text-2xl font-bold text-white\">{streakData.totalCompletions}</p>\n          <p className=\"text-gray-400 text-sm\">Total Completions</p>\n        </div>\n        \n        <div className=\"mystical-card p-4 text-center\">\n          <Trophy className=\"w-8 h-8 text-yellow-400 mx-auto mb-2\" />\n          <p className=\"text-2xl font-bold text-white\">{streakData.achievements.length}</p>\n          <p className=\"text-gray-400 text-sm\">Achievements</p>\n        </div>\n        \n        <div className=\"mystical-card p-4 text-center\">\n          <Zap className=\"w-8 h-8 text-purple-400 mx-auto mb-2\" />\n          <p className=\"text-2xl font-bold text-white\">{Math.round((streakData.currentStreak / Math.max(streakData.longestStreak, 1)) * 100)}%</p>\n          <p className=\"text-gray-400 text-sm\">Current vs Best</p>\n        </div>\n      </div>\n\n      {/* Achievements */}\n      <div className=\"mystical-card p-6\">\n        <h3 className=\"text-lg font-bold text-white font-['Orbitron'] mb-4 flex items-center\">\n          <Crown className=\"w-5 h-5 mr-2\" />\n          Achievements\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {achievements.map(achievement => {\n            const isUnlocked = streakData.achievements.some(a => a.id === achievement.id);\n            const unlockedData = streakData.achievements.find(a => a.id === achievement.id);\n            \n            return (\n              <div key={achievement.id} className={`p-4 rounded-lg border transition-all duration-300 ${\n                isUnlocked \n                  ? `bg-gradient-to-r ${getRarityColor(achievement.rarity)}/10 border-current shadow-lg` \n                  : 'bg-gray-800/50 border-gray-700'\n              }`}>\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center text-2xl ${\n                    isUnlocked ? 'bg-white/10' : 'bg-gray-700 grayscale opacity-50'\n                  }`}>\n                    {achievement.icon}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className={`font-semibold ${isUnlocked ? 'text-white' : 'text-gray-500'}`}>\n                      {achievement.title}\n                    </h4>\n                    <p className={`text-sm ${isUnlocked ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {achievement.description}\n                    </p>\n                    {isUnlocked && unlockedData?.unlockedAt && (\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        Unlocked: {formatDate(unlockedData.unlockedAt)}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-sm font-medium ${isUnlocked ? 'text-green-400' : 'text-gray-500'}`}>\n                      {achievement.streak} days\n                    </p>\n                    <p className={`text-xs capitalize ${isUnlocked ? getRarityColor(achievement.rarity).replace('from-', 'text-').replace(' to-', '').split('-')[1] : 'text-gray-600'}`}>\n                      {achievement.rarity}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Achievement Popup */}\n      {showAchievement && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[9999] flex items-center justify-center p-4\">\n          <div className=\"mystical-card max-w-md w-full p-8 text-center relative overflow-hidden\">\n            <div className={`absolute inset-0 bg-gradient-to-r ${getRarityColor(showAchievement.rarity)} opacity-20 animate-pulse`} />\n            \n            <div className=\"relative z-10\">\n              <div className=\"w-20 h-20 mx-auto mb-6 text-6xl animate-bounce\">\n                {showAchievement.icon}\n              </div>\n              \n              <h2 className=\"text-2xl font-bold text-white font-['Orbitron'] mb-2\">\n                Achievement Unlocked!\n              </h2>\n              \n              <h3 className={`text-xl font-semibold mb-2 bg-gradient-to-r ${getRarityColor(showAchievement.rarity)} bg-clip-text text-transparent`}>\n                {showAchievement.title}\n              </h3>\n              \n              <p className=\"text-gray-300 mb-6\">{showAchievement.description}</p>\n              \n              <div className=\"flex justify-center space-x-4 mb-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-white\">{showAchievement.streak}</p>\n                  <p className=\"text-gray-400 text-sm\">Days</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className={`text-xl font-bold capitalize bg-gradient-to-r ${getRarityColor(showAchievement.rarity)} bg-clip-text text-transparent`}>\n                    {showAchievement.rarity}\n                  </p>\n                  <p className=\"text-gray-400 text-sm\">Rarity</p>\n                </div>\n              </div>\n              \n              <button\n                onClick={() => setShowAchievement(null)}\n                className=\"power-button\"\n              >\n                Continue Journey\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15341},"client/src/lib/userDataManager.ts":{"content":"import { \n  collection, \n  doc, \n  setDoc, \n  getDoc, \n  updateDoc, \n  onSnapshot, \n  query, \n  where,\n  orderBy,\n  addDoc,\n  deleteDoc,\n  getDocs,\n  DocumentSnapshot,\n  QuerySnapshot,\n  DocumentData\n} from 'firebase/firestore';\nimport { User } from 'firebase/auth';\nimport { getFirestoreInstance, handleFirestoreError } from './firebase';\n\n// User Profile Interface\nexport interface UserProfile {\n  uid: string;\n  email: string;\n  displayName: string;\n  level: number;\n  xp: number;\n  rank: string;\n  streak: number;\n  totalGoalsCompleted: number;\n  lastLoginDate: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Goal Interface\nexport interface Goal {\n  id: string;\n  userId: string;\n  title: string;\n  description?: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high';\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';\n  dueDate?: string;\n  xpReward: number;\n  completedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Category Interface\nexport interface Category {\n  id: string;\n  userId: string;\n  name: string;\n  icon: string;\n  originalName: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Note Interface\nexport interface Note {\n  id: string;\n  userId: string;\n  title: string;\n  content: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// User Settings Interface\nexport interface UserSettings {\n  userId: string;\n  dailyGoalTarget: number;\n  notificationsEnabled: boolean;\n  reminderTimes: Array<{\n    id: string;\n    time: string;\n    label: string;\n    enabled: boolean;\n  }>;\n  theme: 'light' | 'dark';\n  createdAt: string;\n  updatedAt: string;\n}\n\nclass UserDataManager {\n  private userId: string | null = null;\n\n  setUser(user: User) {\n    this.userId = user.uid;\n    console.log('UserDataManager: User set for:', user.email);\n  }\n\n  private async executeWithRetry<T>(operation: () => Promise<T>): Promise<T> {\n    try {\n      return await operation();\n    } catch (error: any) {\n      console.error('Firestore operation failed:', error);\n      \n      // Handle 400 errors specifically\n      if (error?.message?.includes('400') || error?.code === 'unavailable') {\n        console.log('Handling Firestore 400 error, attempting recovery...');\n        await handleFirestoreError(error);\n        \n        // Retry operation after recovery attempt\n        try {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          return await operation();\n        } catch (retryError) {\n          console.error('Retry failed:', retryError);\n          throw retryError;\n        }\n      }\n      \n      throw error;\n    }\n  }\n\n  // User Profile Management\n  async createUserProfile(user: User): Promise<UserProfile> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const profile: UserProfile = {\n      uid: user.uid,\n      email: user.email || '',\n      displayName: user.displayName || '',\n      level: 1,\n      xp: 0,\n      rank: 'E-Rank',\n      streak: 0,\n      totalGoalsCompleted: 0,\n      lastLoginDate: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      await setDoc(doc(db, 'users', user.uid), profile);\n      await this.createDefaultCategories(user.uid);\n      return profile;\n    });\n  }\n\n  async getUserProfile(): Promise<UserProfile | null> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const docRef = doc(db, 'users', this.userId!);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return docSnap.data() as UserProfile;\n      }\n      return null;\n    });\n  }\n\n  async updateUserProfile(updates: Partial<UserProfile>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const userRef = doc(db, 'users', this.userId!);\n      await updateDoc(userRef, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n    });\n  }\n\n  // Goals Management\n  async createGoal(goalData: Omit<Goal, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const goal: Omit<Goal, 'id'> = {\n        ...goalData,\n        userId: this.userId!,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      const docRef = await addDoc(collection(db, 'goals'), goal);\n      return docRef.id;\n    });\n  }\n\n  async getUserGoals(): Promise<Goal[]> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const q = query(\n        collection(db, 'goals'),\n        where('userId', '==', this.userId),\n        orderBy('createdAt', 'desc')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map((doc: any) => ({\n        id: doc.id,\n        ...doc.data()\n      }) as Goal);\n    });\n  }\n\n  async updateGoal(goalId: string, updates: Partial<Goal>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const goalRef = doc(db, 'goals', goalId);\n      await updateDoc(goalRef, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n    });\n  }\n\n  async deleteGoal(goalId: string): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n    \n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      await deleteDoc(doc(db, 'goals', goalId));\n    });\n  }\n\n  // Categories Management\n  async createDefaultCategories(userId: string): Promise<void> {\n    const defaultCategories = [\n      { name: 'Main Mission', icon: '⚔️', originalName: 'Main Mission' },\n      { name: 'Training', icon: '🛡️', originalName: 'Training' },\n      { name: 'Side Quest', icon: '⭐', originalName: 'Side Quest' }\n    ];\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      for (const cat of defaultCategories) {\n        await addDoc(collection(db, 'categories'), {\n          ...cat,\n          userId,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        });\n      }\n    });\n  }\n\n  async getUserCategories(): Promise<Category[]> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const q = query(\n        collection(db, 'categories'),\n        where('userId', '==', this.userId)\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map((doc: any) => ({\n        id: doc.id,\n        ...doc.data()\n      }) as Category);\n    });\n  }\n\n  async updateCategory(categoryId: string, updates: Partial<Category>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const categoryRef = doc(db, 'categories', categoryId);\n      await updateDoc(categoryRef, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n    });\n  }\n\n  // Notes Management\n  async createNote(noteData: Omit<Note, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const note: Omit<Note, 'id'> = {\n        ...noteData,\n        userId: this.userId!,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      const docRef = await addDoc(collection(db, 'notes'), note);\n      return docRef.id;\n    });\n  }\n\n  async getUserNotes(): Promise<Note[]> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const q = query(\n        collection(db, 'notes'),\n        where('userId', '==', this.userId),\n        orderBy('updatedAt', 'desc')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map((doc: any) => ({\n        id: doc.id,\n        ...doc.data()\n      }) as Note);\n    });\n  }\n\n  async updateNote(noteId: string, updates: Partial<Note>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const noteRef = doc(db, 'notes', noteId);\n      await updateDoc(noteRef, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n    });\n  }\n\n  async deleteNote(noteId: string): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n    \n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      await deleteDoc(doc(db, 'notes', noteId));\n    });\n  }\n\n  // User Settings Management\n  async getUserSettings(): Promise<UserSettings | null> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const docRef = doc(db, 'settings', this.userId!);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return docSnap.data() as UserSettings;\n      }\n      return null;\n    });\n  }\n\n  async updateUserSettings(settings: Partial<UserSettings>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return this.executeWithRetry(async () => {\n      const db = await getFirestoreInstance();\n      const settingsRef = doc(db, 'settings', this.userId!);\n      await updateDoc(settingsRef, {\n        ...settings,\n        updatedAt: new Date().toISOString()\n      });\n    });\n  }\n\n  // Utility functions\n  calculateNextLevel(xp: number): number {\n    return Math.floor(xp / 100) + 1;\n  }\n\n  getRankForLevel(level: number): string {\n    if (level >= 50) return 'S-Rank';\n    if (level >= 40) return 'A-Rank';\n    if (level >= 30) return 'B-Rank';\n    if (level >= 20) return 'C-Rank';\n    if (level >= 10) return 'D-Rank';\n    return 'E-Rank';\n  }\n\n  // Real-time listeners with error handling\n  subscribeToUserProfile(callback: (profile: UserProfile | null) => void): () => void {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    let unsubscribe: (() => void) | null = null;\n\n    const setupListener = async () => {\n      try {\n        const db = await getFirestoreInstance();\n        unsubscribe = onSnapshot(\n          doc(db, 'users', this.userId!), \n          (doc: DocumentSnapshot<DocumentData>) => {\n            if (doc.exists()) {\n              callback(doc.data() as UserProfile);\n            } else {\n              callback(null);\n            }\n          },\n          (error: any) => {\n            console.error('Profile subscription error:', error);\n            handleFirestoreError(error);\n          }\n        );\n      } catch (error) {\n        console.error('Failed to setup profile listener:', error);\n        await handleFirestoreError(error);\n      }\n    };\n\n    setupListener();\n\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }\n\n  subscribeToUserGoals(callback: (goals: Goal[]) => void): () => void {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    let unsubscribe: (() => void) | null = null;\n\n    const setupListener = async () => {\n      try {\n        const db = await getFirestoreInstance();\n        const q = query(\n          collection(db, 'goals'),\n          where('userId', '==', this.userId),\n          orderBy('createdAt', 'desc')\n        );\n\n        unsubscribe = onSnapshot(\n          q, \n          (querySnapshot: QuerySnapshot<DocumentData>) => {\n            const goals = querySnapshot.docs.map((doc: any) => ({\n              id: doc.id,\n              ...doc.data()\n            }) as Goal);\n            callback(goals);\n          },\n          (error: any) => {\n            console.error('Goals subscription error:', error);\n            handleFirestoreError(error);\n          }\n        );\n      } catch (error) {\n        console.error('Failed to setup goals listener:', error);\n        await handleFirestoreError(error);\n      }\n    };\n\n    setupListener();\n\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }\n}\n\nexport const userDataManager = new UserDataManager();","size_bytes":12959},"client/src/pages/Dashboard_old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useUserProfile } from \"@/hooks/useUserData\";\nimport { useUserGoals } from \"@/hooks/useUserData\";\nimport { AppSidebar } from \"../components/layout/AppSidebar\";\nimport { TopBar } from \"../components/layout/TopBar\";\nimport { Crown, Star, CheckCircle, Calendar, BarChart3, Target, Plus, X, Bell, Trash2, Check, Menu, Flame } from \"lucide-react\";\nimport { AnalyticsDashboard } from \"../components/analytics/AnalyticsDashboard\";\nimport { CalendarView } from \"../components/calendar/CalendarView\";\nimport { Settings } from \"./Settings\";\nimport { MorningModal } from \"@/components/modals/MorningModal\";\nimport { ShadowArchives } from \"../components/features/ShadowArchives\";\nimport { OnboardingModal } from \"@/components/modals/OnboardingModal\";\nimport { MotivationalGreeting } from \"@/components/ui/MotivationalGreeting\";\nimport { StreakTracker } from \"../components/features/StreakTracker\";\nimport { showToast } from \"@/components/ui/toast\";\nimport { PWAInstall } from \"@/components/features/PWAInstall\";\nimport { serviceWorkerManager, HunterNotifications } from \"@/lib/serviceWorker\";\n\nfunction Dashboard() {\n  const { user } = useAuth();\n  const { profile, loading: profileLoading } = useUserProfile();\n  const { goals, loading: goalsLoading, createGoal, updateGoal, deleteGoal } = useUserGoals();\n  \n  // CRITICAL: Ensure user is authenticated before rendering anything\n  if (!user || !user.uid) {\n    return null; // This will cause ProtectedRoutes to redirect to login\n  }\n\n  const [location, setLocation] = useLocation();\n  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n  const [isDesktopSidebarCollapsed, setIsDesktopSidebarCollapsed] = useState(false);\n  \n  // Extract current view from URL path\n  const getCurrentView = () => {\n    if (location === '/' || location === '/dashboard') return 'dashboard';\n    const view = location.replace('/', '');\n    return view || 'dashboard';\n  };\n  \n  const currentView = getCurrentView();\n  const [isMorningModalOpen, setIsMorningModalOpen] = useState(false);\n  const [isOnboardingOpen, setIsOnboardingOpen] = useState(false);\n  const [showGreeting, setShowGreeting] = useState(false);\n\n  // Initialize service worker and show greeting on first visit of the day\n  useEffect(() => {\n    const lastGreeting = localStorage.getItem(`last-greeting-${user.uid}`);\n    const today = new Date().toDateString();\n    \n    if (lastGreeting !== today) {\n      setShowGreeting(true);\n      localStorage.setItem(`last-greeting-${user.uid}`, today);\n    }\n    \n    // Initialize service worker\n    serviceWorkerManager.init().then((success) => {\n      if (success) {\n        console.log('Service Worker initialized successfully');\n        \n        // Request notification permission\n        serviceWorkerManager.requestNotificationPermission().then((permission) => {\n          if (permission === 'granted') {\n            console.log('Notifications enabled');\n            \n            // Send daily motivation if it's morning\n            const hour = new Date().getHours();\n            if (hour >= 8 && hour <= 10 && lastGreeting !== today) {\n              setTimeout(() => {\n                HunterNotifications.dailyMotivation();\n              }, 3000); // 3 second delay\n            }\n          }\n        });\n        \n        // Enable background sync\n        serviceWorkerManager.enableBackgroundSync();\n        \n        // Subscribe to push notifications\n        serviceWorkerManager.subscribeToPushNotifications();\n      } else {\n        console.log('Service Worker not available, using fallback notifications');\n      }\n    });\n  }, [user.uid]);\n\n  const [newGoal, setNewGoal] = useState({ \n    title: '', \n    categoryId: '', \n    priority: 'medium' as 'low' | 'medium' | 'high', \n    dueDate: new Date().toISOString().split('T')[0] // Default to today\n  });\n  const [isAddingGoal, setIsAddingGoal] = useState<string | null>(null);\n\n  // Calculate dynamic user stats from actual goals\n  const totalGoals = goals.length;\n  const completedGoals = goals.filter(g => g.status === 'completed').length;\n  const currentXP = profile?.xp || 0;\n  const level = profile?.level || 1;\n  const currentLevelXP = currentXP % 100;\n  const streak = profile?.streak || 0;\n  const rank = profile?.rank || \"E-Rank\";\n\n  // Firebase-based goal management functions\n  const handleAddGoal = async (categoryId: string) => {\n    if (!newGoal.title.trim()) return;\n    \n    try {\n      await createGoal({\n        title: newGoal.title,\n        category: categoryId,\n        priority: newGoal.priority,\n        dueDate: newGoal.dueDate || undefined,\n        status: 'pending',\n        xpReward: 25\n      });\n      \n      setNewGoal({ \n        title: '', \n        categoryId: '', \n        priority: 'medium', \n        dueDate: new Date().toISOString().split('T')[0] \n      });\n      setIsAddingGoal(null);\n      \n      showToast({\n        type: 'success',\n        title: 'Quest Added!',\n        message: `\"${newGoal.title}\" has been added to your quest list`\n      });\n    } catch (error) {\n      console.error('Error adding goal:', error);\n      showToast({\n        type: 'error',\n        title: 'Failed to Add Quest',\n        message: 'Please try again'\n      });\n    }\n  };\n\n  const handleToggleGoal = async (goalId: string) => {\n    try {\n      const goal = goals.find(g => g.id === goalId);\n      if (!goal) return;\n      \n      await updateGoal(goalId, {\n        status: goal.status === 'completed' ? 'pending' : 'completed',\n        completedAt: goal.status === 'completed' ? undefined : new Date().toISOString()\n      });\n      \n      if (goal.status !== 'completed') {\n        showToast({\n          type: 'success',\n          title: 'Quest Completed!',\n          message: `\"${goal.title}\" marked as complete. XP gained!`\n        });\n      }\n    } catch (error) {\n      console.error('Error toggling goal:', error);\n      showToast({\n        type: 'error',\n        title: 'Update Failed',\n        message: 'Please try again'\n      });\n    }\n  };\n\n  const handleDeleteGoal = async (goalId: string) => {\n    try {\n      await deleteGoal(goalId);\n      showToast({\n        type: 'success',\n        title: 'Quest Deleted',\n        message: 'Quest has been removed from your list'\n      });\n    } catch (error) {\n      console.error('Error deleting goal:', error);\n      showToast({\n        type: 'error',\n        title: 'Delete Failed',\n        message: 'Please try again'\n      });\n    }\n  };\n\n  // Show loading state\n  if (profileLoading || goalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <div className=\"text-cyan-400 font-['Orbitron'] text-xl\">Loading Hunter Data...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderDashboard = () => (\n    <div className=\"space-y-5\">\n      {/* Hunter Status Window */}\n      <div className=\"bg-gradient-to-br from-gray-900/90 to-gray-800/80 border border-cyan-500/20 rounded-xl p-5 shadow-2xl backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <Crown className=\"w-7 h-7 text-white\" />\n              </div>\n              <div className=\"absolute -bottom-1 -right-1 bg-amber-500 text-black text-xs font-bold px-1.5 py-0.5 rounded-full\">\n                {rank}\n              </div>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-white font-['Orbitron']\">\n                <span className=\"bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent\">\n                  HUNTER LEVEL {level}\n                </span>\n              </h1>\n              <p className=\"text-gray-300\">Welcome back, {user?.displayName || 'Hunter'}</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-5 text-center\">\n            <div>\n              <div className=\"text-xl font-bold text-green-400\">{completedGoals}</div>\n              <div className=\"text-xs text-gray-400\">Completed</div>\n            </div>\n            <div>\n              <div className=\"text-xl font-bold text-amber-400\">{streak}</div>\n              <div className=\"text-xs text-gray-400\">Streak</div>\n            </div>\n            <div>\n              <div className=\"text-xl font-bold text-blue-400\">{totalGoals - completedGoals}</div>\n              <div className=\"text-xs text-gray-400\">Active</div>\n            </div>\n          </div>\n        </div>\n\n        {/* XP Progress */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-300 font-semibold\">EXPERIENCE POINTS</span>\n            <span className=\"text-cyan-400 font-bold\">{currentLevelXP} / 100</span>\n          </div>\n          <div className=\"relative h-3 bg-gray-800 rounded-full overflow-hidden border border-gray-700\">\n            <div \n              className=\"h-full bg-gradient-to-r from-blue-500 via-cyan-400 to-amber-400 rounded-full transition-all duration-1000\"\n              style={{ width: `${(currentLevelXP / 100) * 100}%` }}\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-pulse\" />\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500\">\n            <span>Level {level}</span>\n            <span>Next: Level {level + 1}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Goals Display */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-bold text-white font-['Orbitron']\">Active Quests</h2>\n        {totalGoals === 0 ? (\n          <div className=\"text-center py-8 text-gray-400\">\n            <Target className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <p>No active quests. Create your first quest to begin your hunter journey!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {goals.map((goal) => (\n              <div key={goal.id} className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-4 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <button\n                    onClick={() => handleToggleGoal(goal.id)}\n                    className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all ${\n                      goal.status === 'completed'\n                        ? 'bg-green-500 border-green-500 text-white'\n                        : 'border-gray-400 hover:border-green-500'\n                    }`}\n                  >\n                    {goal.status === 'completed' && <Check className=\"w-4 h-4\" />}\n                  </button>\n                  <div>\n                    <h3 className={`font-medium ${goal.status === 'completed' ? 'text-gray-400 line-through' : 'text-white'}`}>\n                      {goal.title}\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">\n                      {goal.category} • {goal.priority} priority\n                      {goal.dueDate && ` • Due: ${new Date(goal.dueDate).toLocaleDateString()}`}\n                    </p>\n                  </div>\n                </div>\n                <button\n                  onClick={() => handleDeleteGoal(goal.id)}\n                  className=\"text-red-400 hover:text-red-300 transition-colors\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Add Goal Section */}\n      <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <input\n            type=\"text\"\n            value={newGoal.title}\n            onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}\n            placeholder=\"Enter new quest...\"\n            className=\"flex-1 bg-gray-900 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-cyan-400\"\n          />\n          <select\n            value={newGoal.priority}\n            onChange={(e) => setNewGoal({ ...newGoal, priority: e.target.value as 'low' | 'medium' | 'high' })}\n            className=\"bg-gray-900 border border-gray-600 rounded px-3 py-2 text-white focus:outline-none focus:border-cyan-400\"\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n          </select>\n          <input\n            type=\"date\"\n            value={newGoal.dueDate}\n            onChange={(e) => setNewGoal({ ...newGoal, dueDate: e.target.value })}\n            className=\"bg-gray-900 border border-gray-600 rounded px-3 py-2 text-white focus:outline-none focus:border-cyan-400\"\n          />\n          <button\n            onClick={() => handleAddGoal('main-mission')}\n            className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded transition-colors\"\n          >\n            <Plus className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex\">\n      {/* Desktop Sidebar */}\n      <div className={`hidden lg:block transition-all duration-300 ${isDesktopSidebarCollapsed ? 'w-16' : 'w-64'}`}>\n        <AppSidebar\n          currentView={currentView}\n          onViewChange={(view) => setLocation(view === 'dashboard' ? '/' : `/${view}`)}\n          collapsed={isDesktopSidebarCollapsed}\n          onToggleCollapse={() => setIsDesktopSidebarCollapsed(!isDesktopSidebarCollapsed)}\n        />\n      </div>\n\n      {/* Mobile Sidebar Overlay */}\n      {isMobileSidebarOpen && (\n        <>\n          <div \n            className=\"lg:hidden fixed inset-0 bg-black/50 z-40\" \n            onClick={() => setIsMobileSidebarOpen(false)}\n          />\n          <div className=\"lg:hidden fixed left-0 top-0 h-full w-64 z-50\">\n            <AppSidebar\n              currentView={currentView}\n              onViewChange={(view) => {\n                setLocation(view === 'dashboard' ? '/' : `/${view}`);\n                setIsMobileSidebarOpen(false);\n              }}\n            />\n          </div>\n        </>\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <TopBar \n          onMenuClick={() => setIsMobileSidebarOpen(true)}\n          user={user}\n        />\n        \n        <main className=\"flex-1 p-4 lg:p-6 overflow-y-auto\">\n          {currentView === 'dashboard' && renderDashboard()}\n          {currentView === 'analytics' && <AnalyticsDashboard />}\n          {currentView === 'calendar' && <CalendarView />}\n          {currentView === 'settings' && <Settings />}\n          {currentView === 'notes' && <ShadowArchives />}\n          {currentView === 'streaks' && <StreakTracker completedGoalsToday={completedGoals} totalGoalsToday={totalGoals} />}\n        </main>\n      </div>\n\n      {/* Modals */}\n      {showGreeting && (\n        <MotivationalGreeting\n          onClose={() => setShowGreeting(false)}\n          userName={user?.displayName || 'Hunter'}\n        />\n      )}\n      \n      {isMorningModalOpen && (\n        <MorningModal isOpen={isMorningModalOpen} onClose={() => setIsMorningModalOpen(false)} />\n      )}\n      \n      {isOnboardingOpen && (\n        <OnboardingModal isOpen={isOnboardingOpen} onClose={() => setIsOnboardingOpen(false)} />\n      )}\n\n      <PWAInstall />\n    </div>\n  );\n}\n\nexport default Dashboard;","size_bytes":16064},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex items-center justify-center\">\n          <div className=\"text-center p-8 max-w-md\">\n            <div className=\"text-red-400 text-6xl mb-4\">⚠️</div>\n            <h1 className=\"text-xl font-bold text-white font-['Orbitron'] mb-4\">\n              Application Error\n            </h1>\n            <p className=\"text-gray-300 mb-6\">\n              Something went wrong. This might be a Firebase configuration issue in deployment.\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\n            >\n              Reload Application\n            </button>\n            {this.state.error && (\n              <details className=\"mt-4 text-left\">\n                <summary className=\"text-gray-400 text-sm cursor-pointer\">Technical Details</summary>\n                <pre className=\"text-red-300 text-xs mt-2 overflow-auto max-h-32\">\n                  {this.state.error.message}\n                </pre>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":1863},"client/src/hooks/useUserData.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from './useAuth';\nimport { userDataManager, Goal, UserProfile, Category, Note } from '@/lib/userDataManager';\n\n// Hook for user profile\nexport function useUserProfile() {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setProfile(null);\n      setLoading(false);\n      return;\n    }\n\n    let unsubscribe: (() => void) | undefined;\n\n    const setupSubscription = async () => {\n      try {\n        unsubscribe = userDataManager.subscribeToUserProfile((newProfile) => {\n          setProfile(newProfile);\n          setLoading(false);\n        });\n      } catch (error) {\n        console.error('Error setting up profile subscription:', error);\n        setLoading(false);\n      }\n    };\n\n    setupSubscription();\n\n    return () => {\n      if (unsubscribe) unsubscribe();\n    };\n  }, [user]);\n\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    if (!user) return;\n    try {\n      await userDataManager.updateUserProfile(updates);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  };\n\n  return { profile, loading, updateProfile };\n}\n\n// Hook for user goals\nexport function useUserGoals() {\n  const { user } = useAuth();\n  const [goals, setGoals] = useState<Goal[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setGoals([]);\n      setLoading(false);\n      return;\n    }\n\n    let unsubscribe: (() => void) | undefined;\n\n    const setupSubscription = async () => {\n      try {\n        unsubscribe = userDataManager.subscribeToUserGoals((newGoals) => {\n          setGoals(newGoals);\n          setLoading(false);\n        });\n      } catch (error) {\n        console.error('Error setting up goals subscription:', error);\n        setLoading(false);\n      }\n    };\n\n    setupSubscription();\n\n    return () => {\n      if (unsubscribe) unsubscribe();\n    };\n  }, [user]);\n\n  const createGoal = async (goalData: Omit<Goal, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      return await userDataManager.createGoal(goalData);\n    } catch (error) {\n      console.error('Error creating goal:', error);\n      throw error;\n    }\n  };\n\n  const updateGoal = async (goalId: string, updates: Partial<Goal>) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      await userDataManager.updateGoal(goalId, updates);\n    } catch (error) {\n      console.error('Error updating goal:', error);\n      throw error;\n    }\n  };\n\n  const deleteGoal = async (goalId: string) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      await userDataManager.deleteGoal(goalId);\n    } catch (error) {\n      console.error('Error deleting goal:', error);\n      throw error;\n    }\n  };\n\n  return { goals, loading, createGoal, updateGoal, deleteGoal };\n}\n\n// Hook for user categories\nexport function useUserCategories() {\n  const { user } = useAuth();\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setCategories([]);\n      setLoading(false);\n      return;\n    }\n\n    const loadCategories = async () => {\n      try {\n        const userCategories = await userDataManager.getUserCategories();\n        setCategories(userCategories);\n      } catch (error) {\n        console.error('Error loading categories:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadCategories();\n  }, [user]);\n\n  const updateCategory = async (categoryId: string, updates: Partial<Category>) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      await userDataManager.updateCategory(categoryId, updates);\n      // Reload categories after update\n      const userCategories = await userDataManager.getUserCategories();\n      setCategories(userCategories);\n    } catch (error) {\n      console.error('Error updating category:', error);\n      throw error;\n    }\n  };\n\n  return { categories, loading, updateCategory };\n}\n\n// Hook for user notes\nexport function useUserNotes() {\n  const { user } = useAuth();\n  const [notes, setNotes] = useState<Note[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setNotes([]);\n      setLoading(false);\n      return;\n    }\n\n    const loadNotes = async () => {\n      try {\n        const userNotes = await userDataManager.getUserNotes();\n        setNotes(userNotes);\n      } catch (error) {\n        console.error('Error loading notes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadNotes();\n  }, [user]);\n\n  const createNote = async (noteData: Omit<Note, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      const noteId = await userDataManager.createNote(noteData);\n      // Reload notes after creation\n      const userNotes = await userDataManager.getUserNotes();\n      setNotes(userNotes);\n      return noteId;\n    } catch (error) {\n      console.error('Error creating note:', error);\n      throw error;\n    }\n  };\n\n  const updateNote = async (noteId: string, updates: Partial<Note>) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      await userDataManager.updateNote(noteId, updates);\n      // Reload notes after update\n      const userNotes = await userDataManager.getUserNotes();\n      setNotes(userNotes);\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  };\n\n  const deleteNote = async (noteId: string) => {\n    if (!user) throw new Error('User not authenticated');\n    try {\n      await userDataManager.deleteNote(noteId);\n      // Reload notes after deletion\n      const userNotes = await userDataManager.getUserNotes();\n      setNotes(userNotes);\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      throw error;\n    }\n  };\n\n  return { notes, loading, createNote, updateNote, deleteNote };\n}","size_bytes":6222},"client/src/lib/userDataManager_old.ts":{"content":"import { \n  collection, \n  doc, \n  setDoc, \n  getDoc, \n  updateDoc, \n  onSnapshot, \n  query, \n  where,\n  orderBy,\n  addDoc,\n  deleteDoc,\n  getDocs,\n  DocumentSnapshot,\n  QuerySnapshot,\n  DocumentData\n} from 'firebase/firestore';\nimport { User } from 'firebase/auth';\nimport { getFirestoreInstance, handleFirestoreError, ensureFirestoreConnection } from './firebase';\n\n// User Profile Interface\nexport interface UserProfile {\n  uid: string;\n  email: string;\n  displayName: string;\n  level: number;\n  xp: number;\n  rank: string;\n  streak: number;\n  totalGoalsCompleted: number;\n  lastLoginDate: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Goal Interface\nexport interface Goal {\n  id: string;\n  userId: string;\n  title: string;\n  description?: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high';\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';\n  dueDate?: string;\n  completedAt?: string;\n  xpReward: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Category Interface\nexport interface Category {\n  id: string;\n  userId: string;\n  name: string;\n  icon: string;\n  originalName: string;\n  color?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Note Interface\nexport interface Note {\n  id: string;\n  userId: string;\n  title: string;\n  content: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\n// User Settings Interface\nexport interface UserSettings {\n  userId: string;\n  theme: string;\n  notifications: {\n    enabled: boolean;\n    reminderTimes: Array<{\n      id: string;\n      time: string;\n      label: string;\n      enabled: boolean;\n    }>;\n  };\n  categories: Category[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nclass UserDataManager {\n  private userId: string | null = null;\n\n  setUser(user: User | null) {\n    this.userId = user?.uid || null;\n  }\n\n  // User Profile Management\n  async createUserProfile(user: User): Promise<void> {\n    if (!user.uid) throw new Error('User ID required');\n\n    try {\n      await ensureFirestoreConnection();\n      \n      const userProfile: UserProfile = {\n        uid: user.uid,\n        email: user.email || '',\n        displayName: user.displayName || 'Hunter',\n        level: 1,\n        xp: 0,\n        rank: 'E-Rank',\n        streak: 0,\n        totalGoalsCompleted: 0,\n        lastLoginDate: new Date().toISOString(),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      await setDoc(doc(db, 'users', user.uid), userProfile);\n      console.log('User profile created successfully:', user.uid);\n      \n      // Create default categories for new user\n      await this.createDefaultCategories(user.uid);\n    } catch (error) {\n      console.error('Error creating user profile:', error);\n      await handleFirestoreError(error);\n      throw error;\n    }\n  }\n\n  async getUserProfile(userId?: string): Promise<UserProfile | null> {\n    const uid = userId || this.userId;\n    if (!uid) throw new Error('User not authenticated');\n\n    try {\n      await ensureFirestoreConnection();\n      \n      const docRef = doc(db, 'users', uid);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return docSnap.data() as UserProfile;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      await handleFirestoreError(error);\n      throw error;\n    }\n  }\n\n  async updateUserProfile(updates: Partial<UserProfile>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    try {\n      await ensureFirestoreConnection();\n      \n      const userRef = doc(db, 'users', this.userId);\n      await updateDoc(userRef, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n      console.log('User profile updated successfully');\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      await handleFirestoreError(error);\n      throw error;\n    }\n  }\n\n  // Goals Management\n  async createGoal(goalData: Omit<Goal, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    try {\n      await ensureFirestoreConnection();\n      \n      const goal: Omit<Goal, 'id'> = {\n        ...goalData,\n        userId: this.userId,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      const docRef = await addDoc(collection(db, 'goals'), goal);\n      console.log('Goal created successfully:', docRef.id);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating goal:', error);\n      await handleFirestoreError(error);\n      throw error;\n    }\n  }\n\n  async getUserGoals(): Promise<Goal[]> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    try {\n      await ensureFirestoreConnection();\n      \n      const q = query(\n        collection(db, 'goals'),\n        where('userId', '==', this.userId),\n        orderBy('createdAt', 'desc')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map((doc: any) => ({\n        id: doc.id,\n        ...doc.data()\n      }) as Goal);\n    } catch (error) {\n      console.error('Error getting user goals:', error);\n      await handleFirestoreError(error);\n      throw error;\n    }\n  }\n\n  async updateGoal(goalId: string, updates: Partial<Goal>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const goalRef = doc(db, 'goals', goalId);\n    await updateDoc(goalRef, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n\n    // If goal is completed, update user XP and stats\n    if (updates.status === 'completed' && updates.completedAt) {\n      await this.updateUserXP(updates.xpReward || 10);\n    }\n  }\n\n  async deleteGoal(goalId: string): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n    await deleteDoc(doc(db, 'goals', goalId));\n  }\n\n  // Categories Management\n  async createDefaultCategories(userId: string): Promise<void> {\n    const defaultCategories = [\n      { name: 'Main Mission', icon: '⚔️', originalName: 'Main Mission' },\n      { name: 'Training', icon: '🛡️', originalName: 'Training' },\n      { name: 'Side Quest', icon: '⭐', originalName: 'Side Quest' }\n    ];\n\n    for (const cat of defaultCategories) {\n      await addDoc(collection(db, 'categories'), {\n        ...cat,\n        userId,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n    }\n  }\n\n  async getUserCategories(): Promise<Category[]> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const q = query(\n      collection(db, 'categories'),\n      where('userId', '==', this.userId)\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc: any) => ({\n      id: doc.id,\n      ...doc.data()\n    }) as Category);\n  }\n\n  async updateCategory(categoryId: string, updates: Partial<Category>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const categoryRef = doc(db, 'categories', categoryId);\n    await updateDoc(categoryRef, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n  }\n\n  // Notes Management\n  async createNote(noteData: Omit<Note, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const note: Omit<Note, 'id'> = {\n      ...noteData,\n      userId: this.userId,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    const docRef = await addDoc(collection(db, 'notes'), note);\n    return docRef.id;\n  }\n\n  async getUserNotes(): Promise<Note[]> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const q = query(\n      collection(db, 'notes'),\n      where('userId', '==', this.userId),\n      orderBy('updatedAt', 'desc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc: any) => ({\n      id: doc.id,\n      ...doc.data()\n    }) as Note);\n  }\n\n  async updateNote(noteId: string, updates: Partial<Note>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const noteRef = doc(db, 'notes', noteId);\n    await updateDoc(noteRef, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n  }\n\n  async deleteNote(noteId: string): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n    await deleteDoc(doc(db, 'notes', noteId));\n  }\n\n  // User Settings Management\n  async getUserSettings(): Promise<UserSettings | null> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const docRef = doc(db, 'settings', this.userId);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      return docSnap.data() as UserSettings;\n    }\n    return null;\n  }\n\n  async updateUserSettings(settings: Partial<UserSettings>): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const settingsRef = doc(db, 'settings', this.userId);\n    await setDoc(settingsRef, {\n      ...settings,\n      userId: this.userId,\n      updatedAt: new Date().toISOString()\n    }, { merge: true });\n  }\n\n  // XP and Level Management\n  private async updateUserXP(xpGained: number): Promise<void> {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const userProfile = await this.getUserProfile();\n    if (!userProfile) return;\n\n    const newXP = userProfile.xp + xpGained;\n    const newLevel = Math.floor(newXP / 100) + 1; // 100 XP per level\n    const newRank = this.calculateRank(newLevel);\n\n    await this.updateUserProfile({\n      xp: newXP,\n      level: newLevel,\n      rank: newRank,\n      totalGoalsCompleted: userProfile.totalGoalsCompleted + 1\n    });\n  }\n\n  private calculateRank(level: number): string {\n    if (level >= 50) return 'S-Rank';\n    if (level >= 40) return 'A-Rank';\n    if (level >= 30) return 'B-Rank';\n    if (level >= 20) return 'C-Rank';\n    if (level >= 10) return 'D-Rank';\n    return 'E-Rank';\n  }\n\n  // Real-time listeners\n  subscribeToUserProfile(callback: (profile: UserProfile | null) => void): () => void {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    return onSnapshot(doc(db, 'users', this.userId), (doc: DocumentSnapshot<DocumentData>) => {\n      if (doc.exists()) {\n        callback(doc.data() as UserProfile);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  subscribeToUserGoals(callback: (goals: Goal[]) => void): () => void {\n    if (!this.userId) throw new Error('User not authenticated');\n\n    const q = query(\n      collection(db, 'goals'),\n      where('userId', '==', this.userId),\n      orderBy('createdAt', 'desc')\n    );\n\n    return onSnapshot(q, (querySnapshot: QuerySnapshot<DocumentData>) => {\n      const goals = querySnapshot.docs.map((doc: any) => ({\n        id: doc.id,\n        ...doc.data()\n      }) as Goal);\n      callback(goals);\n    });\n  }\n}\n\nexport const userDataManager = new UserDataManager();","size_bytes":11113},"client/src/types/firebase.d.ts":{"content":"// Firebase TypeScript declarations to eliminate type warnings\ndeclare module 'firebase/firestore' {\n  export * from '@firebase/firestore';\n}\n\ndeclare module 'firebase/auth' {\n  export * from '@firebase/auth';\n}\n\ndeclare module 'firebase/app' {\n  export * from '@firebase/app';\n}","size_bytes":279},"client/src/components/admin/DataIntegrityTest.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { userDataManager } from '@/lib/userDataManager';\nimport { showToast } from '@/components/ui/toast';\n\nexport function DataIntegrityTest() {\n  const { user } = useAuth();\n  const [testing, setTesting] = useState(false);\n  const [results, setResults] = useState<string[]>([]);\n\n  const runDataIntegrityTest = async () => {\n    if (!user) {\n      showToast({ type: 'error', title: 'Error', message: 'User not authenticated' });\n      return;\n    }\n\n    setTesting(true);\n    setResults([]);\n    const testResults: string[] = [];\n\n    try {\n      // Test 1: Profile Creation/Retrieval\n      testResults.push('🔵 Testing Profile Data...');\n      \n      const profile = await userDataManager.getUserProfile();\n      if (profile) {\n        testResults.push(`✅ Profile found: Level ${profile.level}, XP ${profile.xp}, Rank ${profile.rank}`);\n      } else {\n        testResults.push('⚠️ No profile found - will be created on first login');\n      }\n\n      // Test 2: Goal Operations\n      testResults.push('🔵 Testing Goal Storage...');\n      \n      // Create test goal\n      const testGoalId = await userDataManager.createGoal({\n        title: 'Data Integrity Test Goal',\n        description: 'Testing Firebase storage',\n        category: 'main-mission',\n        priority: 'medium',\n        status: 'pending',\n        xpReward: 10\n      });\n      \n      testResults.push(`✅ Goal created successfully: ${testGoalId}`);\n\n      // Retrieve goals\n      const goals = await userDataManager.getUserGoals();\n      const testGoal = goals.find(g => g.id === testGoalId);\n      \n      if (testGoal) {\n        testResults.push(`✅ Goal retrieved successfully: \"${testGoal.title}\"`);\n      } else {\n        testResults.push('❌ Goal retrieval failed');\n      }\n\n      // Update goal\n      await userDataManager.updateGoal(testGoalId, { \n        status: 'completed',\n        completedAt: new Date().toISOString()\n      });\n      testResults.push('✅ Goal updated successfully');\n\n      // Test 3: Category Storage\n      testResults.push('🔵 Testing Category Storage...');\n      \n      const categories = await userDataManager.getUserCategories();\n      testResults.push(`✅ Categories retrieved: ${categories.length} categories found`);\n      categories.forEach(cat => {\n        testResults.push(`  📁 ${cat.name} (${cat.icon})`);\n      });\n\n      // Test 4: Note Storage\n      testResults.push('🔵 Testing Note Storage...');\n      \n      const testNoteId = await userDataManager.createNote({\n        title: 'Data Integrity Test Note',\n        content: 'This is a test note to verify Firebase storage.',\n        tags: ['test', 'integrity']\n      });\n      \n      testResults.push(`✅ Note created successfully: ${testNoteId}`);\n\n      const notes = await userDataManager.getUserNotes();\n      const testNote = notes.find(n => n.id === testNoteId);\n      \n      if (testNote) {\n        testResults.push(`✅ Note retrieved successfully: \"${testNote.title}\"`);\n      } else {\n        testResults.push('❌ Note retrieval failed');\n      }\n\n      // Test 5: Settings Storage\n      testResults.push('🔵 Testing Settings Storage...');\n      \n      await userDataManager.updateUserSettings({\n        theme: 'dark',\n        notifications: true,\n        dailyGoalReminder: true,\n        reminderTime: '09:00'\n      });\n      \n      const settings = await userDataManager.getUserSettings();\n      if (settings) {\n        testResults.push(`✅ Settings saved and retrieved successfully`);\n        testResults.push(`  🎨 Theme: ${settings.theme}`);\n        testResults.push(`  🔔 Notifications: ${settings.notifications ? 'Enabled' : 'Disabled'}`);\n      } else {\n        testResults.push('❌ Settings storage failed');\n      }\n\n      // Clean up test data\n      testResults.push('🔵 Cleaning up test data...');\n      await userDataManager.deleteGoal(testGoalId);\n      await userDataManager.deleteNote(testNoteId);\n      testResults.push('✅ Test data cleaned up successfully');\n\n      testResults.push('');\n      testResults.push('🎉 DATA INTEGRITY TEST COMPLETED SUCCESSFULLY!');\n      testResults.push('✅ All user data is being stored securely in Firebase Firestore');\n      testResults.push('✅ User data isolation is working correctly');\n      testResults.push('✅ No data loss risk detected');\n\n      showToast({\n        type: 'success',\n        title: 'Data Integrity Test Passed',\n        message: 'All user data is being stored securely!'\n      });\n\n    } catch (error) {\n      console.error('Data integrity test failed:', error);\n      testResults.push(`❌ Test failed: ${error}`);\n      \n      showToast({\n        type: 'error',\n        title: 'Data Integrity Test Failed',\n        message: 'Please check console for details'\n      });\n    }\n\n    setResults(testResults);\n    setTesting(false);\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-6 max-w-2xl mx-auto\">\n      <h3 className=\"text-xl font-bold text-white mb-4 font-['Orbitron']\">Data Integrity Test</h3>\n      <p className=\"text-gray-300 mb-4\">\n        This test verifies that all user data is being stored properly in Firebase Firestore \n        and that there's no risk of data loss.\n      </p>\n      \n      <button\n        onClick={runDataIntegrityTest}\n        disabled={testing}\n        className={`px-6 py-3 rounded-lg font-medium transition-all ${\n          testing\n            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'\n            : 'bg-cyan-500 hover:bg-cyan-600 text-white'\n        }`}\n      >\n        {testing ? 'Running Tests...' : 'Run Data Integrity Test'}\n      </button>\n\n      {results.length > 0 && (\n        <div className=\"mt-6 bg-gray-900 border border-gray-600 rounded-lg p-4 max-h-96 overflow-y-auto\">\n          <h4 className=\"text-lg font-semibold text-white mb-3\">Test Results:</h4>\n          <div className=\"space-y-1 font-mono text-sm\">\n            {results.map((result, index) => (\n              <div\n                key={index}\n                className={`${\n                  result.startsWith('✅')\n                    ? 'text-green-400'\n                    : result.startsWith('❌')\n                    ? 'text-red-400'\n                    : result.startsWith('⚠️')\n                    ? 'text-yellow-400'\n                    : result.startsWith('🔵')\n                    ? 'text-blue-400'\n                    : result.startsWith('🎉')\n                    ? 'text-green-300 font-bold'\n                    : 'text-gray-300'\n                }`}\n              >\n                {result}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6768},"client/src/components/admin/DataStorageStatus.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useUserProfile, useUserGoals, useUserNotes } from '@/hooks/useUserData';\nimport { Database, Shield, CheckCircle, AlertCircle, Users, FileText, Target } from 'lucide-react';\n\nexport function DataStorageStatus() {\n  const { user } = useAuth();\n  const { profile, loading: profileLoading } = useUserProfile();\n  const { goals, loading: goalsLoading } = useUserGoals();\n  const { notes, loading: notesLoading } = useUserNotes();\n  \n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'checking'>('checking');\n\n  useEffect(() => {\n    // Check Firebase connection status\n    const checkConnection = async () => {\n      try {\n        if (user && !profileLoading && !goalsLoading && !notesLoading) {\n          setConnectionStatus('connected');\n        }\n      } catch (error) {\n        setConnectionStatus('disconnected');\n      }\n    };\n\n    const timeout = setTimeout(checkConnection, 2000);\n    return () => clearTimeout(timeout);\n  }, [user, profileLoading, goalsLoading, notesLoading]);\n\n  if (!user) {\n    return null;\n  }\n\n  const isLoading = profileLoading || goalsLoading || notesLoading;\n\n  return (\n    <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <Database className=\"w-6 h-6 text-cyan-400\" />\n        <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">Data Storage Status</h3>\n      </div>\n\n      {/* Connection Status */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          {connectionStatus === 'connected' ? (\n            <CheckCircle className=\"w-5 h-5 text-green-400\" />\n          ) : connectionStatus === 'disconnected' ? (\n            <AlertCircle className=\"w-5 h-5 text-red-400\" />\n          ) : (\n            <div className=\"w-5 h-5 border-2 border-cyan-400 border-t-transparent rounded-full animate-spin\" />\n          )}\n          <span className=\"text-white font-medium\">\n            Firebase Connection: {' '}\n            <span className={`${\n              connectionStatus === 'connected' ? 'text-green-400' : \n              connectionStatus === 'disconnected' ? 'text-red-400' : \n              'text-yellow-400'\n            }`}>\n              {connectionStatus === 'connected' ? 'Connected' : \n               connectionStatus === 'disconnected' ? 'Disconnected' : \n               'Checking...'}\n            </span>\n          </span>\n        </div>\n        <p className=\"text-gray-400 text-sm\">\n          Secure cloud storage with real-time synchronization\n        </p>\n      </div>\n\n      {/* User Data Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        {/* Profile Data */}\n        <div className=\"bg-gray-900/50 border border-gray-600 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <Users className=\"w-4 h-4 text-blue-400\" />\n            <span className=\"text-white font-medium\">Profile</span>\n          </div>\n          {isLoading ? (\n            <div className=\"text-gray-400 text-sm\">Loading...</div>\n          ) : (\n            <div className=\"space-y-1 text-sm\">\n              <div className=\"text-green-400\">✓ Level {profile?.level || 1}</div>\n              <div className=\"text-green-400\">✓ {profile?.xp || 0} XP</div>\n              <div className=\"text-green-400\">✓ {profile?.rank || 'E-Rank'}</div>\n              <div className=\"text-gray-400\">Stored securely</div>\n            </div>\n          )}\n        </div>\n\n        {/* Goals Data */}\n        <div className=\"bg-gray-900/50 border border-gray-600 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <Target className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-white font-medium\">Goals</span>\n          </div>\n          {isLoading ? (\n            <div className=\"text-gray-400 text-sm\">Loading...</div>\n          ) : (\n            <div className=\"space-y-1 text-sm\">\n              <div className=\"text-green-400\">✓ {goals.length} Total</div>\n              <div className=\"text-green-400\">✓ {goals.filter(g => g.status === 'completed').length} Completed</div>\n              <div className=\"text-green-400\">✓ {goals.filter(g => g.status === 'pending').length} Active</div>\n              <div className=\"text-gray-400\">Auto-synced</div>\n            </div>\n          )}\n        </div>\n\n        {/* Notes Data */}\n        <div className=\"bg-gray-900/50 border border-gray-600 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <FileText className=\"w-4 h-4 text-purple-400\" />\n            <span className=\"text-white font-medium\">Notes</span>\n          </div>\n          {isLoading ? (\n            <div className=\"text-gray-400 text-sm\">Loading...</div>\n          ) : (\n            <div className=\"space-y-1 text-sm\">\n              <div className=\"text-green-400\">✓ {notes.length} Documents</div>\n              <div className=\"text-green-400\">✓ Cloud backup</div>\n              <div className=\"text-green-400\">✓ Real-time sync</div>\n              <div className=\"text-gray-400\">Encrypted storage</div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Security Features */}\n      <div className=\"bg-gray-900/50 border border-gray-600 rounded-lg p-4\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <Shield className=\"w-5 h-5 text-green-400\" />\n          <span className=\"text-white font-medium\">Security & Privacy</span>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-gray-300\">User data isolation</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-gray-300\">Firebase Authentication</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-gray-300\">Encrypted transmission</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-gray-300\">Automatic backups</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-gray-300\">Cross-device sync</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-gray-300\">No localStorage dependencies</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Data Protection Notice */}\n      <div className=\"mt-4 p-3 bg-green-500/10 border border-green-500/20 rounded-lg\">\n        <div className=\"flex items-start space-x-2\">\n          <CheckCircle className=\"w-4 h-4 text-green-400 mt-0.5\" />\n          <div className=\"text-sm\">\n            <div className=\"text-green-400 font-medium mb-1\">Data Protection Active</div>\n            <div className=\"text-gray-300\">\n              Your data is securely stored in Firebase Firestore with enterprise-grade security. \n              Each user's data is completely isolated and encrypted. No risk of data loss or cross-user contamination.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7704},"client/src/components/features/DevNotifications.tsx":{"content":"import React, { useState } from 'react';\nimport { Bell, BellRing, CheckCircle, AlertCircle } from 'lucide-react';\n\nexport function DevNotifications() {\n  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>(\n    typeof Notification !== 'undefined' ? Notification.permission : 'default'\n  );\n  const [lastNotification, setLastNotification] = useState<string>('');\n\n  const requestNotificationPermission = async () => {\n    if (!('Notification' in window)) {\n      setLastNotification('Notifications not supported in this environment');\n      return;\n    }\n\n    try {\n      // Handle both promise and callback versions of requestPermission\n      let permission: NotificationPermission;\n      \n      if (typeof Notification.requestPermission === 'function') {\n        const result = Notification.requestPermission();\n        \n        // Check if it returns a promise or uses callback\n        if (result && typeof result.then === 'function') {\n          permission = await result;\n        } else {\n          // Fallback for older browsers that use callback\n          permission = await new Promise((resolve) => {\n            Notification.requestPermission((result) => resolve(result));\n          });\n        }\n      } else {\n        permission = 'denied';\n      }\n      \n      setNotificationPermission(permission);\n      \n      if (permission === 'granted') {\n        setLastNotification('Notification permission granted!');\n      } else if (permission === 'denied') {\n        setLastNotification('Notification permission denied');\n      } else {\n        setLastNotification('Notification permission dismissed');\n      }\n    } catch (error) {\n      setLastNotification('Failed to request notification permission');\n      console.error('Notification permission error:', error);\n    }\n  };\n\n  const showTestNotification = () => {\n    if (!('Notification' in window)) {\n      setLastNotification('Notifications not supported');\n      return;\n    }\n\n    if (notificationPermission !== 'granted') {\n      setLastNotification('Notification permission required');\n      return;\n    }\n\n    try {\n      // Use a simpler notification for better mobile compatibility\n      const notification = new Notification('Solo Hunter Test', {\n        body: 'Development notification test successful!',\n        tag: 'dev-test',\n        silent: false,\n        requireInteraction: false\n      });\n\n      // Add timeout to prevent blocking\n      setTimeout(() => {\n        if (notification) {\n          notification.close();\n        }\n      }, 5000);\n\n      notification.onclick = () => {\n        try {\n          window.focus();\n          notification.close();\n        } catch (e) {\n          console.log('Notification click handled');\n        }\n      };\n\n      notification.onerror = (error) => {\n        console.error('Notification error:', error);\n        setLastNotification('Notification failed to display');\n      };\n\n      setLastNotification('Test notification sent successfully');\n    } catch (error) {\n      setLastNotification('Failed to show notification: ' + error.message);\n      console.error('Notification error:', error);\n    }\n  };\n\n  return (\n    <div className=\"mystical-card p-4 sm:p-6\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n          <BellRing className=\"w-5 h-5 text-white\" />\n        </div>\n        <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n          <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n            DEV NOTIFICATIONS\n          </span>\n        </h2>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Notification Permission Status */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n          <div className=\"flex items-center space-x-3\">\n            {notificationPermission === 'granted' ? (\n              <CheckCircle className=\"w-5 h-5 text-green-400\" />\n            ) : (\n              <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n            )}\n            <div>\n              <div className=\"text-white font-medium text-sm\">Browser Notifications</div>\n              <div className={`text-xs ${\n                notificationPermission === 'granted' ? 'text-green-400' : \n                notificationPermission === 'denied' ? 'text-red-400' : 'text-yellow-400'\n              }`}>\n                {notificationPermission === 'granted' ? 'Enabled' : \n                 notificationPermission === 'denied' ? 'Blocked' : 'Not Requested'}\n              </div>\n            </div>\n          </div>\n          <div className={`w-3 h-3 rounded-full ${\n            notificationPermission === 'granted' ? 'bg-green-400' : \n            notificationPermission === 'denied' ? 'bg-red-400' : 'bg-yellow-400'\n          }`} />\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-2\">\n          {notificationPermission !== 'granted' && (\n            <button\n              onClick={requestNotificationPermission}\n              className=\"w-full px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg transition-colors text-sm font-medium\"\n              data-testid=\"button-request-permission\"\n            >\n              Request Notification Permission\n            </button>\n          )}\n          \n          <button\n            onClick={showTestNotification}\n            disabled={notificationPermission !== 'granted'}\n            className={`w-full px-4 py-2 rounded-lg transition-colors text-sm font-medium ${\n              notificationPermission === 'granted'\n                ? 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white'\n                : 'bg-gray-600 text-gray-400 cursor-not-allowed'\n            }`}\n            data-testid=\"button-test-notification\"\n          >\n            Send Test Notification\n          </button>\n        </div>\n\n        {/* Status Message */}\n        {lastNotification && (\n          <div className=\"p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n            <div className=\"text-white text-sm font-medium mb-1\">Last Action:</div>\n            <div className=\"text-gray-300 text-xs\">{lastNotification}</div>\n          </div>\n        )}\n\n        {/* Hunter Notification Presets */}\n        <div className=\"mt-4 p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg\">\n          <h3 className=\"text-purple-300 text-sm font-medium mb-2\">Hunter Notification Types:</h3>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <button\n              onClick={() => showTestNotification()}\n              disabled={notificationPermission !== 'granted'}\n              className={`px-3 py-2 rounded text-xs ${\n                notificationPermission === 'granted'\n                  ? 'bg-purple-600/50 hover:bg-purple-600/70 text-purple-200'\n                  : 'bg-gray-600/50 text-gray-500 cursor-not-allowed'\n              }`}\n            >\n              🎯 Quest Reminder\n            </button>\n            <button\n              onClick={() => showTestNotification()}\n              disabled={notificationPermission !== 'granted'}\n              className={`px-3 py-2 rounded text-xs ${\n                notificationPermission === 'granted'\n                  ? 'bg-purple-600/50 hover:bg-purple-600/70 text-purple-200'\n                  : 'bg-gray-600/50 text-gray-500 cursor-not-allowed'\n              }`}\n            >\n              🔥 Streak Alert\n            </button>\n            <button\n              onClick={() => showTestNotification()}\n              disabled={notificationPermission !== 'granted'}\n              className={`px-3 py-2 rounded text-xs ${\n                notificationPermission === 'granted'\n                  ? 'bg-purple-600/50 hover:bg-purple-600/70 text-purple-200'\n                  : 'bg-gray-600/50 text-gray-500 cursor-not-allowed'\n              }`}\n            >\n              ⚡ Level Up\n            </button>\n            <button\n              onClick={() => showTestNotification()}\n              disabled={notificationPermission !== 'granted'}\n              className={`px-3 py-2 rounded text-xs ${\n                notificationPermission === 'granted'\n                  ? 'bg-purple-600/50 hover:bg-purple-600/70 text-purple-200'\n                  : 'bg-gray-600/50 text-gray-500 cursor-not-allowed'\n              }`}\n            >\n              🌅 Daily Motivation\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8710},"client/src/components/features/MobileNotifications.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Bell, BellRing, CheckCircle, AlertCircle, Smartphone } from 'lucide-react';\n\nexport function MobileNotifications() {\n  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>('default');\n  const [lastNotification, setLastNotification] = useState<string>('');\n  const [isRequesting, setIsRequesting] = useState(false);\n\n  useEffect(() => {\n    // Safely check notification permission\n    if (typeof window !== 'undefined' && 'Notification' in window) {\n      setNotificationPermission(Notification.permission);\n    }\n  }, []);\n\n  const requestNotificationPermission = async () => {\n    if (isRequesting) return; // Prevent multiple simultaneous requests\n    \n    setIsRequesting(true);\n    setLastNotification('Requesting permission...');\n\n    try {\n      // Check if notifications are supported\n      if (!('Notification' in window)) {\n        setLastNotification('Notifications not supported on this device');\n        return;\n      }\n\n      // Mobile-safe permission request\n      const permission = await new Promise<NotificationPermission>((resolve) => {\n        try {\n          // Use a timeout to prevent hanging\n          const timeoutId = setTimeout(() => {\n            console.log('Notification permission request timed out');\n            resolve('denied');\n          }, 8000); // 8 second timeout\n\n          const handlePermission = (result: NotificationPermission) => {\n            clearTimeout(timeoutId);\n            resolve(result);\n          };\n\n          // Try modern promise-based API first\n          const requestResult = Notification.requestPermission();\n          \n          if (requestResult && typeof requestResult.then === 'function') {\n            requestResult.then(handlePermission).catch(() => {\n              clearTimeout(timeoutId);\n              resolve('denied');\n            });\n          } else {\n            // Fallback for older browsers\n            Notification.requestPermission(handlePermission);\n          }\n        } catch (error) {\n          console.error('Permission request error:', error);\n          resolve('denied');\n        }\n      });\n\n      setNotificationPermission(permission);\n      \n      if (permission === 'granted') {\n        setLastNotification('✅ Notification permission granted!');\n        // Test notification after permission granted\n        setTimeout(() => {\n          showTestNotification();\n        }, 1000);\n      } else if (permission === 'denied') {\n        setLastNotification('❌ Notification permission denied');\n      } else {\n        setLastNotification('⚠️ Permission request dismissed');\n      }\n    } catch (error) {\n      console.error('Notification permission error:', error);\n      setLastNotification('❌ Failed to request permission');\n    } finally {\n      setIsRequesting(false);\n    }\n  };\n\n  const showTestNotification = () => {\n    if (!('Notification' in window)) {\n      setLastNotification('❌ Notifications not supported');\n      return;\n    }\n\n    if (notificationPermission !== 'granted') {\n      setLastNotification('❌ Permission required');\n      return;\n    }\n\n    try {\n      // Create simple, mobile-friendly notification\n      const notification = new Notification('Solo Hunter Test', {\n        body: 'Notification system working!',\n        tag: 'test-notification',\n        silent: false,\n        requireInteraction: false\n      });\n\n      // Auto-close after 4 seconds\n      setTimeout(() => {\n        try {\n          notification.close();\n        } catch (e) {\n          // Ignore close errors\n        }\n      }, 4000);\n\n      // Handle click\n      notification.onclick = () => {\n        try {\n          window.focus();\n          notification.close();\n        } catch (e) {\n          // Ignore errors\n        }\n      };\n\n      // Handle errors\n      notification.onerror = (error) => {\n        console.error('Notification error:', error);\n        setLastNotification('❌ Notification failed to display');\n      };\n\n      setLastNotification('✅ Test notification sent!');\n    } catch (error) {\n      console.error('Notification creation error:', error);\n      setLastNotification('❌ Failed to create notification');\n    }\n  };\n\n  return (\n    <div className=\"mystical-card p-4 sm:p-6\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n          <Smartphone className=\"w-5 h-5 text-white\" />\n        </div>\n        <h2 className=\"text-lg sm:text-xl font-bold text-white font-['Orbitron']\">\n          <span className=\"bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent\">\n            MOBILE NOTIFICATIONS\n          </span>\n        </h2>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Permission Status */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n          <div className=\"flex items-center space-x-3\">\n            {notificationPermission === 'granted' ? (\n              <CheckCircle className=\"w-5 h-5 text-green-400\" />\n            ) : (\n              <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n            )}\n            <div>\n              <div className=\"text-white font-medium text-sm\">Push Notifications</div>\n              <div className={`text-xs ${\n                notificationPermission === 'granted' ? 'text-green-400' : \n                notificationPermission === 'denied' ? 'text-red-400' : 'text-yellow-400'\n              }`}>\n                {notificationPermission === 'granted' ? 'Enabled' : \n                 notificationPermission === 'denied' ? 'Blocked' : 'Not Requested'}\n              </div>\n            </div>\n          </div>\n          <div className={`w-3 h-3 rounded-full ${\n            notificationPermission === 'granted' ? 'bg-green-400' : \n            notificationPermission === 'denied' ? 'bg-red-400' : 'bg-yellow-400'\n          }`} />\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-2\">\n          {notificationPermission !== 'granted' && (\n            <button\n              onClick={requestNotificationPermission}\n              disabled={isRequesting}\n              className={`w-full px-4 py-3 rounded-lg transition-colors text-sm font-medium ${\n                isRequesting\n                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                  : 'bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white'\n              }`}\n              data-testid=\"button-request-mobile-permission\"\n            >\n              {isRequesting ? 'Requesting Permission...' : 'Enable Notifications'}\n            </button>\n          )}\n          \n          <button\n            onClick={showTestNotification}\n            disabled={notificationPermission !== 'granted'}\n            className={`w-full px-4 py-3 rounded-lg transition-colors text-sm font-medium ${\n              notificationPermission === 'granted'\n                ? 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white'\n                : 'bg-gray-600 text-gray-400 cursor-not-allowed'\n            }`}\n            data-testid=\"button-test-mobile-notification\"\n          >\n            Send Test Notification\n          </button>\n        </div>\n\n        {/* Status Message */}\n        {lastNotification && (\n          <div className=\"p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n            <div className=\"text-white text-sm font-medium mb-1\">Status:</div>\n            <div className=\"text-gray-300 text-xs\">{lastNotification}</div>\n          </div>\n        )}\n\n        {/* Mobile Tips */}\n        <div className=\"mt-4 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg\">\n          <h3 className=\"text-blue-300 text-sm font-medium mb-2\">Mobile Tips:</h3>\n          <ul className=\"text-xs text-blue-200 space-y-1\">\n            <li>• Allow notifications when prompted by your browser</li>\n            <li>• Check your browser settings if blocked</li>\n            <li>• Notifications work best when app is installed as PWA</li>\n            <li>• Test notifications will auto-close after 4 seconds</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8348},"client/src/components/features/PWAInstall.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Download, X, Smartphone } from 'lucide-react';\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nexport function PWAInstall() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showInstallBanner, setShowInstallBanner] = useState(false);\n  const [isIOS, setIsIOS] = useState(false);\n  const [isStandalone, setIsStandalone] = useState(false);\n\n  useEffect(() => {\n    // Check if running on iOS\n    const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n    setIsIOS(iOS);\n\n    // Check if app is already installed (standalone mode)\n    const standalone = window.matchMedia('(display-mode: standalone)').matches || \n                      (window.navigator as any).standalone === true;\n    setIsStandalone(standalone);\n\n    // Listen for beforeinstallprompt event (Chrome/Edge)\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      \n      // Show banner after a short delay for better UX\n      setTimeout(() => {\n        if (!standalone) {\n          setShowInstallBanner(true);\n        }\n      }, 3000);\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setShowInstallBanner(false);\n      setDeferredPrompt(null);\n      console.log('PWA installed successfully');\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    // For iOS, show banner if not in standalone mode\n    if (iOS && !standalone) {\n      setTimeout(() => {\n        setShowInstallBanner(true);\n      }, 5000);\n    }\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (deferredPrompt) {\n      // Chrome/Edge installation\n      deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        console.log('User accepted PWA installation');\n      } else {\n        console.log('User dismissed PWA installation');\n      }\n      \n      setDeferredPrompt(null);\n      setShowInstallBanner(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowInstallBanner(false);\n    // Don't show again for this session\n    sessionStorage.setItem('pwa-install-dismissed', 'true');\n  };\n\n  // Don't show if already installed or dismissed\n  if (isStandalone || !showInstallBanner || sessionStorage.getItem('pwa-install-dismissed')) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Mobile Install Banner */}\n      <div className=\"fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-80 z-50 animate-slide-up\">\n        <div className=\"bg-gradient-to-r from-gray-900 to-gray-800 border border-cyan-500/30 rounded-xl p-4 shadow-2xl backdrop-blur-sm\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                <Smartphone className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white text-sm\">Install Solo Hunter</h3>\n                <p className=\"text-xs text-gray-400\">Add to home screen for better experience</p>\n              </div>\n            </div>\n            <button\n              onClick={handleDismiss}\n              className=\"p-1 hover:bg-gray-700 rounded-full transition-colors\"\n              data-testid=\"button-dismiss-pwa\"\n            >\n              <X className=\"w-4 h-4 text-gray-400\" />\n            </button>\n          </div>\n\n          {isIOS ? (\n            // iOS Instructions\n            <div className=\"space-y-2\">\n              <p className=\"text-xs text-gray-300\">\n                To install: Tap <span className=\"font-semibold\">Share</span> → <span className=\"font-semibold\">Add to Home Screen</span>\n              </p>\n              <div className=\"flex items-center space-x-2 text-xs text-cyan-400\">\n                <Download className=\"w-3 h-3\" />\n                <span>Available in Safari</span>\n              </div>\n            </div>\n          ) : (\n            // Chrome/Edge Install Button\n            <button\n              onClick={handleInstallClick}\n              className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white px-4 py-2.5 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2\"\n              data-testid=\"button-install-pwa\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>Install App</span>\n            </button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":5078},"client/src/components/features/PWAInstallPrompt.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Download, X, Smartphone } from 'lucide-react';\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nexport function PWAInstallPrompt() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  useEffect(() => {\n    // Check if app is already installed\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isAppInstalled = (window as any).navigator.standalone || isStandalone;\n    setIsInstalled(isAppInstalled);\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      const promptEvent = e as BeforeInstallPromptEvent;\n      setDeferredPrompt(promptEvent);\n      \n      // Show install prompt after a delay\n      setTimeout(() => {\n        if (!isAppInstalled) {\n          setShowPrompt(true);\n        }\n      }, 5000);\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setShowPrompt(false);\n      setDeferredPrompt(null);\n      console.log('Solo Hunter PWA installed successfully!');\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) return;\n\n    try {\n      await deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        console.log('User accepted PWA install');\n      } else {\n        console.log('User dismissed PWA install');\n      }\n      \n      setDeferredPrompt(null);\n      setShowPrompt(false);\n    } catch (error) {\n      console.error('Error during PWA install:', error);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    // Don't show again for this session\n    sessionStorage.setItem('pwa-prompt-dismissed', 'true');\n  };\n\n  // Don't show if already installed or dismissed\n  if (isInstalled || !showPrompt || !deferredPrompt) {\n    return null;\n  }\n\n  // Don't show if dismissed in this session\n  if (sessionStorage.getItem('pwa-prompt-dismissed')) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 right-4 z-50 max-w-sm mx-auto\">\n      <div className=\"mystical-card p-4 border-2 border-cyan-500/50 shadow-lg shadow-cyan-500/20\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-lg flex items-center justify-center flex-shrink-0\">\n            <Smartphone className=\"w-5 h-5 text-white\" />\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-white font-bold text-sm font-['Orbitron'] mb-1\">\n              Install Solo Hunter\n            </h3>\n            <p className=\"text-gray-300 text-xs mb-3\">\n              Add to your home screen for the full hunter experience with offline access and notifications.\n            </p>\n            \n            <div className=\"flex space-x-2\">\n              <button\n                onClick={handleInstallClick}\n                className=\"flex-1 px-3 py-2 bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white text-xs font-medium rounded-lg transition-colors flex items-center justify-center space-x-1\"\n                data-testid=\"button-install-pwa\"\n              >\n                <Download className=\"w-3 h-3\" />\n                <span>Install</span>\n              </button>\n              \n              <button\n                onClick={handleDismiss}\n                className=\"px-3 py-2 bg-gray-700 hover:bg-gray-600 text-gray-300 text-xs rounded-lg transition-colors\"\n                data-testid=\"button-dismiss-pwa\"\n              >\n                Later\n              </button>\n            </div>\n          </div>\n          \n          <button\n            onClick={handleDismiss}\n            className=\"text-gray-400 hover:text-white transition-colors flex-shrink-0\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4590},"client/src/components/ui/ConfirmDialog.tsx":{"content":"import { useState } from \"react\";\nimport { AlertTriangle, Trash2, X } from \"lucide-react\";\n\ninterface ConfirmDialogProps {\n  isOpen: boolean;\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  type?: 'danger' | 'warning' | 'info';\n}\n\nexport function ConfirmDialog({\n  isOpen,\n  title,\n  message,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  onConfirm,\n  onCancel,\n  type = 'warning'\n}: ConfirmDialogProps) {\n  if (!isOpen) return null;\n\n  const getIcon = () => {\n    switch (type) {\n      case 'danger':\n        return <Trash2 className=\"w-8 h-8 text-red-400\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-8 h-8 text-yellow-400\" />;\n      default:\n        return <AlertTriangle className=\"w-8 h-8 text-cyan-400\" />;\n    }\n  };\n\n  const getButtonColor = () => {\n    switch (type) {\n      case 'danger':\n        return 'bg-red-600 hover:bg-red-700';\n      case 'warning':\n        return 'bg-yellow-600 hover:bg-yellow-700';\n      default:\n        return 'bg-cyan-600 hover:bg-cyan-700';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"mystical-card max-w-md w-full p-6 animate-in zoom-in-95\">\n        <div className=\"flex items-center space-x-4 mb-6\">\n          {getIcon()}\n          <div>\n            <h3 className=\"text-xl font-bold text-white font-['Orbitron']\">{title}</h3>\n            <p className=\"text-gray-300 mt-2\">{message}</p>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          <button\n            onClick={onCancel}\n            className=\"flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition-colors\"\n          >\n            {cancelText}\n          </button>\n          <button\n            onClick={onConfirm}\n            className={`flex-1 px-4 py-2 ${getButtonColor()} text-white rounded-lg font-medium transition-colors`}\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Hook for easy confirmation dialogs\nexport function useConfirmDialog() {\n  const [dialog, setDialog] = useState<{\n    isOpen: boolean;\n    title: string;\n    message: string;\n    onConfirm: () => void;\n    type?: 'danger' | 'warning' | 'info';\n  }>({\n    isOpen: false,\n    title: '',\n    message: '',\n    onConfirm: () => {},\n  });\n\n  const showConfirm = (\n    title: string,\n    message: string,\n    onConfirm: () => void,\n    type: 'danger' | 'warning' | 'info' = 'warning'\n  ) => {\n    setDialog({\n      isOpen: true,\n      title,\n      message,\n      onConfirm,\n      type\n    });\n  };\n\n  const hideConfirm = () => {\n    setDialog(prev => ({ ...prev, isOpen: false }));\n  };\n\n  const handleConfirm = () => {\n    dialog.onConfirm();\n    hideConfirm();\n  };\n\n  return {\n    showConfirm,\n    confirmDialog: (\n      <ConfirmDialog\n        {...dialog}\n        onConfirm={handleConfirm}\n        onCancel={hideConfirm}\n        confirmText={dialog.type === 'danger' ? 'Delete' : 'Confirm'}\n      />\n    )\n  };\n}","size_bytes":3146}}}